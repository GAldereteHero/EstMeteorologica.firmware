
estMet_v0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  080061e8  080061e8  000161e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006490  08006490  000202fc  2**0
                  CONTENTS
  4 .ARM          00000000  08006490  08006490  000202fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006490  08006490  000202fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006490  08006490  00016490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006494  08006494  00016494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  08006498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200002fc  08006794  000202fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08006794  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de44  00000000  00000000  00020325  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002201  00000000  00000000  0002e169  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c90  00000000  00000000  00030370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  00031000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018da4  00000000  00000000  00031b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b71c  00000000  00000000  0004a90c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a73f  00000000  00000000  00056028  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0767  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d3c  00000000  00000000  000e07e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002fc 	.word	0x200002fc
 800012c:	00000000 	.word	0x00000000
 8000130:	080061cc 	.word	0x080061cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000300 	.word	0x20000300
 800014c:	080061cc 	.word	0x080061cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <delay>:
/********* Variables externas ***********/

extern char msg13[80];


void delay(uint16_t us){
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <delay+0x2c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000f96:	bf00      	nop
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <delay+0x2c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d3f9      	bcc.n	8000f98 <delay+0x14>
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000049c 	.word	0x2000049c

08000fb4 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	4619      	mov	r1, r3
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f001 fbf1 	bl	80027c8 <HAL_GPIO_Init>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001010:	2301      	movs	r3, #1
 8001012:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f001 fbd4 	bl	80027c8 <HAL_GPIO_Init>
}
 8001020:	bf00      	nop
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <DS18B20_Start>:

/*********************************** DS18B20 FUNCTIONS ****************************************/

uint8_t DS18B20_Start (void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8001032:	2140      	movs	r1, #64	; 0x40
 8001034:	4813      	ldr	r0, [pc, #76]	; (8001084 <DS18B20_Start+0x5c>)
 8001036:	f7ff ffbd 	bl	8000fb4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);  // pull the pin low
 800103a:	2200      	movs	r2, #0
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	4811      	ldr	r0, [pc, #68]	; (8001084 <DS18B20_Start+0x5c>)
 8001040:	f001 fd33 	bl	8002aaa <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8001044:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001048:	f7ff ff9c 	bl	8000f84 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 800104c:	2140      	movs	r1, #64	; 0x40
 800104e:	480d      	ldr	r0, [pc, #52]	; (8001084 <DS18B20_Start+0x5c>)
 8001050:	f7ff ffcd 	bl	8000fee <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8001054:	2050      	movs	r0, #80	; 0x50
 8001056:	f7ff ff95 	bl	8000f84 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 800105a:	2140      	movs	r1, #64	; 0x40
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <DS18B20_Start+0x5c>)
 800105e:	f001 fd0d 	bl	8002a7c <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <DS18B20_Start+0x46>
 8001068:	2301      	movs	r3, #1
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	e001      	b.n	8001072 <DS18B20_Start+0x4a>
	else Response = -1;
 800106e:	23ff      	movs	r3, #255	; 0xff
 8001070:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 8001072:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001076:	f7ff ff85 	bl	8000f84 <delay>

	return Response;
 800107a:	79fb      	ldrb	r3, [r7, #7]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40010800 	.word	0x40010800

08001088 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001092:	2140      	movs	r1, #64	; 0x40
 8001094:	481d      	ldr	r0, [pc, #116]	; (800110c <DS18B20_Write+0x84>)
 8001096:	f7ff ff8d 	bl	8000fb4 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	e02e      	b.n	80010fe <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80010a0:	79fa      	ldrb	r2, [r7, #7]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	fa42 f303 	asr.w	r3, r2, r3
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d013      	beq.n	80010d8 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80010b0:	2140      	movs	r1, #64	; 0x40
 80010b2:	4816      	ldr	r0, [pc, #88]	; (800110c <DS18B20_Write+0x84>)
 80010b4:	f7ff ff7e 	bl	8000fb4 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);  // pull the pin LOW
 80010b8:	2200      	movs	r2, #0
 80010ba:	2140      	movs	r1, #64	; 0x40
 80010bc:	4813      	ldr	r0, [pc, #76]	; (800110c <DS18B20_Write+0x84>)
 80010be:	f001 fcf4 	bl	8002aaa <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80010c2:	2001      	movs	r0, #1
 80010c4:	f7ff ff5e 	bl	8000f84 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80010c8:	2140      	movs	r1, #64	; 0x40
 80010ca:	4810      	ldr	r0, [pc, #64]	; (800110c <DS18B20_Write+0x84>)
 80010cc:	f7ff ff8f 	bl	8000fee <Set_Pin_Input>
			delay (50);  // wait for 60 us
 80010d0:	2032      	movs	r0, #50	; 0x32
 80010d2:	f7ff ff57 	bl	8000f84 <delay>
 80010d6:	e00f      	b.n	80010f8 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 80010d8:	2140      	movs	r1, #64	; 0x40
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <DS18B20_Write+0x84>)
 80010dc:	f7ff ff6a 	bl	8000fb4 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);  // pull the pin LOW
 80010e0:	2200      	movs	r2, #0
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <DS18B20_Write+0x84>)
 80010e6:	f001 fce0 	bl	8002aaa <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 80010ea:	2032      	movs	r0, #50	; 0x32
 80010ec:	f7ff ff4a 	bl	8000f84 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <DS18B20_Write+0x84>)
 80010f4:	f7ff ff7b 	bl	8000fee <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b07      	cmp	r3, #7
 8001102:	ddcd      	ble.n	80010a0 <DS18B20_Write+0x18>
		}
	}
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40010800 	.word	0x40010800

08001110 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8001116:	2300      	movs	r3, #0
 8001118:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800111a:	2140      	movs	r1, #64	; 0x40
 800111c:	481a      	ldr	r0, [pc, #104]	; (8001188 <DS18B20_Read+0x78>)
 800111e:	f7ff ff66 	bl	8000fee <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	e026      	b.n	8001176 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8001128:	2140      	movs	r1, #64	; 0x40
 800112a:	4817      	ldr	r0, [pc, #92]	; (8001188 <DS18B20_Read+0x78>)
 800112c:	f7ff ff42 	bl	8000fb4 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);  // pull the data pin LOW
 8001130:	2200      	movs	r2, #0
 8001132:	2140      	movs	r1, #64	; 0x40
 8001134:	4814      	ldr	r0, [pc, #80]	; (8001188 <DS18B20_Read+0x78>)
 8001136:	f001 fcb8 	bl	8002aaa <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 800113a:	2001      	movs	r0, #1
 800113c:	f7ff ff22 	bl	8000f84 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001140:	2140      	movs	r1, #64	; 0x40
 8001142:	4811      	ldr	r0, [pc, #68]	; (8001188 <DS18B20_Read+0x78>)
 8001144:	f7ff ff53 	bl	8000fee <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8001148:	2140      	movs	r1, #64	; 0x40
 800114a:	480f      	ldr	r0, [pc, #60]	; (8001188 <DS18B20_Read+0x78>)
 800114c:	f001 fc96 	bl	8002a7c <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d009      	beq.n	800116a <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8001156:	2201      	movs	r2, #1
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	b25a      	sxtb	r2, r3
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4313      	orrs	r3, r2
 8001166:	b25b      	sxtb	r3, r3
 8001168:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 800116a:	2032      	movs	r0, #50	; 0x32
 800116c:	f7ff ff0a 	bl	8000f84 <delay>
	for (int i=0;i<8;i++)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	2b07      	cmp	r3, #7
 800117a:	ddd5      	ble.n	8001128 <DS18B20_Read+0x18>
	}
	return value;
 800117c:	79fb      	ldrb	r3, [r7, #7]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40010800 	.word	0x40010800

0800118c <getTemp>:

uint8_t getTemp(void){
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0

	float Temperatura = 0;
 8001192:	f04f 0300 	mov.w	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
	uint8_t Temperature = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	76fb      	strb	r3, [r7, #27]
	const float RawHigh= 92.77;
 800119c:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <getTemp+0x104>)
 800119e:	617b      	str	r3, [r7, #20]
	const float RawLow= 0.93;
 80011a0:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <getTemp+0x108>)
 80011a2:	613b      	str	r3, [r7, #16]
	const float ReferenceHigh= 94;
 80011a4:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <getTemp+0x10c>)
 80011a6:	60fb      	str	r3, [r7, #12]
	const float ReferenceLow= 0.4;
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <getTemp+0x110>)
 80011aa:	60bb      	str	r3, [r7, #8]
	const float RawRange= RawHigh - RawLow;
 80011ac:	6939      	ldr	r1, [r7, #16]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff fc6e 	bl	8000a90 <__aeabi_fsub>
 80011b4:	4603      	mov	r3, r0
 80011b6:	607b      	str	r3, [r7, #4]
	const float ReferenceRange= ReferenceHigh - ReferenceLow;
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f7ff fc68 	bl	8000a90 <__aeabi_fsub>
 80011c0:	4603      	mov	r3, r0
 80011c2:	603b      	str	r3, [r7, #0]


	Presence = DS18B20_Start ();
 80011c4:	f7ff ff30 	bl	8001028 <DS18B20_Start>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <getTemp+0x114>)
 80011ce:	701a      	strb	r2, [r3, #0]
	HAL_Delay (1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f001 f9c9 	bl	8002568 <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 80011d6:	20cc      	movs	r0, #204	; 0xcc
 80011d8:	f7ff ff56 	bl	8001088 <DS18B20_Write>
	DS18B20_Write (0x44);  // convert t
 80011dc:	2044      	movs	r0, #68	; 0x44
 80011de:	f7ff ff53 	bl	8001088 <DS18B20_Write>
	HAL_Delay (800);
 80011e2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80011e6:	f001 f9bf 	bl	8002568 <HAL_Delay>

	Presence = DS18B20_Start ();
 80011ea:	f7ff ff1d 	bl	8001028 <DS18B20_Start>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <getTemp+0x114>)
 80011f4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f001 f9b6 	bl	8002568 <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 80011fc:	20cc      	movs	r0, #204	; 0xcc
 80011fe:	f7ff ff43 	bl	8001088 <DS18B20_Write>
	DS18B20_Write (0xBE);  // Read Scratch-pad
 8001202:	20be      	movs	r0, #190	; 0xbe
 8001204:	f7ff ff40 	bl	8001088 <DS18B20_Write>

	Temp_byte1 = DS18B20_Read();
 8001208:	f7ff ff82 	bl	8001110 <DS18B20_Read>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <getTemp+0x118>)
 8001212:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DS18B20_Read();
 8001214:	f7ff ff7c 	bl	8001110 <DS18B20_Read>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <getTemp+0x11c>)
 800121e:	701a      	strb	r2, [r3, #0]
	tem = (Temp_byte2<<8)|Temp_byte1;
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <getTemp+0x11c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <getTemp+0x118>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	b21b      	sxth	r3, r3
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <getTemp+0x120>)
 8001236:	801a      	strh	r2, [r3, #0]
	Temperatura = (float)tem/16;
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <getTemp+0x120>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fcd9 	bl	8000bf4 <__aeabi_ui2f>
 8001242:	4603      	mov	r3, r0
 8001244:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fddf 	bl	8000e0c <__aeabi_fdiv>
 800124e:	4603      	mov	r3, r0
 8001250:	61fb      	str	r3, [r7, #28]
	Temperatura = (((Temperatura - RawLow)*ReferenceRange)/RawRange)+ReferenceLow;
 8001252:	6939      	ldr	r1, [r7, #16]
 8001254:	69f8      	ldr	r0, [r7, #28]
 8001256:	f7ff fc1b 	bl	8000a90 <__aeabi_fsub>
 800125a:	4603      	mov	r3, r0
 800125c:	6839      	ldr	r1, [r7, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fd20 	bl	8000ca4 <__aeabi_fmul>
 8001264:	4603      	mov	r3, r0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fdcf 	bl	8000e0c <__aeabi_fdiv>
 800126e:	4603      	mov	r3, r0
 8001270:	4619      	mov	r1, r3
 8001272:	68b8      	ldr	r0, [r7, #8]
 8001274:	f7ff fc0e 	bl	8000a94 <__addsf3>
 8001278:	4603      	mov	r3, r0
 800127a:	61fb      	str	r3, [r7, #28]
	Temperature = (uint8_t)Temperatura;
 800127c:	69f8      	ldr	r0, [r7, #28]
 800127e:	f7ff fe61 	bl	8000f44 <__aeabi_f2uiz>
 8001282:	4603      	mov	r3, r0
 8001284:	76fb      	strb	r3, [r7, #27]

	return(Temperature);
 8001286:	7efb      	ldrb	r3, [r7, #27]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	42b98a3d 	.word	0x42b98a3d
 8001294:	3f6e147b 	.word	0x3f6e147b
 8001298:	42bc0000 	.word	0x42bc0000
 800129c:	3ecccccd 	.word	0x3ecccccd
 80012a0:	20000318 	.word	0x20000318
 80012a4:	20000330 	.word	0x20000330
 80012a8:	20000334 	.word	0x20000334
 80012ac:	20000332 	.word	0x20000332

080012b0 <sendTemp>:

void sendTemp(void){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

	if(cont_temp <= 9){
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <sendTemp+0x34>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b09      	cmp	r3, #9
 80012ba:	d806      	bhi.n	80012ca <sendTemp+0x1a>
		cont_temp++;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <sendTemp+0x34>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <sendTemp+0x34>)
 80012c6:	701a      	strb	r2, [r3, #0]
		initModule();
//		updateTemperature(msg13, getTemp());
		uploadDataToServer(2);
		resetModule();
	}
}
 80012c8:	e009      	b.n	80012de <sendTemp+0x2e>
		cont_temp = 1;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <sendTemp+0x34>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
		initModule();
 80012d0:	f000 f9d2 	bl	8001678 <initModule>
		uploadDataToServer(2);
 80012d4:	2002      	movs	r0, #2
 80012d6:	f000 fab9 	bl	800184c <uploadDataToServer>
		resetModule();
 80012da:	f000 fa69 	bl	80017b0 <resetModule>
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000000 	.word	0x20000000

080012e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fc:	4b52      	ldr	r3, [pc, #328]	; (8001448 <MX_GPIO_Init+0x160>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a51      	ldr	r2, [pc, #324]	; (8001448 <MX_GPIO_Init+0x160>)
 8001302:	f043 0310 	orr.w	r3, r3, #16
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b4f      	ldr	r3, [pc, #316]	; (8001448 <MX_GPIO_Init+0x160>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0310 	and.w	r3, r3, #16
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001314:	4b4c      	ldr	r3, [pc, #304]	; (8001448 <MX_GPIO_Init+0x160>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a4b      	ldr	r2, [pc, #300]	; (8001448 <MX_GPIO_Init+0x160>)
 800131a:	f043 0320 	orr.w	r3, r3, #32
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b49      	ldr	r3, [pc, #292]	; (8001448 <MX_GPIO_Init+0x160>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0320 	and.w	r3, r3, #32
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	4b46      	ldr	r3, [pc, #280]	; (8001448 <MX_GPIO_Init+0x160>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a45      	ldr	r2, [pc, #276]	; (8001448 <MX_GPIO_Init+0x160>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b43      	ldr	r3, [pc, #268]	; (8001448 <MX_GPIO_Init+0x160>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b40      	ldr	r3, [pc, #256]	; (8001448 <MX_GPIO_Init+0x160>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a3f      	ldr	r2, [pc, #252]	; (8001448 <MX_GPIO_Init+0x160>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b3d      	ldr	r3, [pc, #244]	; (8001448 <MX_GPIO_Init+0x160>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001362:	483a      	ldr	r0, [pc, #232]	; (800144c <MX_GPIO_Init+0x164>)
 8001364:	f001 fba1 	bl	8002aaa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Reset_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2142      	movs	r1, #66	; 0x42
 800136c:	4838      	ldr	r0, [pc, #224]	; (8001450 <MX_GPIO_Init+0x168>)
 800136e:	f001 fb9c 	bl	8002aaa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_A6_Pin|RST_A6_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001378:	4836      	ldr	r0, [pc, #216]	; (8001454 <MX_GPIO_Init+0x16c>)
 800137a:	f001 fb96 	bl	8002aaa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800137e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2302      	movs	r3, #2
 800138e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4619      	mov	r1, r3
 8001396:	482d      	ldr	r0, [pc, #180]	; (800144c <MX_GPIO_Init+0x164>)
 8001398:	f001 fa16 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800139c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4619      	mov	r1, r3
 80013ac:	4827      	ldr	r0, [pc, #156]	; (800144c <MX_GPIO_Init+0x164>)
 80013ae:	f001 fa0b 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 80013b2:	f649 13b1 	movw	r3, #39345	; 0x99b1
 80013b6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b8:	2303      	movs	r3, #3
 80013ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	4619      	mov	r1, r3
 80013c2:	4823      	ldr	r0, [pc, #140]	; (8001450 <MX_GPIO_Init+0x168>)
 80013c4:	f001 fa00 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Reset_Pin|DS18B20_Pin;
 80013c8:	2342      	movs	r3, #66	; 0x42
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	481c      	ldr	r0, [pc, #112]	; (8001450 <MX_GPIO_Init+0x168>)
 80013e0:	f001 f9f2 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_MAG_Pin;
 80013e4:	2301      	movs	r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_GPIO_Init+0x170>)
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SENSOR_MAG_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	4817      	ldr	r0, [pc, #92]	; (8001454 <MX_GPIO_Init+0x16c>)
 80013f8:	f001 f9e6 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB14 PB15 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80013fc:	f64c 73f6 	movw	r3, #53238	; 0xcff6
 8001400:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001402:	2303      	movs	r3, #3
 8001404:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	4619      	mov	r1, r3
 800140c:	4811      	ldr	r0, [pc, #68]	; (8001454 <MX_GPIO_Init+0x16c>)
 800140e:	f001 f9db 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_A6_Pin|RST_A6_Pin;
 8001412:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2302      	movs	r3, #2
 8001422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	4619      	mov	r1, r3
 800142a:	480a      	ldr	r0, [pc, #40]	; (8001454 <MX_GPIO_Init+0x16c>)
 800142c:	f001 f9cc 	bl	80027c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2106      	movs	r1, #6
 8001434:	2006      	movs	r0, #6
 8001436:	f001 f990 	bl	800275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800143a:	2006      	movs	r0, #6
 800143c:	f001 f9a9 	bl	8002792 <HAL_NVIC_EnableIRQ>

}
 8001440:	bf00      	nop
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	40011000 	.word	0x40011000
 8001450:	40010800 	.word	0x40010800
 8001454:	40010c00 	.word	0x40010c00
 8001458:	10110000 	.word	0x10110000

0800145c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001460:	f001 f820 	bl	80024a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001464:	f000 f826 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001468:	f7ff ff3e 	bl	80012e8 <MX_GPIO_Init>
  MX_TIM4_Init();
 800146c:	f000 fe7a 	bl	8002164 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001470:	f000 fdda 	bl	8002028 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001474:	f000 ff18 	bl	80022a8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001478:	f000 fe26 	bl	80020c8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800147c:	f000 ff3e 	bl	80022fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <main+0x4c>)
 8001482:	f001 ffc7 	bl	8003414 <HAL_TIM_Base_Start>

  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <main+0x50>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f06f 0201 	mvn.w	r2, #1
 800148e:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim2);
 8001490:	4806      	ldr	r0, [pc, #24]	; (80014ac <main+0x50>)
 8001492:	f002 f809 	bl	80034a8 <HAL_TIM_Base_Start_IT>

  __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <main+0x54>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f06f 0201 	mvn.w	r2, #1
 800149e:	611a      	str	r2, [r3, #16]

  resetModule();
 80014a0:	f000 f986 	bl	80017b0 <resetModule>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <main+0x48>
 80014a6:	bf00      	nop
 80014a8:	2000049c 	.word	0x2000049c
 80014ac:	200004e4 	.word	0x200004e4
 80014b0:	20000454 	.word	0x20000454

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b090      	sub	sp, #64	; 0x40
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0318 	add.w	r3, r7, #24
 80014be:	2228      	movs	r2, #40	; 0x28
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fe3c 	bl	8004140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e4:	2301      	movs	r3, #1
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e8:	2302      	movs	r3, #2
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f8:	f107 0318 	add.w	r3, r7, #24
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 fb1d 	bl	8002b3c <HAL_RCC_OscConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001508:	f000 f844 	bl	8001594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150c:	230f      	movs	r3, #15
 800150e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001510:	2302      	movs	r3, #2
 8001512:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001518:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800151c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2102      	movs	r1, #2
 8001526:	4618      	mov	r0, r3
 8001528:	f001 fd88 	bl	800303c <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001532:	f000 f82f 	bl	8001594 <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3740      	adds	r7, #64	; 0x40
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	80fb      	strh	r3, [r7, #6]

	startRain();
 8001548:	f000 fc9e 	bl	8001e88 <startRain>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2){
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001564:	d106      	bne.n	8001574 <HAL_TIM_PeriodElapsedCallback+0x20>
		HAL_GPIO_TogglePin(RED_LED_GPIO_Port,RED_LED_Pin);
 8001566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156a:	4808      	ldr	r0, [pc, #32]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800156c:	f001 fab5 	bl	8002ada <HAL_GPIO_TogglePin>
		sendTemp(); // Se activa cada 3 minutos
 8001570:	f7ff fe9e 	bl	80012b0 <sendTemp>
	}

	if (htim->Instance == TIM4){
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a05      	ldr	r2, [pc, #20]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_TIM_PeriodElapsedCallback+0x2e>
		sendIncrement();// Se activa cada 1 minuto
 800157e:	f000 fc35 	bl	8001dec <sendIncrement>
	}
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40011000 	.word	0x40011000
 8001590:	40000800 	.word	0x40000800

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while (1){
		HAL_GPIO_TogglePin(RED_LED_GPIO_Port,RED_LED_Pin);
 8001598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159c:	4803      	ldr	r0, [pc, #12]	; (80015ac <Error_Handler+0x18>)
 800159e:	f001 fa9c 	bl	8002ada <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80015a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015a6:	f000 ffdf 	bl	8002568 <HAL_Delay>
		HAL_GPIO_TogglePin(RED_LED_GPIO_Port,RED_LED_Pin);
 80015aa:	e7f5      	b.n	8001598 <Error_Handler+0x4>
 80015ac:	40011000 	.word	0x40011000

080015b0 <checkAnswer>:

statesMefUart state;

/*********Funciones***********/

_Bool checkAnswer( uint8_t answerOption ){
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]

	switch ( answerOption ){
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d01d      	beq.n	80015fc <checkAnswer+0x4c>
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d035      	beq.n	8001630 <checkAnswer+0x80>
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d14d      	bne.n	8001664 <checkAnswer+0xb4>
		case 1:{
			for(uint8_t i = 0; i <= sizeRxBuffer; i++){
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e00f      	b.n	80015ee <checkAnswer+0x3e>
				if(rxBuffer[i] == 'O' && rxBuffer[i+1] == 'K' ){ return 1; }
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	4a27      	ldr	r2, [pc, #156]	; (8001670 <checkAnswer+0xc0>)
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	2b4f      	cmp	r3, #79	; 0x4f
 80015d6:	d107      	bne.n	80015e8 <checkAnswer+0x38>
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	3301      	adds	r3, #1
 80015dc:	4a24      	ldr	r2, [pc, #144]	; (8001670 <checkAnswer+0xc0>)
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	2b4b      	cmp	r3, #75	; 0x4b
 80015e2:	d101      	bne.n	80015e8 <checkAnswer+0x38>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e03e      	b.n	8001666 <checkAnswer+0xb6>
			for(uint8_t i = 0; i <= sizeRxBuffer; i++){
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	3301      	adds	r3, #1
 80015ec:	73fb      	strb	r3, [r7, #15]
 80015ee:	4b21      	ldr	r3, [pc, #132]	; (8001674 <checkAnswer+0xc4>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d9ea      	bls.n	80015ce <checkAnswer+0x1e>
			}
			return 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e034      	b.n	8001666 <checkAnswer+0xb6>
		}break;

		case 2:{
			for(uint8_t i = 0; i <= sizeRxBuffer; i++){
 80015fc:	2300      	movs	r3, #0
 80015fe:	73bb      	strb	r3, [r7, #14]
 8001600:	e00f      	b.n	8001622 <checkAnswer+0x72>
				if(rxBuffer[i] == 'C' && rxBuffer[i+1] == 'O' ){ return 1; }
 8001602:	7bbb      	ldrb	r3, [r7, #14]
 8001604:	4a1a      	ldr	r2, [pc, #104]	; (8001670 <checkAnswer+0xc0>)
 8001606:	5cd3      	ldrb	r3, [r2, r3]
 8001608:	2b43      	cmp	r3, #67	; 0x43
 800160a:	d107      	bne.n	800161c <checkAnswer+0x6c>
 800160c:	7bbb      	ldrb	r3, [r7, #14]
 800160e:	3301      	adds	r3, #1
 8001610:	4a17      	ldr	r2, [pc, #92]	; (8001670 <checkAnswer+0xc0>)
 8001612:	5cd3      	ldrb	r3, [r2, r3]
 8001614:	2b4f      	cmp	r3, #79	; 0x4f
 8001616:	d101      	bne.n	800161c <checkAnswer+0x6c>
 8001618:	2301      	movs	r3, #1
 800161a:	e024      	b.n	8001666 <checkAnswer+0xb6>
			for(uint8_t i = 0; i <= sizeRxBuffer; i++){
 800161c:	7bbb      	ldrb	r3, [r7, #14]
 800161e:	3301      	adds	r3, #1
 8001620:	73bb      	strb	r3, [r7, #14]
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <checkAnswer+0xc4>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	7bba      	ldrb	r2, [r7, #14]
 8001628:	429a      	cmp	r2, r3
 800162a:	d9ea      	bls.n	8001602 <checkAnswer+0x52>
			}
			return 0;
 800162c:	2300      	movs	r3, #0
 800162e:	e01a      	b.n	8001666 <checkAnswer+0xb6>
		}break;

		case 3:{
			for(uint8_t i = 0; i <= sizeRxBuffer; i++){
 8001630:	2300      	movs	r3, #0
 8001632:	737b      	strb	r3, [r7, #13]
 8001634:	e00f      	b.n	8001656 <checkAnswer+0xa6>
				if(rxBuffer[i] == '1' && rxBuffer[i+2] == '1' ){ return 1; }
 8001636:	7b7b      	ldrb	r3, [r7, #13]
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <checkAnswer+0xc0>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	2b31      	cmp	r3, #49	; 0x31
 800163e:	d107      	bne.n	8001650 <checkAnswer+0xa0>
 8001640:	7b7b      	ldrb	r3, [r7, #13]
 8001642:	3302      	adds	r3, #2
 8001644:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <checkAnswer+0xc0>)
 8001646:	5cd3      	ldrb	r3, [r2, r3]
 8001648:	2b31      	cmp	r3, #49	; 0x31
 800164a:	d101      	bne.n	8001650 <checkAnswer+0xa0>
 800164c:	2301      	movs	r3, #1
 800164e:	e00a      	b.n	8001666 <checkAnswer+0xb6>
			for(uint8_t i = 0; i <= sizeRxBuffer; i++){
 8001650:	7b7b      	ldrb	r3, [r7, #13]
 8001652:	3301      	adds	r3, #1
 8001654:	737b      	strb	r3, [r7, #13]
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <checkAnswer+0xc4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	7b7a      	ldrb	r2, [r7, #13]
 800165c:	429a      	cmp	r2, r3
 800165e:	d9ea      	bls.n	8001636 <checkAnswer+0x86>
			}
			return 0;
 8001660:	2300      	movs	r3, #0
 8001662:	e000      	b.n	8001666 <checkAnswer+0xb6>
		}break;

		default:{
			return 0;
 8001664:	2300      	movs	r3, #0
		}break;
	}

}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	2000038c 	.word	0x2000038c
 8001674:	20000001 	.word	0x20000001

08001678 <initModule>:

void initModule(void){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(PWR_A6_GPIO_Port, PWR_A6_Pin, GPIO_PIN_SET);
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001684:	4842      	ldr	r0, [pc, #264]	; (8001790 <initModule+0x118>)
 8001686:	f001 fa10 	bl	8002aaa <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800168a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800168e:	f000 ff6b 	bl	8002568 <HAL_Delay>
	HAL_GPIO_WritePin(PWR_A6_GPIO_Port, PWR_A6_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001698:	483d      	ldr	r0, [pc, #244]	; (8001790 <initModule+0x118>)
 800169a:	f001 fa06 	bl	8002aaa <HAL_GPIO_WritePin>
	HAL_Delay(15000);
 800169e:	f643 2098 	movw	r0, #15000	; 0x3a98
 80016a2:	f000 ff61 	bl	8002568 <HAL_Delay>

	memset(rxBuffer, 0, sizeRxBuffer);
 80016a6:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <initModule+0x11c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	2100      	movs	r1, #0
 80016ae:	483a      	ldr	r0, [pc, #232]	; (8001798 <initModule+0x120>)
 80016b0:	f002 fd46 	bl	8004140 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t *)msg17, sizeof(msg17), 500);	// "AT+IPR?"
 80016b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016b8:	2209      	movs	r2, #9
 80016ba:	4938      	ldr	r1, [pc, #224]	; (800179c <initModule+0x124>)
 80016bc:	4838      	ldr	r0, [pc, #224]	; (80017a0 <initModule+0x128>)
 80016be:	f002 fb0c 	bl	8003cda <HAL_UART_Transmit>
	while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 1000) == HAL_BUSY){}
 80016c2:	bf00      	nop
 80016c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c8:	22c8      	movs	r2, #200	; 0xc8
 80016ca:	4933      	ldr	r1, [pc, #204]	; (8001798 <initModule+0x120>)
 80016cc:	4834      	ldr	r0, [pc, #208]	; (80017a0 <initModule+0x128>)
 80016ce:	f002 fb96 	bl	8003dfe <HAL_UART_Receive>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d0f5      	beq.n	80016c4 <initModule+0x4c>
	HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 80016d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016dc:	22c8      	movs	r2, #200	; 0xc8
 80016de:	492e      	ldr	r1, [pc, #184]	; (8001798 <initModule+0x120>)
 80016e0:	4830      	ldr	r0, [pc, #192]	; (80017a4 <initModule+0x12c>)
 80016e2:	f002 fafa 	bl	8003cda <HAL_UART_Transmit>

	for(uint8_t i=1; i<=3; i++){
 80016e6:	2301      	movs	r3, #1
 80016e8:	71fb      	strb	r3, [r7, #7]
 80016ea:	e04a      	b.n	8001782 <initModule+0x10a>

		memset(rxBuffer, 0, sizeRxBuffer);
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <initModule+0x11c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	2100      	movs	r1, #0
 80016f4:	4828      	ldr	r0, [pc, #160]	; (8001798 <initModule+0x120>)
 80016f6:	f002 fd23 	bl	8004140 <memset>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg0, sizeof(msg0), 500);	// "AT"
 80016fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016fe:	2204      	movs	r2, #4
 8001700:	4929      	ldr	r1, [pc, #164]	; (80017a8 <initModule+0x130>)
 8001702:	4827      	ldr	r0, [pc, #156]	; (80017a0 <initModule+0x128>)
 8001704:	f002 fae9 	bl	8003cda <HAL_UART_Transmit>
		while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 1000) == HAL_BUSY){}
 8001708:	bf00      	nop
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	22c8      	movs	r2, #200	; 0xc8
 8001710:	4921      	ldr	r1, [pc, #132]	; (8001798 <initModule+0x120>)
 8001712:	4823      	ldr	r0, [pc, #140]	; (80017a0 <initModule+0x128>)
 8001714:	f002 fb73 	bl	8003dfe <HAL_UART_Receive>
 8001718:	4603      	mov	r3, r0
 800171a:	2b02      	cmp	r3, #2
 800171c:	d0f5      	beq.n	800170a <initModule+0x92>
		HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 800171e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001722:	22c8      	movs	r2, #200	; 0xc8
 8001724:	491c      	ldr	r1, [pc, #112]	; (8001798 <initModule+0x120>)
 8001726:	481f      	ldr	r0, [pc, #124]	; (80017a4 <initModule+0x12c>)
 8001728:	f002 fad7 	bl	8003cda <HAL_UART_Transmit>

		memset(rxBuffer, 0, sizeRxBuffer);
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <initModule+0x11c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	2100      	movs	r1, #0
 8001734:	4818      	ldr	r0, [pc, #96]	; (8001798 <initModule+0x120>)
 8001736:	f002 fd03 	bl	8004140 <memset>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg12, sizeof(msg12), 500);	// "AT+CREG?"
 800173a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800173e:	220a      	movs	r2, #10
 8001740:	491a      	ldr	r1, [pc, #104]	; (80017ac <initModule+0x134>)
 8001742:	4817      	ldr	r0, [pc, #92]	; (80017a0 <initModule+0x128>)
 8001744:	f002 fac9 	bl	8003cda <HAL_UART_Transmit>
		while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 1000) == HAL_BUSY){}
 8001748:	bf00      	nop
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	22c8      	movs	r2, #200	; 0xc8
 8001750:	4911      	ldr	r1, [pc, #68]	; (8001798 <initModule+0x120>)
 8001752:	4813      	ldr	r0, [pc, #76]	; (80017a0 <initModule+0x128>)
 8001754:	f002 fb53 	bl	8003dfe <HAL_UART_Receive>
 8001758:	4603      	mov	r3, r0
 800175a:	2b02      	cmp	r3, #2
 800175c:	d0f5      	beq.n	800174a <initModule+0xd2>
		HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 800175e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001762:	22c8      	movs	r2, #200	; 0xc8
 8001764:	490c      	ldr	r1, [pc, #48]	; (8001798 <initModule+0x120>)
 8001766:	480f      	ldr	r0, [pc, #60]	; (80017a4 <initModule+0x12c>)
 8001768:	f002 fab7 	bl	8003cda <HAL_UART_Transmit>

		if( checkAnswer(3) == 1 ){ i = 4;}
 800176c:	2003      	movs	r0, #3
 800176e:	f7ff ff1f 	bl	80015b0 <checkAnswer>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <initModule+0x104>
 8001778:	2304      	movs	r3, #4
 800177a:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=1; i<=3; i++){
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	3301      	adds	r3, #1
 8001780:	71fb      	strb	r3, [r7, #7]
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d9b1      	bls.n	80016ec <initModule+0x74>
		else{/*Error_Handler();*/}
	}
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40010c00 	.word	0x40010c00
 8001794:	20000001 	.word	0x20000001
 8001798:	2000038c 	.word	0x2000038c
 800179c:	20000114 	.word	0x20000114
 80017a0:	2000052c 	.word	0x2000052c
 80017a4:	2000056c 	.word	0x2000056c
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000108 	.word	0x20000108

080017b0 <resetModule>:

void resetModule(void){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_A6_GPIO_Port, RST_A6_Pin, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ba:	4807      	ldr	r0, [pc, #28]	; (80017d8 <resetModule+0x28>)
 80017bc:	f001 f975 	bl	8002aaa <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 80017c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017c4:	f000 fed0 	bl	8002568 <HAL_Delay>
	HAL_GPIO_WritePin(RST_A6_GPIO_Port, RST_A6_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ce:	4802      	ldr	r0, [pc, #8]	; (80017d8 <resetModule+0x28>)
 80017d0:	f001 f96b 	bl	8002aaa <HAL_GPIO_WritePin>
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40010c00 	.word	0x40010c00

080017dc <updateTemperature>:

void updateTemperature(char *pAux, uint8_t temp){
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]

	memset(msg13, 0, sizeof(msg13));
 80017e8:	2250      	movs	r2, #80	; 0x50
 80017ea:	2100      	movs	r1, #0
 80017ec:	4806      	ldr	r0, [pc, #24]	; (8001808 <updateTemperature+0x2c>)
 80017ee:	f002 fca7 	bl	8004140 <memset>
	sprintf(pAux,"%sfield2=%d\r\n",msg10,temp);
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	4a05      	ldr	r2, [pc, #20]	; (800180c <updateTemperature+0x30>)
 80017f6:	4906      	ldr	r1, [pc, #24]	; (8001810 <updateTemperature+0x34>)
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f003 f8f9 	bl	80049f0 <siprintf>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000338 	.word	0x20000338
 800180c:	200000b8 	.word	0x200000b8
 8001810:	080061e8 	.word	0x080061e8

08001814 <updatePluviometer>:

void updatePluviometer(char *pAux, uint8_t mili){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]

	memset(msg13, 0, sizeof(msg13));
 8001820:	2250      	movs	r2, #80	; 0x50
 8001822:	2100      	movs	r1, #0
 8001824:	4806      	ldr	r0, [pc, #24]	; (8001840 <updatePluviometer+0x2c>)
 8001826:	f002 fc8b 	bl	8004140 <memset>
	sprintf(pAux,"%sfield1=%d\r\n",msg10,mili);
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	4a05      	ldr	r2, [pc, #20]	; (8001844 <updatePluviometer+0x30>)
 800182e:	4906      	ldr	r1, [pc, #24]	; (8001848 <updatePluviometer+0x34>)
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f003 f8dd 	bl	80049f0 <siprintf>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000338 	.word	0x20000338
 8001844:	200000b8 	.word	0x200000b8
 8001848:	080061f8 	.word	0x080061f8

0800184c <uploadDataToServer>:

#ifdef CHIP_PERSONAL

_Bool uploadDataToServer (uint8_t topic){
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]

	uint8_t errorCount = 1;
 8001856:	2301      	movs	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
	state = STATE_1;
 800185a:	4bb0      	ldr	r3, [pc, #704]	; (8001b1c <uploadDataToServer+0x2d0>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]

	for (uint8_t loopCount = 0; loopCount <= 10; loopCount++ ){
 8001860:	2300      	movs	r3, #0
 8001862:	73bb      	strb	r3, [r7, #14]
 8001864:	e290      	b.n	8001d88 <uploadDataToServer+0x53c>
		if ( errorCount <= 3){
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	2b03      	cmp	r3, #3
 800186a:	f200 8284 	bhi.w	8001d76 <uploadDataToServer+0x52a>

			switch( state ){
 800186e:	4bab      	ldr	r3, [pc, #684]	; (8001b1c <uploadDataToServer+0x2d0>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b0a      	cmp	r3, #10
 8001874:	f200 8278 	bhi.w	8001d68 <uploadDataToServer+0x51c>
 8001878:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <uploadDataToServer+0x34>)
 800187a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187e:	bf00      	nop
 8001880:	080018ad 	.word	0x080018ad
 8001884:	08001915 	.word	0x08001915
 8001888:	0800197d 	.word	0x0800197d
 800188c:	080019e5 	.word	0x080019e5
 8001890:	08001a4d 	.word	0x08001a4d
 8001894:	08001ab5 	.word	0x08001ab5
 8001898:	08001b49 	.word	0x08001b49
 800189c:	08001bb1 	.word	0x08001bb1
 80018a0:	08001c19 	.word	0x08001c19
 80018a4:	08001c81 	.word	0x08001c81
 80018a8:	08001d2f 	.word	0x08001d2f

				case STATE_1:{
					memset(rxBuffer, 0, sizeRxBuffer);
 80018ac:	4b9c      	ldr	r3, [pc, #624]	; (8001b20 <uploadDataToServer+0x2d4>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	2100      	movs	r1, #0
 80018b4:	489b      	ldr	r0, [pc, #620]	; (8001b24 <uploadDataToServer+0x2d8>)
 80018b6:	f002 fc43 	bl	8004140 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg0, sizeof(msg0), 500);	// "AT"
 80018ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018be:	2204      	movs	r2, #4
 80018c0:	4999      	ldr	r1, [pc, #612]	; (8001b28 <uploadDataToServer+0x2dc>)
 80018c2:	489a      	ldr	r0, [pc, #616]	; (8001b2c <uploadDataToServer+0x2e0>)
 80018c4:	f002 fa09 	bl	8003cda <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 80018c8:	bf00      	nop
 80018ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018ce:	22c8      	movs	r2, #200	; 0xc8
 80018d0:	4994      	ldr	r1, [pc, #592]	; (8001b24 <uploadDataToServer+0x2d8>)
 80018d2:	4896      	ldr	r0, [pc, #600]	; (8001b2c <uploadDataToServer+0x2e0>)
 80018d4:	f002 fa93 	bl	8003dfe <HAL_UART_Receive>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d0f5      	beq.n	80018ca <uploadDataToServer+0x7e>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 80018de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018e2:	22c8      	movs	r2, #200	; 0xc8
 80018e4:	498f      	ldr	r1, [pc, #572]	; (8001b24 <uploadDataToServer+0x2d8>)
 80018e6:	4892      	ldr	r0, [pc, #584]	; (8001b30 <uploadDataToServer+0x2e4>)
 80018e8:	f002 f9f7 	bl	8003cda <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_2; }
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7ff fe5f 	bl	80015b0 <checkAnswer>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <uploadDataToServer+0xb4>
 80018f8:	4b88      	ldr	r3, [pc, #544]	; (8001b1c <uploadDataToServer+0x2d0>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_1; loopCount--;}
				}break;
 80018fe:	e240      	b.n	8001d82 <uploadDataToServer+0x536>
					else{ errorCount++; state = STATE_1; loopCount--;}
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	3301      	adds	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	4b85      	ldr	r3, [pc, #532]	; (8001b1c <uploadDataToServer+0x2d0>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
 800190c:	7bbb      	ldrb	r3, [r7, #14]
 800190e:	3b01      	subs	r3, #1
 8001910:	73bb      	strb	r3, [r7, #14]
				}break;
 8001912:	e236      	b.n	8001d82 <uploadDataToServer+0x536>

				case STATE_2:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001914:	4b82      	ldr	r3, [pc, #520]	; (8001b20 <uploadDataToServer+0x2d4>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	2100      	movs	r1, #0
 800191c:	4881      	ldr	r0, [pc, #516]	; (8001b24 <uploadDataToServer+0x2d8>)
 800191e:	f002 fc0f 	bl	8004140 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg1, sizeof(msg1), 500);	// "AT+CGATT?"
 8001922:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001926:	220b      	movs	r2, #11
 8001928:	4982      	ldr	r1, [pc, #520]	; (8001b34 <uploadDataToServer+0x2e8>)
 800192a:	4880      	ldr	r0, [pc, #512]	; (8001b2c <uploadDataToServer+0x2e0>)
 800192c:	f002 f9d5 	bl	8003cda <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001930:	bf00      	nop
 8001932:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001936:	22c8      	movs	r2, #200	; 0xc8
 8001938:	497a      	ldr	r1, [pc, #488]	; (8001b24 <uploadDataToServer+0x2d8>)
 800193a:	487c      	ldr	r0, [pc, #496]	; (8001b2c <uploadDataToServer+0x2e0>)
 800193c:	f002 fa5f 	bl	8003dfe <HAL_UART_Receive>
 8001940:	4603      	mov	r3, r0
 8001942:	2b02      	cmp	r3, #2
 8001944:	d0f5      	beq.n	8001932 <uploadDataToServer+0xe6>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001946:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800194a:	22c8      	movs	r2, #200	; 0xc8
 800194c:	4975      	ldr	r1, [pc, #468]	; (8001b24 <uploadDataToServer+0x2d8>)
 800194e:	4878      	ldr	r0, [pc, #480]	; (8001b30 <uploadDataToServer+0x2e4>)
 8001950:	f002 f9c3 	bl	8003cda <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_3; }
 8001954:	2001      	movs	r0, #1
 8001956:	f7ff fe2b 	bl	80015b0 <checkAnswer>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <uploadDataToServer+0x11c>
 8001960:	4b6e      	ldr	r3, [pc, #440]	; (8001b1c <uploadDataToServer+0x2d0>)
 8001962:	2202      	movs	r2, #2
 8001964:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_2; loopCount--;}
				}break;
 8001966:	e20c      	b.n	8001d82 <uploadDataToServer+0x536>
					else{ errorCount++; state = STATE_2; loopCount--;}
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	3301      	adds	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	4b6b      	ldr	r3, [pc, #428]	; (8001b1c <uploadDataToServer+0x2d0>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	7bbb      	ldrb	r3, [r7, #14]
 8001976:	3b01      	subs	r3, #1
 8001978:	73bb      	strb	r3, [r7, #14]
				}break;
 800197a:	e202      	b.n	8001d82 <uploadDataToServer+0x536>

				case STATE_3:{
					memset(rxBuffer, 0, sizeRxBuffer);
 800197c:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <uploadDataToServer+0x2d4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	2100      	movs	r1, #0
 8001984:	4867      	ldr	r0, [pc, #412]	; (8001b24 <uploadDataToServer+0x2d8>)
 8001986:	f002 fbdb 	bl	8004140 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg2, sizeof(msg2), 500);	// "AT+CGDCONT=1"
 800198a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800198e:	220c      	movs	r2, #12
 8001990:	4969      	ldr	r1, [pc, #420]	; (8001b38 <uploadDataToServer+0x2ec>)
 8001992:	4866      	ldr	r0, [pc, #408]	; (8001b2c <uploadDataToServer+0x2e0>)
 8001994:	f002 f9a1 	bl	8003cda <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001998:	bf00      	nop
 800199a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800199e:	22c8      	movs	r2, #200	; 0xc8
 80019a0:	4960      	ldr	r1, [pc, #384]	; (8001b24 <uploadDataToServer+0x2d8>)
 80019a2:	4862      	ldr	r0, [pc, #392]	; (8001b2c <uploadDataToServer+0x2e0>)
 80019a4:	f002 fa2b 	bl	8003dfe <HAL_UART_Receive>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d0f5      	beq.n	800199a <uploadDataToServer+0x14e>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 80019ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019b2:	22c8      	movs	r2, #200	; 0xc8
 80019b4:	495b      	ldr	r1, [pc, #364]	; (8001b24 <uploadDataToServer+0x2d8>)
 80019b6:	485e      	ldr	r0, [pc, #376]	; (8001b30 <uploadDataToServer+0x2e4>)
 80019b8:	f002 f98f 	bl	8003cda <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_4; }
 80019bc:	2001      	movs	r0, #1
 80019be:	f7ff fdf7 	bl	80015b0 <checkAnswer>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <uploadDataToServer+0x184>
 80019c8:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <uploadDataToServer+0x2d0>)
 80019ca:	2203      	movs	r2, #3
 80019cc:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_3; loopCount--;}
				}break;
 80019ce:	e1d8      	b.n	8001d82 <uploadDataToServer+0x536>
					else{ errorCount++; state = STATE_3; loopCount--;}
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	3301      	adds	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	4b51      	ldr	r3, [pc, #324]	; (8001b1c <uploadDataToServer+0x2d0>)
 80019d8:	2202      	movs	r2, #2
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	7bbb      	ldrb	r3, [r7, #14]
 80019de:	3b01      	subs	r3, #1
 80019e0:	73bb      	strb	r3, [r7, #14]
				}break;
 80019e2:	e1ce      	b.n	8001d82 <uploadDataToServer+0x536>

				case STATE_4:{
					memset(rxBuffer, 0, sizeRxBuffer);
 80019e4:	4b4e      	ldr	r3, [pc, #312]	; (8001b20 <uploadDataToServer+0x2d4>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	2100      	movs	r1, #0
 80019ec:	484d      	ldr	r0, [pc, #308]	; (8001b24 <uploadDataToServer+0x2d8>)
 80019ee:	f002 fba7 	bl	8004140 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg3, sizeof(msg3), 500);	//"AT+CGDCONT=1,\"IP\",\"datos.personal.com\""
 80019f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019f6:	2228      	movs	r2, #40	; 0x28
 80019f8:	4950      	ldr	r1, [pc, #320]	; (8001b3c <uploadDataToServer+0x2f0>)
 80019fa:	484c      	ldr	r0, [pc, #304]	; (8001b2c <uploadDataToServer+0x2e0>)
 80019fc:	f002 f96d 	bl	8003cda <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001a00:	bf00      	nop
 8001a02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a06:	22c8      	movs	r2, #200	; 0xc8
 8001a08:	4946      	ldr	r1, [pc, #280]	; (8001b24 <uploadDataToServer+0x2d8>)
 8001a0a:	4848      	ldr	r0, [pc, #288]	; (8001b2c <uploadDataToServer+0x2e0>)
 8001a0c:	f002 f9f7 	bl	8003dfe <HAL_UART_Receive>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d0f5      	beq.n	8001a02 <uploadDataToServer+0x1b6>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001a16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a1a:	22c8      	movs	r2, #200	; 0xc8
 8001a1c:	4941      	ldr	r1, [pc, #260]	; (8001b24 <uploadDataToServer+0x2d8>)
 8001a1e:	4844      	ldr	r0, [pc, #272]	; (8001b30 <uploadDataToServer+0x2e4>)
 8001a20:	f002 f95b 	bl	8003cda <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_5; }
 8001a24:	2001      	movs	r0, #1
 8001a26:	f7ff fdc3 	bl	80015b0 <checkAnswer>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <uploadDataToServer+0x1ec>
 8001a30:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <uploadDataToServer+0x2d0>)
 8001a32:	2204      	movs	r2, #4
 8001a34:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_4; loopCount--;}
				}break;
 8001a36:	e1a4      	b.n	8001d82 <uploadDataToServer+0x536>
					else{ errorCount++; state = STATE_4; loopCount--;}
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <uploadDataToServer+0x2d0>)
 8001a40:	2203      	movs	r2, #3
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	7bbb      	ldrb	r3, [r7, #14]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	73bb      	strb	r3, [r7, #14]
				}break;
 8001a4a:	e19a      	b.n	8001d82 <uploadDataToServer+0x536>

				case STATE_5:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001a4c:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <uploadDataToServer+0x2d4>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	2100      	movs	r1, #0
 8001a54:	4833      	ldr	r0, [pc, #204]	; (8001b24 <uploadDataToServer+0x2d8>)
 8001a56:	f002 fb73 	bl	8004140 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg4, sizeof(msg4), 500);	//"AT+CGACT=1,1"
 8001a5a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a5e:	220e      	movs	r2, #14
 8001a60:	4937      	ldr	r1, [pc, #220]	; (8001b40 <uploadDataToServer+0x2f4>)
 8001a62:	4832      	ldr	r0, [pc, #200]	; (8001b2c <uploadDataToServer+0x2e0>)
 8001a64:	f002 f939 	bl	8003cda <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001a68:	bf00      	nop
 8001a6a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a6e:	22c8      	movs	r2, #200	; 0xc8
 8001a70:	492c      	ldr	r1, [pc, #176]	; (8001b24 <uploadDataToServer+0x2d8>)
 8001a72:	482e      	ldr	r0, [pc, #184]	; (8001b2c <uploadDataToServer+0x2e0>)
 8001a74:	f002 f9c3 	bl	8003dfe <HAL_UART_Receive>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d0f5      	beq.n	8001a6a <uploadDataToServer+0x21e>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001a7e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a82:	22c8      	movs	r2, #200	; 0xc8
 8001a84:	4927      	ldr	r1, [pc, #156]	; (8001b24 <uploadDataToServer+0x2d8>)
 8001a86:	482a      	ldr	r0, [pc, #168]	; (8001b30 <uploadDataToServer+0x2e4>)
 8001a88:	f002 f927 	bl	8003cda <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_6; }
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f7ff fd8f 	bl	80015b0 <checkAnswer>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <uploadDataToServer+0x254>
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <uploadDataToServer+0x2d0>)
 8001a9a:	2205      	movs	r2, #5
 8001a9c:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_5; loopCount--;}
				}break;
 8001a9e:	e170      	b.n	8001d82 <uploadDataToServer+0x536>
					else{ errorCount++; state = STATE_5; loopCount--;}
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <uploadDataToServer+0x2d0>)
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	7bbb      	ldrb	r3, [r7, #14]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	73bb      	strb	r3, [r7, #14]
				}break;
 8001ab2:	e166      	b.n	8001d82 <uploadDataToServer+0x536>

				case STATE_6:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <uploadDataToServer+0x2d4>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2100      	movs	r1, #0
 8001abc:	4819      	ldr	r0, [pc, #100]	; (8001b24 <uploadDataToServer+0x2d8>)
 8001abe:	f002 fb3f 	bl	8004140 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg5, sizeof(msg5), 500);	//"ATD*99***1#"
 8001ac2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ac6:	220d      	movs	r2, #13
 8001ac8:	491e      	ldr	r1, [pc, #120]	; (8001b44 <uploadDataToServer+0x2f8>)
 8001aca:	4818      	ldr	r0, [pc, #96]	; (8001b2c <uploadDataToServer+0x2e0>)
 8001acc:	f002 f905 	bl	8003cda <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001ad0:	bf00      	nop
 8001ad2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ad6:	22c8      	movs	r2, #200	; 0xc8
 8001ad8:	4912      	ldr	r1, [pc, #72]	; (8001b24 <uploadDataToServer+0x2d8>)
 8001ada:	4814      	ldr	r0, [pc, #80]	; (8001b2c <uploadDataToServer+0x2e0>)
 8001adc:	f002 f98f 	bl	8003dfe <HAL_UART_Receive>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d0f5      	beq.n	8001ad2 <uploadDataToServer+0x286>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001ae6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001aea:	22c8      	movs	r2, #200	; 0xc8
 8001aec:	490d      	ldr	r1, [pc, #52]	; (8001b24 <uploadDataToServer+0x2d8>)
 8001aee:	4810      	ldr	r0, [pc, #64]	; (8001b30 <uploadDataToServer+0x2e4>)
 8001af0:	f002 f8f3 	bl	8003cda <HAL_UART_Transmit>

					if( checkAnswer(2) == 1 ){ state = STATE_7; }
 8001af4:	2002      	movs	r0, #2
 8001af6:	f7ff fd5b 	bl	80015b0 <checkAnswer>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <uploadDataToServer+0x2bc>
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <uploadDataToServer+0x2d0>)
 8001b02:	2206      	movs	r2, #6
 8001b04:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_6; loopCount--;}
				}break;
 8001b06:	e13c      	b.n	8001d82 <uploadDataToServer+0x536>
					else{ errorCount++; state = STATE_6; loopCount--;}
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
 8001b0e:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <uploadDataToServer+0x2d0>)
 8001b10:	2205      	movs	r2, #5
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	7bbb      	ldrb	r3, [r7, #14]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	73bb      	strb	r3, [r7, #14]
				}break;
 8001b1a:	e132      	b.n	8001d82 <uploadDataToServer+0x536>
 8001b1c:	20000388 	.word	0x20000388
 8001b20:	20000001 	.word	0x20000001
 8001b24:	2000038c 	.word	0x2000038c
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	2000052c 	.word	0x2000052c
 8001b30:	2000056c 	.word	0x2000056c
 8001b34:	2000000c 	.word	0x2000000c
 8001b38:	20000018 	.word	0x20000018
 8001b3c:	20000024 	.word	0x20000024
 8001b40:	2000004c 	.word	0x2000004c
 8001b44:	2000005c 	.word	0x2000005c

				case STATE_7:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001b48:	4b94      	ldr	r3, [pc, #592]	; (8001d9c <uploadDataToServer+0x550>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4893      	ldr	r0, [pc, #588]	; (8001da0 <uploadDataToServer+0x554>)
 8001b52:	f002 faf5 	bl	8004140 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg6, sizeof(msg6), 500);	//"+++"
 8001b56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b5a:	2205      	movs	r2, #5
 8001b5c:	4991      	ldr	r1, [pc, #580]	; (8001da4 <uploadDataToServer+0x558>)
 8001b5e:	4892      	ldr	r0, [pc, #584]	; (8001da8 <uploadDataToServer+0x55c>)
 8001b60:	f002 f8bb 	bl	8003cda <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001b64:	bf00      	nop
 8001b66:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b6a:	22c8      	movs	r2, #200	; 0xc8
 8001b6c:	498c      	ldr	r1, [pc, #560]	; (8001da0 <uploadDataToServer+0x554>)
 8001b6e:	488e      	ldr	r0, [pc, #568]	; (8001da8 <uploadDataToServer+0x55c>)
 8001b70:	f002 f945 	bl	8003dfe <HAL_UART_Receive>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d0f5      	beq.n	8001b66 <uploadDataToServer+0x31a>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001b7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b7e:	22c8      	movs	r2, #200	; 0xc8
 8001b80:	4987      	ldr	r1, [pc, #540]	; (8001da0 <uploadDataToServer+0x554>)
 8001b82:	488a      	ldr	r0, [pc, #552]	; (8001dac <uploadDataToServer+0x560>)
 8001b84:	f002 f8a9 	bl	8003cda <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_8; }
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f7ff fd11 	bl	80015b0 <checkAnswer>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <uploadDataToServer+0x350>
 8001b94:	4b86      	ldr	r3, [pc, #536]	; (8001db0 <uploadDataToServer+0x564>)
 8001b96:	2207      	movs	r2, #7
 8001b98:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_7; loopCount--;}
				}break;
 8001b9a:	e0f2      	b.n	8001d82 <uploadDataToServer+0x536>
					else{ errorCount++; state = STATE_7; loopCount--;}
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	4b83      	ldr	r3, [pc, #524]	; (8001db0 <uploadDataToServer+0x564>)
 8001ba4:	2206      	movs	r2, #6
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	7bbb      	ldrb	r3, [r7, #14]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	73bb      	strb	r3, [r7, #14]
				}break;
 8001bae:	e0e8      	b.n	8001d82 <uploadDataToServer+0x536>

				case STATE_8:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001bb0:	4b7a      	ldr	r3, [pc, #488]	; (8001d9c <uploadDataToServer+0x550>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4879      	ldr	r0, [pc, #484]	; (8001da0 <uploadDataToServer+0x554>)
 8001bba:	f002 fac1 	bl	8004140 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg7, sizeof(msg7), 500);	//"AT+CIFSR"
 8001bbe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bc2:	220a      	movs	r2, #10
 8001bc4:	497b      	ldr	r1, [pc, #492]	; (8001db4 <uploadDataToServer+0x568>)
 8001bc6:	4878      	ldr	r0, [pc, #480]	; (8001da8 <uploadDataToServer+0x55c>)
 8001bc8:	f002 f887 	bl	8003cda <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001bcc:	bf00      	nop
 8001bce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bd2:	22c8      	movs	r2, #200	; 0xc8
 8001bd4:	4972      	ldr	r1, [pc, #456]	; (8001da0 <uploadDataToServer+0x554>)
 8001bd6:	4874      	ldr	r0, [pc, #464]	; (8001da8 <uploadDataToServer+0x55c>)
 8001bd8:	f002 f911 	bl	8003dfe <HAL_UART_Receive>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d0f5      	beq.n	8001bce <uploadDataToServer+0x382>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001be2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001be6:	22c8      	movs	r2, #200	; 0xc8
 8001be8:	496d      	ldr	r1, [pc, #436]	; (8001da0 <uploadDataToServer+0x554>)
 8001bea:	4870      	ldr	r0, [pc, #448]	; (8001dac <uploadDataToServer+0x560>)
 8001bec:	f002 f875 	bl	8003cda <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_9; }
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7ff fcdd 	bl	80015b0 <checkAnswer>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <uploadDataToServer+0x3b8>
 8001bfc:	4b6c      	ldr	r3, [pc, #432]	; (8001db0 <uploadDataToServer+0x564>)
 8001bfe:	2208      	movs	r2, #8
 8001c00:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_8; loopCount--;}
				}break;
 8001c02:	e0be      	b.n	8001d82 <uploadDataToServer+0x536>
					else{ errorCount++; state = STATE_8; loopCount--;}
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	3301      	adds	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	4b69      	ldr	r3, [pc, #420]	; (8001db0 <uploadDataToServer+0x564>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	73bb      	strb	r3, [r7, #14]
				}break;
 8001c16:	e0b4      	b.n	8001d82 <uploadDataToServer+0x536>

				case STATE_9:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001c18:	4b60      	ldr	r3, [pc, #384]	; (8001d9c <uploadDataToServer+0x550>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2100      	movs	r1, #0
 8001c20:	485f      	ldr	r0, [pc, #380]	; (8001da0 <uploadDataToServer+0x554>)
 8001c22:	f002 fa8d 	bl	8004140 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg8, sizeof(msg8), 500);	//"AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80"
 8001c26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c2a:	222b      	movs	r2, #43	; 0x2b
 8001c2c:	4962      	ldr	r1, [pc, #392]	; (8001db8 <uploadDataToServer+0x56c>)
 8001c2e:	485e      	ldr	r0, [pc, #376]	; (8001da8 <uploadDataToServer+0x55c>)
 8001c30:	f002 f853 	bl	8003cda <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 10000) == HAL_BUSY){}
 8001c34:	bf00      	nop
 8001c36:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c3a:	22c8      	movs	r2, #200	; 0xc8
 8001c3c:	4958      	ldr	r1, [pc, #352]	; (8001da0 <uploadDataToServer+0x554>)
 8001c3e:	485a      	ldr	r0, [pc, #360]	; (8001da8 <uploadDataToServer+0x55c>)
 8001c40:	f002 f8dd 	bl	8003dfe <HAL_UART_Receive>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d0f5      	beq.n	8001c36 <uploadDataToServer+0x3ea>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001c4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c4e:	22c8      	movs	r2, #200	; 0xc8
 8001c50:	4953      	ldr	r1, [pc, #332]	; (8001da0 <uploadDataToServer+0x554>)
 8001c52:	4856      	ldr	r0, [pc, #344]	; (8001dac <uploadDataToServer+0x560>)
 8001c54:	f002 f841 	bl	8003cda <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_10; }
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f7ff fca9 	bl	80015b0 <checkAnswer>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <uploadDataToServer+0x420>
 8001c64:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <uploadDataToServer+0x564>)
 8001c66:	2209      	movs	r2, #9
 8001c68:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_9; loopCount--;}
				}break;
 8001c6a:	e08a      	b.n	8001d82 <uploadDataToServer+0x536>
					else{ errorCount++; state = STATE_9; loopCount--;}
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	4b4f      	ldr	r3, [pc, #316]	; (8001db0 <uploadDataToServer+0x564>)
 8001c74:	2208      	movs	r2, #8
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	7bbb      	ldrb	r3, [r7, #14]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	73bb      	strb	r3, [r7, #14]
				}break;
 8001c7e:	e080      	b.n	8001d82 <uploadDataToServer+0x536>

				case STATE_10:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001c80:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <uploadDataToServer+0x550>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	2100      	movs	r1, #0
 8001c88:	4845      	ldr	r0, [pc, #276]	; (8001da0 <uploadDataToServer+0x554>)
 8001c8a:	f002 fa59 	bl	8004140 <memset>

					if( topic == 1){ updatePluviometer(msg13,cont);}
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d107      	bne.n	8001ca4 <uploadDataToServer+0x458>
 8001c94:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <uploadDataToServer+0x570>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4848      	ldr	r0, [pc, #288]	; (8001dc0 <uploadDataToServer+0x574>)
 8001c9e:	f7ff fdb9 	bl	8001814 <updatePluviometer>
 8001ca2:	e006      	b.n	8001cb2 <uploadDataToServer+0x466>
					else{ updateTemperature(msg13, getTemp());}
 8001ca4:	f7ff fa72 	bl	800118c <getTemp>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4619      	mov	r1, r3
 8001cac:	4844      	ldr	r0, [pc, #272]	; (8001dc0 <uploadDataToServer+0x574>)
 8001cae:	f7ff fd95 	bl	80017dc <updateTemperature>

					HAL_UART_Transmit(&huart1, (uint8_t *)msg9, sizeof(msg9), 500);	// "AT+CIPSEND"
 8001cb2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	4942      	ldr	r1, [pc, #264]	; (8001dc4 <uploadDataToServer+0x578>)
 8001cba:	483b      	ldr	r0, [pc, #236]	; (8001da8 <uploadDataToServer+0x55c>)
 8001cbc:	f002 f80d 	bl	8003cda <HAL_UART_Transmit>
					HAL_Delay(1000);
 8001cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cc4:	f000 fc50 	bl	8002568 <HAL_Delay>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg13, sizeof(msg13), 500);	//"GET https://api.thingspeak.com/update?api_key=Z0OCNIE9923JVEEG&field1="
 8001cc8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ccc:	2250      	movs	r2, #80	; 0x50
 8001cce:	493c      	ldr	r1, [pc, #240]	; (8001dc0 <uploadDataToServer+0x574>)
 8001cd0:	4835      	ldr	r0, [pc, #212]	; (8001da8 <uploadDataToServer+0x55c>)
 8001cd2:	f002 f802 	bl	8003cda <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 500);		// "<SUB>"
 8001cd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001cda:	2203      	movs	r2, #3
 8001cdc:	493a      	ldr	r1, [pc, #232]	; (8001dc8 <uploadDataToServer+0x57c>)
 8001cde:	4832      	ldr	r0, [pc, #200]	; (8001da8 <uploadDataToServer+0x55c>)
 8001ce0:	f001 fffb 	bl	8003cda <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 10000) == HAL_BUSY){}
 8001ce4:	bf00      	nop
 8001ce6:	f242 7310 	movw	r3, #10000	; 0x2710
 8001cea:	22c8      	movs	r2, #200	; 0xc8
 8001cec:	492c      	ldr	r1, [pc, #176]	; (8001da0 <uploadDataToServer+0x554>)
 8001cee:	482e      	ldr	r0, [pc, #184]	; (8001da8 <uploadDataToServer+0x55c>)
 8001cf0:	f002 f885 	bl	8003dfe <HAL_UART_Receive>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d0f5      	beq.n	8001ce6 <uploadDataToServer+0x49a>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001cfa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001cfe:	22c8      	movs	r2, #200	; 0xc8
 8001d00:	4927      	ldr	r1, [pc, #156]	; (8001da0 <uploadDataToServer+0x554>)
 8001d02:	482a      	ldr	r0, [pc, #168]	; (8001dac <uploadDataToServer+0x560>)
 8001d04:	f001 ffe9 	bl	8003cda <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_11; }
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f7ff fc51 	bl	80015b0 <checkAnswer>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <uploadDataToServer+0x4d0>
 8001d14:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <uploadDataToServer+0x564>)
 8001d16:	220a      	movs	r2, #10
 8001d18:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_1; loopCount = 0;}
				}break;
 8001d1a:	e032      	b.n	8001d82 <uploadDataToServer+0x536>
					else{ errorCount++; state = STATE_1; loopCount = 0;}
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <uploadDataToServer+0x564>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73bb      	strb	r3, [r7, #14]
				}break;
 8001d2c:	e029      	b.n	8001d82 <uploadDataToServer+0x536>

				case STATE_11:{
					HAL_UART_Transmit(&huart1, (uint8_t *)msg11, sizeof(msg11), 500);		//"AT+CIPSHUT"
 8001d2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d32:	220d      	movs	r2, #13
 8001d34:	4925      	ldr	r1, [pc, #148]	; (8001dcc <uploadDataToServer+0x580>)
 8001d36:	481c      	ldr	r0, [pc, #112]	; (8001da8 <uploadDataToServer+0x55c>)
 8001d38:	f001 ffcf 	bl	8003cda <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001d3c:	bf00      	nop
 8001d3e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d42:	22c8      	movs	r2, #200	; 0xc8
 8001d44:	4916      	ldr	r1, [pc, #88]	; (8001da0 <uploadDataToServer+0x554>)
 8001d46:	4818      	ldr	r0, [pc, #96]	; (8001da8 <uploadDataToServer+0x55c>)
 8001d48:	f002 f859 	bl	8003dfe <HAL_UART_Receive>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d0f5      	beq.n	8001d3e <uploadDataToServer+0x4f2>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001d52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d56:	22c8      	movs	r2, #200	; 0xc8
 8001d58:	4911      	ldr	r1, [pc, #68]	; (8001da0 <uploadDataToServer+0x554>)
 8001d5a:	4814      	ldr	r0, [pc, #80]	; (8001dac <uploadDataToServer+0x560>)
 8001d5c:	f001 ffbd 	bl	8003cda <HAL_UART_Transmit>
					state = STATE_1;
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <uploadDataToServer+0x564>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
				}break;
 8001d66:	e00c      	b.n	8001d82 <uploadDataToServer+0x536>

				default:{
					state = STATE_1;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <uploadDataToServer+0x564>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
					loopCount = 11;
 8001d6e:	230b      	movs	r3, #11
 8001d70:	73bb      	strb	r3, [r7, #14]
				}break;
 8001d72:	bf00      	nop
 8001d74:	e005      	b.n	8001d82 <uploadDataToServer+0x536>
			}
		}
	else{
		errorCount = 1;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
		loopCount = 11;
 8001d7a:	230b      	movs	r3, #11
 8001d7c:	73bb      	strb	r3, [r7, #14]
		return 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e007      	b.n	8001d92 <uploadDataToServer+0x546>
	for (uint8_t loopCount = 0; loopCount <= 10; loopCount++ ){
 8001d82:	7bbb      	ldrb	r3, [r7, #14]
 8001d84:	3301      	adds	r3, #1
 8001d86:	73bb      	strb	r3, [r7, #14]
 8001d88:	7bbb      	ldrb	r3, [r7, #14]
 8001d8a:	2b0a      	cmp	r3, #10
 8001d8c:	f67f ad6b 	bls.w	8001866 <uploadDataToServer+0x1a>
	}
	}
	return 1;
 8001d90:	2301      	movs	r3, #1
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000001 	.word	0x20000001
 8001da0:	2000038c 	.word	0x2000038c
 8001da4:	2000006c 	.word	0x2000006c
 8001da8:	2000052c 	.word	0x2000052c
 8001dac:	2000056c 	.word	0x2000056c
 8001db0:	20000388 	.word	0x20000388
 8001db4:	20000074 	.word	0x20000074
 8001db8:	20000080 	.word	0x20000080
 8001dbc:	2000031c 	.word	0x2000031c
 8001dc0:	20000338 	.word	0x20000338
 8001dc4:	200000ac 	.word	0x200000ac
 8001dc8:	20000004 	.word	0x20000004
 8001dcc:	200000f8 	.word	0x200000f8

08001dd0 <getRainfall>:
extern char msg13[80];

/********* Funciones **********/

// Función que realiza un antirebote por Soft e incrementa el contador del balancín.
void getRainfall(void){
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

//	if( HAL_GetTick() - startTime > timeThreshold){
		cont += 1;
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <getRainfall+0x18>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	4a03      	ldr	r2, [pc, #12]	; (8001de8 <getRainfall+0x18>)
 8001ddc:	6013      	str	r3, [r2, #0]
//		startTime = HAL_GetTick();
//	}
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	2000031c 	.word	0x2000031c

08001dec <sendIncrement>:

void sendIncrement(void){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0

	if (init == 1){
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <sendIncrement+0x84>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00a      	beq.n	8001e0e <sendIncrement+0x22>
		init = 0;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <sendIncrement+0x84>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
		initModule();
 8001dfe:	f7ff fc3b 	bl	8001678 <initModule>

//		updatePluviometer(msg13,cont);
		if( uploadDataToServer(1) == 0){ /*Error_Handler();*/}
 8001e02:	2001      	movs	r0, #1
 8001e04:	f7ff fd22 	bl	800184c <uploadDataToServer>
		cont = 0;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <sendIncrement+0x88>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
	}

	if(incrCont == 5){
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <sendIncrement+0x8c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d125      	bne.n	8001e62 <sendIncrement+0x76>
		incrCont = 0;
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <sendIncrement+0x8c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

		if(cont != 0){
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <sendIncrement+0x88>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d006      	beq.n	8001e32 <sendIncrement+0x46>
//			updatePluviometer(msg13,cont);
			if( uploadDataToServer(1) == 0){ /*Error_Handler();*/}
 8001e24:	2001      	movs	r0, #1
 8001e26:	f7ff fd11 	bl	800184c <uploadDataToServer>
			cont = 0;
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <sendIncrement+0x88>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
		}
	}
	else{
		incrCont +=1;
	}
}
 8001e30:	e01c      	b.n	8001e6c <sendIncrement+0x80>
			firstInit = 1;
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <sendIncrement+0x90>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
			init = 1;
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <sendIncrement+0x84>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim4);
 8001e3e:	4810      	ldr	r0, [pc, #64]	; (8001e80 <sendIncrement+0x94>)
 8001e40:	f001 fb84 	bl	800354c <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <sendIncrement+0x98>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0201 	mvn.w	r2, #1
 8001e4c:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <sendIncrement+0x98>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim2);
 8001e56:	480b      	ldr	r0, [pc, #44]	; (8001e84 <sendIncrement+0x98>)
 8001e58:	f001 fb26 	bl	80034a8 <HAL_TIM_Base_Start_IT>
			resetModule();
 8001e5c:	f7ff fca8 	bl	80017b0 <resetModule>
}
 8001e60:	e004      	b.n	8001e6c <sendIncrement+0x80>
		incrCont +=1;
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <sendIncrement+0x8c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3301      	adds	r3, #1
 8001e68:	4a03      	ldr	r2, [pc, #12]	; (8001e78 <sendIncrement+0x8c>)
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000011e 	.word	0x2000011e
 8001e74:	2000031c 	.word	0x2000031c
 8001e78:	20000320 	.word	0x20000320
 8001e7c:	2000011d 	.word	0x2000011d
 8001e80:	20000454 	.word	0x20000454
 8001e84:	200004e4 	.word	0x200004e4

08001e88 <startRain>:

void startRain(void){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0

	getRainfall();
 8001e8c:	f7ff ffa0 	bl	8001dd0 <getRainfall>

	if(firstInit == 1){
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <startRain+0x28>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <startRain+0x22>

		firstInit = 0;
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <startRain+0x28>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001e9e:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <startRain+0x2c>)
 8001ea0:	f001 fb54 	bl	800354c <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim4);
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <startRain+0x30>)
 8001ea6:	f001 faff 	bl	80034a8 <HAL_TIM_Base_Start_IT>
//		sendIncrement();
	}
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000011d 	.word	0x2000011d
 8001eb4:	200004e4 	.word	0x200004e4
 8001eb8:	20000454 	.word	0x20000454

08001ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec2:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <HAL_MspInit+0x60>)
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <HAL_MspInit+0x60>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6193      	str	r3, [r2, #24]
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <HAL_MspInit+0x60>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_MspInit+0x60>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <HAL_MspInit+0x60>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	61d3      	str	r3, [r2, #28]
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_MspInit+0x60>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001ef2:	2004      	movs	r0, #4
 8001ef4:	f000 fc26 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_MspInit+0x64>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_MspInit+0x64>)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010000 	.word	0x40010000

08001f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <HardFault_Handler+0x4>

08001f36 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <MemManage_Handler+0x4>

08001f3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <BusFault_Handler+0x4>

08001f42 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <UsageFault_Handler+0x4>

08001f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f70:	f000 fade 	bl	8002530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f000 fdc5 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <TIM2_IRQHandler+0x10>)
 8001f8e:	f001 fb0b 	bl	80035a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200004e4 	.word	0x200004e4

08001f9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <TIM4_IRQHandler+0x10>)
 8001fa2:	f001 fb01 	bl	80035a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000454 	.word	0x20000454

08001fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb8:	4a14      	ldr	r2, [pc, #80]	; (800200c <_sbrk+0x5c>)
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <_sbrk+0x60>)
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <_sbrk+0x64>)
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <_sbrk+0x68>)
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d207      	bcs.n	8001ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe0:	f002 f884 	bl	80040ec <__errno>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	230c      	movs	r3, #12
 8001fe8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	e009      	b.n	8002004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <_sbrk+0x64>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a05      	ldr	r2, [pc, #20]	; (8002014 <_sbrk+0x64>)
 8002000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20005000 	.word	0x20005000
 8002010:	00000400 	.word	0x00000400
 8002014:	20000324 	.word	0x20000324
 8002018:	200005b8 	.word	0x200005b8

0800201c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203c:	463b      	mov	r3, r7
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <MX_TIM1_Init+0x98>)
 8002046:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <MX_TIM1_Init+0x9c>)
 8002048:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <MX_TIM1_Init+0x98>)
 800204c:	2247      	movs	r2, #71	; 0x47
 800204e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <MX_TIM1_Init+0x98>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <MX_TIM1_Init+0x98>)
 8002058:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800205c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_TIM1_Init+0x98>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <MX_TIM1_Init+0x98>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <MX_TIM1_Init+0x98>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002070:	4813      	ldr	r0, [pc, #76]	; (80020c0 <MX_TIM1_Init+0x98>)
 8002072:	f001 f97f 	bl	8003374 <HAL_TIM_Base_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800207c:	f7ff fa8a 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002084:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002086:	f107 0308 	add.w	r3, r7, #8
 800208a:	4619      	mov	r1, r3
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <MX_TIM1_Init+0x98>)
 800208e:	f001 fb93 	bl	80037b8 <HAL_TIM_ConfigClockSource>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002098:	f7ff fa7c 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020a4:	463b      	mov	r3, r7
 80020a6:	4619      	mov	r1, r3
 80020a8:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_TIM1_Init+0x98>)
 80020aa:	f001 fd59 	bl	8003b60 <HAL_TIMEx_MasterConfigSynchronization>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80020b4:	f7ff fa6e 	bl	8001594 <Error_Handler>
  }

}
 80020b8:	bf00      	nop
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000049c 	.word	0x2000049c
 80020c4:	40012c00 	.word	0x40012c00

080020c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ce:	f107 0308 	add.w	r3, r7, #8
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020dc:	463b      	mov	r3, r7
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80020e4:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <MX_TIM2_Init+0x98>)
 80020e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59999;
 80020ec:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <MX_TIM2_Init+0x98>)
 80020ee:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80020f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <MX_TIM2_Init+0x98>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 54000-1;
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <MX_TIM2_Init+0x98>)
 80020fc:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 8002100:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002102:	4b17      	ldr	r3, [pc, #92]	; (8002160 <MX_TIM2_Init+0x98>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002108:	4b15      	ldr	r3, [pc, #84]	; (8002160 <MX_TIM2_Init+0x98>)
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800210e:	4814      	ldr	r0, [pc, #80]	; (8002160 <MX_TIM2_Init+0x98>)
 8002110:	f001 f930 	bl	8003374 <HAL_TIM_Base_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800211a:	f7ff fa3b 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800211e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002122:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002124:	f107 0308 	add.w	r3, r7, #8
 8002128:	4619      	mov	r1, r3
 800212a:	480d      	ldr	r0, [pc, #52]	; (8002160 <MX_TIM2_Init+0x98>)
 800212c:	f001 fb44 	bl	80037b8 <HAL_TIM_ConfigClockSource>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002136:	f7ff fa2d 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002142:	463b      	mov	r3, r7
 8002144:	4619      	mov	r1, r3
 8002146:	4806      	ldr	r0, [pc, #24]	; (8002160 <MX_TIM2_Init+0x98>)
 8002148:	f001 fd0a 	bl	8003b60 <HAL_TIMEx_MasterConfigSynchronization>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002152:	f7ff fa1f 	bl	8001594 <Error_Handler>
  }

}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200004e4 	.word	0x200004e4

08002164 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	463b      	mov	r3, r7
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <MX_TIM4_Init+0x94>)
 8002182:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <MX_TIM4_Init+0x98>)
 8002184:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 59999;
 8002186:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <MX_TIM4_Init+0x94>)
 8002188:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800218c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218e:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <MX_TIM4_Init+0x94>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 18000-1;
 8002194:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <MX_TIM4_Init+0x94>)
 8002196:	f244 624f 	movw	r2, #17999	; 0x464f
 800219a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219c:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <MX_TIM4_Init+0x94>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <MX_TIM4_Init+0x94>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021a8:	4813      	ldr	r0, [pc, #76]	; (80021f8 <MX_TIM4_Init+0x94>)
 80021aa:	f001 f8e3 	bl	8003374 <HAL_TIM_Base_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80021b4:	f7ff f9ee 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021be:	f107 0308 	add.w	r3, r7, #8
 80021c2:	4619      	mov	r1, r3
 80021c4:	480c      	ldr	r0, [pc, #48]	; (80021f8 <MX_TIM4_Init+0x94>)
 80021c6:	f001 faf7 	bl	80037b8 <HAL_TIM_ConfigClockSource>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80021d0:	f7ff f9e0 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021d4:	2320      	movs	r3, #32
 80021d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021dc:	463b      	mov	r3, r7
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_TIM4_Init+0x94>)
 80021e2:	f001 fcbd 	bl	8003b60 <HAL_TIMEx_MasterConfigSynchronization>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80021ec:	f7ff f9d2 	bl	8001594 <Error_Handler>
  }

}
 80021f0:	bf00      	nop
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000454 	.word	0x20000454
 80021fc:	40000800 	.word	0x40000800

08002200 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a23      	ldr	r2, [pc, #140]	; (800229c <HAL_TIM_Base_MspInit+0x9c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d10c      	bne.n	800222c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002218:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800221c:	6193      	str	r3, [r2, #24]
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800222a:	e032      	b.n	8002292 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d114      	bne.n	8002260 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <HAL_TIM_Base_MspInit+0xa0>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	61d3      	str	r3, [r2, #28]
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2107      	movs	r1, #7
 8002252:	201c      	movs	r0, #28
 8002254:	f000 fa81 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002258:	201c      	movs	r0, #28
 800225a:	f000 fa9a 	bl	8002792 <HAL_NVIC_EnableIRQ>
}
 800225e:	e018      	b.n	8002292 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <HAL_TIM_Base_MspInit+0xa4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d113      	bne.n	8002292 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_TIM_Base_MspInit+0xa0>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	61d3      	str	r3, [r2, #28]
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 7, 1);
 8002282:	2201      	movs	r2, #1
 8002284:	2107      	movs	r1, #7
 8002286:	201e      	movs	r0, #30
 8002288:	f000 fa67 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800228c:	201e      	movs	r0, #30
 800228e:	f000 fa80 	bl	8002792 <HAL_NVIC_EnableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40012c00 	.word	0x40012c00
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40000800 	.word	0x40000800

080022a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <MX_USART1_UART_Init+0x50>)
 80022b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022ce:	220c      	movs	r2, #12
 80022d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022e0:	f001 fcae 	bl	8003c40 <HAL_UART_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022ea:	f7ff f953 	bl	8001594 <Error_Handler>
  }

}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000052c 	.word	0x2000052c
 80022f8:	40013800 	.word	0x40013800

080022fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 8002302:	4a12      	ldr	r2, [pc, #72]	; (800234c <MX_USART2_UART_Init+0x50>)
 8002304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 8002308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800230c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 8002322:	220c      	movs	r2, #12
 8002324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002332:	4805      	ldr	r0, [pc, #20]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 8002334:	f001 fc84 	bl	8003c40 <HAL_UART_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800233e:	f7ff f929 	bl	8001594 <Error_Handler>
  }

}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2000056c 	.word	0x2000056c
 800234c:	40004400 	.word	0x40004400

08002350 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0318 	add.w	r3, r7, #24
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a37      	ldr	r2, [pc, #220]	; (8002448 <HAL_UART_MspInit+0xf8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d132      	bne.n	80023d6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002370:	4b36      	ldr	r3, [pc, #216]	; (800244c <HAL_UART_MspInit+0xfc>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a35      	ldr	r2, [pc, #212]	; (800244c <HAL_UART_MspInit+0xfc>)
 8002376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b33      	ldr	r3, [pc, #204]	; (800244c <HAL_UART_MspInit+0xfc>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	4b30      	ldr	r3, [pc, #192]	; (800244c <HAL_UART_MspInit+0xfc>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	4a2f      	ldr	r2, [pc, #188]	; (800244c <HAL_UART_MspInit+0xfc>)
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	6193      	str	r3, [r2, #24]
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_UART_MspInit+0xfc>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ae:	f107 0318 	add.w	r3, r7, #24
 80023b2:	4619      	mov	r1, r3
 80023b4:	4826      	ldr	r0, [pc, #152]	; (8002450 <HAL_UART_MspInit+0x100>)
 80023b6:	f000 fa07 	bl	80027c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c8:	f107 0318 	add.w	r3, r7, #24
 80023cc:	4619      	mov	r1, r3
 80023ce:	4820      	ldr	r0, [pc, #128]	; (8002450 <HAL_UART_MspInit+0x100>)
 80023d0:	f000 f9fa 	bl	80027c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023d4:	e034      	b.n	8002440 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1e      	ldr	r2, [pc, #120]	; (8002454 <HAL_UART_MspInit+0x104>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d12f      	bne.n	8002440 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <HAL_UART_MspInit+0xfc>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	4a19      	ldr	r2, [pc, #100]	; (800244c <HAL_UART_MspInit+0xfc>)
 80023e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ea:	61d3      	str	r3, [r2, #28]
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_UART_MspInit+0xfc>)
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_UART_MspInit+0xfc>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	4a13      	ldr	r2, [pc, #76]	; (800244c <HAL_UART_MspInit+0xfc>)
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	6193      	str	r3, [r2, #24]
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_UART_MspInit+0xfc>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002410:	2304      	movs	r3, #4
 8002412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002418:	2303      	movs	r3, #3
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	f107 0318 	add.w	r3, r7, #24
 8002420:	4619      	mov	r1, r3
 8002422:	480b      	ldr	r0, [pc, #44]	; (8002450 <HAL_UART_MspInit+0x100>)
 8002424:	f000 f9d0 	bl	80027c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002428:	2308      	movs	r3, #8
 800242a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	f107 0318 	add.w	r3, r7, #24
 8002438:	4619      	mov	r1, r3
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <HAL_UART_MspInit+0x100>)
 800243c:	f000 f9c4 	bl	80027c8 <HAL_GPIO_Init>
}
 8002440:	bf00      	nop
 8002442:	3728      	adds	r7, #40	; 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40013800 	.word	0x40013800
 800244c:	40021000 	.word	0x40021000
 8002450:	40010800 	.word	0x40010800
 8002454:	40004400 	.word	0x40004400

08002458 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002458:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800245a:	e003      	b.n	8002464 <LoopCopyDataInit>

0800245c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800245e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002460:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002462:	3104      	adds	r1, #4

08002464 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002464:	480a      	ldr	r0, [pc, #40]	; (8002490 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002468:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800246a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800246c:	d3f6      	bcc.n	800245c <CopyDataInit>
  ldr r2, =_sbss
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002470:	e002      	b.n	8002478 <LoopFillZerobss>

08002472 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002474:	f842 3b04 	str.w	r3, [r2], #4

08002478 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800247a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800247c:	d3f9      	bcc.n	8002472 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800247e:	f7ff fdcd 	bl	800201c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002482:	f001 fe39 	bl	80040f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002486:	f7fe ffe9 	bl	800145c <main>
  bx lr
 800248a:	4770      	bx	lr
  ldr r3, =_sidata
 800248c:	08006498 	.word	0x08006498
  ldr r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002494:	200002fc 	.word	0x200002fc
  ldr r2, =_sbss
 8002498:	200002fc 	.word	0x200002fc
  ldr r3, = _ebss
 800249c:	200005b4 	.word	0x200005b4

080024a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC1_2_IRQHandler>
	...

080024a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_Init+0x28>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a07      	ldr	r2, [pc, #28]	; (80024cc <HAL_Init+0x28>)
 80024ae:	f043 0310 	orr.w	r3, r3, #16
 80024b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b4:	2003      	movs	r0, #3
 80024b6:	f000 f945 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f000 f808 	bl	80024d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c0:	f7ff fcfc 	bl	8001ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40022000 	.word	0x40022000

080024d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_InitTick+0x54>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_InitTick+0x58>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f95d 	bl	80027ae <HAL_SYSTICK_Config>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00e      	b.n	800251c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b0f      	cmp	r3, #15
 8002502:	d80a      	bhi.n	800251a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002504:	2200      	movs	r2, #0
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f000 f925 	bl	800275a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002510:	4a06      	ldr	r2, [pc, #24]	; (800252c <HAL_InitTick+0x5c>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000120 	.word	0x20000120
 8002528:	20000128 	.word	0x20000128
 800252c:	20000124 	.word	0x20000124

08002530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_IncTick+0x1c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_IncTick+0x20>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4413      	add	r3, r2
 8002540:	4a03      	ldr	r2, [pc, #12]	; (8002550 <HAL_IncTick+0x20>)
 8002542:	6013      	str	r3, [r2, #0]
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	20000128 	.word	0x20000128
 8002550:	200005ac 	.word	0x200005ac

08002554 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return uwTick;
 8002558:	4b02      	ldr	r3, [pc, #8]	; (8002564 <HAL_GetTick+0x10>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	200005ac 	.word	0x200005ac

08002568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002570:	f7ff fff0 	bl	8002554 <HAL_GetTick>
 8002574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d005      	beq.n	800258e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_Delay+0x40>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800258e:	bf00      	nop
 8002590:	f7ff ffe0 	bl	8002554 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	429a      	cmp	r2, r3
 800259e:	d8f7      	bhi.n	8002590 <HAL_Delay+0x28>
  {
  }
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000128 	.word	0x20000128

080025ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	db0b      	blt.n	800263a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4906      	ldr	r1, [pc, #24]	; (8002644 <__NVIC_EnableIRQ+0x34>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2001      	movs	r0, #1
 8002632:	fa00 f202 	lsl.w	r2, r0, r2
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	e000e100 	.word	0xe000e100

08002648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	2b00      	cmp	r3, #0
 800265a:	db0a      	blt.n	8002672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	490c      	ldr	r1, [pc, #48]	; (8002694 <__NVIC_SetPriority+0x4c>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	440b      	add	r3, r1
 800266c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002670:	e00a      	b.n	8002688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4908      	ldr	r1, [pc, #32]	; (8002698 <__NVIC_SetPriority+0x50>)
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	3b04      	subs	r3, #4
 8002680:	0112      	lsls	r2, r2, #4
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	440b      	add	r3, r1
 8002686:	761a      	strb	r2, [r3, #24]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000e100 	.word	0xe000e100
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f1c3 0307 	rsb	r3, r3, #7
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	bf28      	it	cs
 80026ba:	2304      	movcs	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d902      	bls.n	80026cc <NVIC_EncodePriority+0x30>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3b03      	subs	r3, #3
 80026ca:	e000      	b.n	80026ce <NVIC_EncodePriority+0x32>
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	f04f 32ff 	mov.w	r2, #4294967295
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	401a      	ands	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e4:	f04f 31ff 	mov.w	r1, #4294967295
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	43d9      	mvns	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	4313      	orrs	r3, r2
         );
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002710:	d301      	bcc.n	8002716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002712:	2301      	movs	r3, #1
 8002714:	e00f      	b.n	8002736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <SysTick_Config+0x40>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271e:	210f      	movs	r1, #15
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f7ff ff90 	bl	8002648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <SysTick_Config+0x40>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272e:	4b04      	ldr	r3, [pc, #16]	; (8002740 <SysTick_Config+0x40>)
 8002730:	2207      	movs	r2, #7
 8002732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	e000e010 	.word	0xe000e010

08002744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff2d 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800276c:	f7ff ff42 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 8002770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	6978      	ldr	r0, [r7, #20]
 8002778:	f7ff ff90 	bl	800269c <NVIC_EncodePriority>
 800277c:	4602      	mov	r2, r0
 800277e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff5f 	bl	8002648 <__NVIC_SetPriority>
}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff35 	bl	8002610 <__NVIC_EnableIRQ>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ffa2 	bl	8002700 <SysTick_Config>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b08b      	sub	sp, #44	; 0x2c
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027d6:	2300      	movs	r3, #0
 80027d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027da:	e127      	b.n	8002a2c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027dc:	2201      	movs	r2, #1
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	f040 8116 	bne.w	8002a26 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b12      	cmp	r3, #18
 8002800:	d034      	beq.n	800286c <HAL_GPIO_Init+0xa4>
 8002802:	2b12      	cmp	r3, #18
 8002804:	d80d      	bhi.n	8002822 <HAL_GPIO_Init+0x5a>
 8002806:	2b02      	cmp	r3, #2
 8002808:	d02b      	beq.n	8002862 <HAL_GPIO_Init+0x9a>
 800280a:	2b02      	cmp	r3, #2
 800280c:	d804      	bhi.n	8002818 <HAL_GPIO_Init+0x50>
 800280e:	2b00      	cmp	r3, #0
 8002810:	d031      	beq.n	8002876 <HAL_GPIO_Init+0xae>
 8002812:	2b01      	cmp	r3, #1
 8002814:	d01c      	beq.n	8002850 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002816:	e048      	b.n	80028aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002818:	2b03      	cmp	r3, #3
 800281a:	d043      	beq.n	80028a4 <HAL_GPIO_Init+0xdc>
 800281c:	2b11      	cmp	r3, #17
 800281e:	d01b      	beq.n	8002858 <HAL_GPIO_Init+0x90>
          break;
 8002820:	e043      	b.n	80028aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002822:	4a89      	ldr	r2, [pc, #548]	; (8002a48 <HAL_GPIO_Init+0x280>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d026      	beq.n	8002876 <HAL_GPIO_Init+0xae>
 8002828:	4a87      	ldr	r2, [pc, #540]	; (8002a48 <HAL_GPIO_Init+0x280>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d806      	bhi.n	800283c <HAL_GPIO_Init+0x74>
 800282e:	4a87      	ldr	r2, [pc, #540]	; (8002a4c <HAL_GPIO_Init+0x284>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d020      	beq.n	8002876 <HAL_GPIO_Init+0xae>
 8002834:	4a86      	ldr	r2, [pc, #536]	; (8002a50 <HAL_GPIO_Init+0x288>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d01d      	beq.n	8002876 <HAL_GPIO_Init+0xae>
          break;
 800283a:	e036      	b.n	80028aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800283c:	4a85      	ldr	r2, [pc, #532]	; (8002a54 <HAL_GPIO_Init+0x28c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d019      	beq.n	8002876 <HAL_GPIO_Init+0xae>
 8002842:	4a85      	ldr	r2, [pc, #532]	; (8002a58 <HAL_GPIO_Init+0x290>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d016      	beq.n	8002876 <HAL_GPIO_Init+0xae>
 8002848:	4a84      	ldr	r2, [pc, #528]	; (8002a5c <HAL_GPIO_Init+0x294>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0xae>
          break;
 800284e:	e02c      	b.n	80028aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	623b      	str	r3, [r7, #32]
          break;
 8002856:	e028      	b.n	80028aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	3304      	adds	r3, #4
 800285e:	623b      	str	r3, [r7, #32]
          break;
 8002860:	e023      	b.n	80028aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	3308      	adds	r3, #8
 8002868:	623b      	str	r3, [r7, #32]
          break;
 800286a:	e01e      	b.n	80028aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	330c      	adds	r3, #12
 8002872:	623b      	str	r3, [r7, #32]
          break;
 8002874:	e019      	b.n	80028aa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d102      	bne.n	8002884 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800287e:	2304      	movs	r3, #4
 8002880:	623b      	str	r3, [r7, #32]
          break;
 8002882:	e012      	b.n	80028aa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800288c:	2308      	movs	r3, #8
 800288e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	611a      	str	r2, [r3, #16]
          break;
 8002896:	e008      	b.n	80028aa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002898:	2308      	movs	r3, #8
 800289a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	615a      	str	r2, [r3, #20]
          break;
 80028a2:	e002      	b.n	80028aa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028a4:	2300      	movs	r3, #0
 80028a6:	623b      	str	r3, [r7, #32]
          break;
 80028a8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	2bff      	cmp	r3, #255	; 0xff
 80028ae:	d801      	bhi.n	80028b4 <HAL_GPIO_Init+0xec>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	e001      	b.n	80028b8 <HAL_GPIO_Init+0xf0>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	2bff      	cmp	r3, #255	; 0xff
 80028be:	d802      	bhi.n	80028c6 <HAL_GPIO_Init+0xfe>
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	e002      	b.n	80028cc <HAL_GPIO_Init+0x104>
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	3b08      	subs	r3, #8
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	210f      	movs	r1, #15
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	401a      	ands	r2, r3
 80028de:	6a39      	ldr	r1, [r7, #32]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	431a      	orrs	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 8096 	beq.w	8002a26 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028fa:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <HAL_GPIO_Init+0x298>)
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	4a58      	ldr	r2, [pc, #352]	; (8002a60 <HAL_GPIO_Init+0x298>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6193      	str	r3, [r2, #24]
 8002906:	4b56      	ldr	r3, [pc, #344]	; (8002a60 <HAL_GPIO_Init+0x298>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002912:	4a54      	ldr	r2, [pc, #336]	; (8002a64 <HAL_GPIO_Init+0x29c>)
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	3302      	adds	r3, #2
 800291a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	220f      	movs	r2, #15
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4013      	ands	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4b      	ldr	r2, [pc, #300]	; (8002a68 <HAL_GPIO_Init+0x2a0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0x19e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4a      	ldr	r2, [pc, #296]	; (8002a6c <HAL_GPIO_Init+0x2a4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00d      	beq.n	8002962 <HAL_GPIO_Init+0x19a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a49      	ldr	r2, [pc, #292]	; (8002a70 <HAL_GPIO_Init+0x2a8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_GPIO_Init+0x196>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a48      	ldr	r2, [pc, #288]	; (8002a74 <HAL_GPIO_Init+0x2ac>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_GPIO_Init+0x192>
 8002956:	2303      	movs	r3, #3
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x1a0>
 800295a:	2304      	movs	r3, #4
 800295c:	e004      	b.n	8002968 <HAL_GPIO_Init+0x1a0>
 800295e:	2302      	movs	r3, #2
 8002960:	e002      	b.n	8002968 <HAL_GPIO_Init+0x1a0>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_GPIO_Init+0x1a0>
 8002966:	2300      	movs	r3, #0
 8002968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296a:	f002 0203 	and.w	r2, r2, #3
 800296e:	0092      	lsls	r2, r2, #2
 8002970:	4093      	lsls	r3, r2
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002978:	493a      	ldr	r1, [pc, #232]	; (8002a64 <HAL_GPIO_Init+0x29c>)
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002992:	4b39      	ldr	r3, [pc, #228]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4938      	ldr	r1, [pc, #224]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]
 800299e:	e006      	b.n	80029ae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029a0:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	4933      	ldr	r1, [pc, #204]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d006      	beq.n	80029c8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029ba:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	492e      	ldr	r1, [pc, #184]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
 80029c6:	e006      	b.n	80029d6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029c8:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	4929      	ldr	r1, [pc, #164]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d006      	beq.n	80029f0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029e2:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	4924      	ldr	r1, [pc, #144]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
 80029ee:	e006      	b.n	80029fe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029f0:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	491f      	ldr	r1, [pc, #124]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d006      	beq.n	8002a18 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a0a:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	491a      	ldr	r1, [pc, #104]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60cb      	str	r3, [r1, #12]
 8002a16:	e006      	b.n	8002a26 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a18:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	4915      	ldr	r1, [pc, #84]	; (8002a78 <HAL_GPIO_Init+0x2b0>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	3301      	adds	r3, #1
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	fa22 f303 	lsr.w	r3, r2, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f47f aed0 	bne.w	80027dc <HAL_GPIO_Init+0x14>
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	372c      	adds	r7, #44	; 0x2c
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	10210000 	.word	0x10210000
 8002a4c:	10110000 	.word	0x10110000
 8002a50:	10120000 	.word	0x10120000
 8002a54:	10310000 	.word	0x10310000
 8002a58:	10320000 	.word	0x10320000
 8002a5c:	10220000 	.word	0x10220000
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40010800 	.word	0x40010800
 8002a6c:	40010c00 	.word	0x40010c00
 8002a70:	40011000 	.word	0x40011000
 8002a74:	40011400 	.word	0x40011400
 8002a78:	40010400 	.word	0x40010400

08002a7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	887b      	ldrh	r3, [r7, #2]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	e001      	b.n	8002a9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	807b      	strh	r3, [r7, #2]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aba:	787b      	ldrb	r3, [r7, #1]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac0:	887a      	ldrh	r2, [r7, #2]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ac6:	e003      	b.n	8002ad0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	041a      	lsls	r2, r3, #16
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	611a      	str	r2, [r3, #16]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aec:	887a      	ldrh	r2, [r7, #2]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4013      	ands	r3, r2
 8002af2:	041a      	lsls	r2, r3, #16
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	43d9      	mvns	r1, r3
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	400b      	ands	r3, r1
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	611a      	str	r2, [r3, #16]
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b22:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fd07 	bl	800153e <HAL_GPIO_EXTI_Callback>
  }
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40010400 	.word	0x40010400

08002b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e26c      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8087 	beq.w	8002c6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b5c:	4b92      	ldr	r3, [pc, #584]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d00c      	beq.n	8002b82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b68:	4b8f      	ldr	r3, [pc, #572]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d112      	bne.n	8002b9a <HAL_RCC_OscConfig+0x5e>
 8002b74:	4b8c      	ldr	r3, [pc, #560]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b80:	d10b      	bne.n	8002b9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b82:	4b89      	ldr	r3, [pc, #548]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d06c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x12c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d168      	bne.n	8002c68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e246      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x76>
 8002ba4:	4b80      	ldr	r3, [pc, #512]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a7f      	ldr	r2, [pc, #508]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	e02e      	b.n	8002c10 <HAL_RCC_OscConfig+0xd4>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x98>
 8002bba:	4b7b      	ldr	r3, [pc, #492]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7a      	ldr	r2, [pc, #488]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b78      	ldr	r3, [pc, #480]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a77      	ldr	r2, [pc, #476]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e01d      	b.n	8002c10 <HAL_RCC_OscConfig+0xd4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0xbc>
 8002bde:	4b72      	ldr	r3, [pc, #456]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a71      	ldr	r2, [pc, #452]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4b6f      	ldr	r3, [pc, #444]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a6e      	ldr	r2, [pc, #440]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCC_OscConfig+0xd4>
 8002bf8:	4b6b      	ldr	r3, [pc, #428]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a6a      	ldr	r2, [pc, #424]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b68      	ldr	r3, [pc, #416]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a67      	ldr	r2, [pc, #412]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d013      	beq.n	8002c40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7ff fc9c 	bl	8002554 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c20:	f7ff fc98 	bl	8002554 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e1fa      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	4b5d      	ldr	r3, [pc, #372]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0xe4>
 8002c3e:	e014      	b.n	8002c6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7ff fc88 	bl	8002554 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c48:	f7ff fc84 	bl	8002554 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e1e6      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5a:	4b53      	ldr	r3, [pc, #332]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x10c>
 8002c66:	e000      	b.n	8002c6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d063      	beq.n	8002d3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c76:	4b4c      	ldr	r3, [pc, #304]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c82:	4b49      	ldr	r3, [pc, #292]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d11c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x18c>
 8002c8e:	4b46      	ldr	r3, [pc, #280]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d116      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9a:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x176>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e1ba      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4939      	ldr	r1, [pc, #228]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc6:	e03a      	b.n	8002d3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd0:	4b36      	ldr	r3, [pc, #216]	; (8002dac <HAL_RCC_OscConfig+0x270>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7ff fc3d 	bl	8002554 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cde:	f7ff fc39 	bl	8002554 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e19b      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf0:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfc:	4b2a      	ldr	r3, [pc, #168]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4927      	ldr	r1, [pc, #156]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
 8002d10:	e015      	b.n	8002d3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d12:	4b26      	ldr	r3, [pc, #152]	; (8002dac <HAL_RCC_OscConfig+0x270>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7ff fc1c 	bl	8002554 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d20:	f7ff fc18 	bl	8002554 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e17a      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d32:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d03a      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d019      	beq.n	8002d86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d52:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d58:	f7ff fbfc 	bl	8002554 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d60:	f7ff fbf8 	bl	8002554 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e15a      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f000 fada 	bl	8003338 <RCC_Delay>
 8002d84:	e01c      	b.n	8002dc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8c:	f7ff fbe2 	bl	8002554 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d92:	e00f      	b.n	8002db4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d94:	f7ff fbde 	bl	8002554 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d908      	bls.n	8002db4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e140      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	42420000 	.word	0x42420000
 8002db0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	4b9e      	ldr	r3, [pc, #632]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1e9      	bne.n	8002d94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80a6 	beq.w	8002f1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd2:	4b97      	ldr	r3, [pc, #604]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10d      	bne.n	8002dfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	4b94      	ldr	r3, [pc, #592]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	4a93      	ldr	r2, [pc, #588]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de8:	61d3      	str	r3, [r2, #28]
 8002dea:	4b91      	ldr	r3, [pc, #580]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfa:	4b8e      	ldr	r3, [pc, #568]	; (8003034 <HAL_RCC_OscConfig+0x4f8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d118      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e06:	4b8b      	ldr	r3, [pc, #556]	; (8003034 <HAL_RCC_OscConfig+0x4f8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a8a      	ldr	r2, [pc, #552]	; (8003034 <HAL_RCC_OscConfig+0x4f8>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e12:	f7ff fb9f 	bl	8002554 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1a:	f7ff fb9b 	bl	8002554 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b64      	cmp	r3, #100	; 0x64
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0fd      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	4b81      	ldr	r3, [pc, #516]	; (8003034 <HAL_RCC_OscConfig+0x4f8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x312>
 8002e40:	4b7b      	ldr	r3, [pc, #492]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4a7a      	ldr	r2, [pc, #488]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6213      	str	r3, [r2, #32]
 8002e4c:	e02d      	b.n	8002eaa <HAL_RCC_OscConfig+0x36e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x334>
 8002e56:	4b76      	ldr	r3, [pc, #472]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4a75      	ldr	r2, [pc, #468]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	6213      	str	r3, [r2, #32]
 8002e62:	4b73      	ldr	r3, [pc, #460]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	4a72      	ldr	r2, [pc, #456]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002e68:	f023 0304 	bic.w	r3, r3, #4
 8002e6c:	6213      	str	r3, [r2, #32]
 8002e6e:	e01c      	b.n	8002eaa <HAL_RCC_OscConfig+0x36e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d10c      	bne.n	8002e92 <HAL_RCC_OscConfig+0x356>
 8002e78:	4b6d      	ldr	r3, [pc, #436]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4a6c      	ldr	r2, [pc, #432]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002e7e:	f043 0304 	orr.w	r3, r3, #4
 8002e82:	6213      	str	r3, [r2, #32]
 8002e84:	4b6a      	ldr	r3, [pc, #424]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	4a69      	ldr	r2, [pc, #420]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6213      	str	r3, [r2, #32]
 8002e90:	e00b      	b.n	8002eaa <HAL_RCC_OscConfig+0x36e>
 8002e92:	4b67      	ldr	r3, [pc, #412]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a66      	ldr	r2, [pc, #408]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	6213      	str	r3, [r2, #32]
 8002e9e:	4b64      	ldr	r3, [pc, #400]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a63      	ldr	r2, [pc, #396]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	f023 0304 	bic.w	r3, r3, #4
 8002ea8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d015      	beq.n	8002ede <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7ff fb4f 	bl	8002554 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7ff fb4b 	bl	8002554 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0ab      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	4b57      	ldr	r3, [pc, #348]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ee      	beq.n	8002eba <HAL_RCC_OscConfig+0x37e>
 8002edc:	e014      	b.n	8002f08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ede:	f7ff fb39 	bl	8002554 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee6:	f7ff fb35 	bl	8002554 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e095      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efc:	4b4c      	ldr	r3, [pc, #304]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ee      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d105      	bne.n	8002f1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0e:	4b48      	ldr	r3, [pc, #288]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	4a47      	ldr	r2, [pc, #284]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8081 	beq.w	8003026 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f24:	4b42      	ldr	r3, [pc, #264]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d061      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d146      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f38:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <HAL_RCC_OscConfig+0x4fc>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3e:	f7ff fb09 	bl	8002554 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f46:	f7ff fb05 	bl	8002554 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e067      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f58:	4b35      	ldr	r3, [pc, #212]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f0      	bne.n	8002f46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6c:	d108      	bne.n	8002f80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f6e:	4b30      	ldr	r3, [pc, #192]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	492d      	ldr	r1, [pc, #180]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f80:	4b2b      	ldr	r3, [pc, #172]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a19      	ldr	r1, [r3, #32]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	430b      	orrs	r3, r1
 8002f92:	4927      	ldr	r1, [pc, #156]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f98:	4b27      	ldr	r3, [pc, #156]	; (8003038 <HAL_RCC_OscConfig+0x4fc>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7ff fad9 	bl	8002554 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7ff fad5 	bl	8002554 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e037      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x46a>
 8002fc4:	e02f      	b.n	8003026 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_RCC_OscConfig+0x4fc>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7ff fac2 	bl	8002554 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7ff fabe 	bl	8002554 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e020      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x498>
 8002ff2:	e018      	b.n	8003026 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e013      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_OscConfig+0x4f4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	429a      	cmp	r2, r3
 8003012:	d106      	bne.n	8003022 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d001      	beq.n	8003026 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	40007000 	.word	0x40007000
 8003038:	42420060 	.word	0x42420060

0800303c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0d0      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003050:	4b6a      	ldr	r3, [pc, #424]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d910      	bls.n	8003080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b67      	ldr	r3, [pc, #412]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 0207 	bic.w	r2, r3, #7
 8003066:	4965      	ldr	r1, [pc, #404]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b63      	ldr	r3, [pc, #396]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0b8      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003098:	4b59      	ldr	r3, [pc, #356]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a58      	ldr	r2, [pc, #352]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b0:	4b53      	ldr	r3, [pc, #332]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a52      	ldr	r2, [pc, #328]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030bc:	4b50      	ldr	r3, [pc, #320]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	494d      	ldr	r1, [pc, #308]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d040      	beq.n	800315c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d115      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e07f      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fa:	4b41      	ldr	r3, [pc, #260]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e073      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310a:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e06b      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311a:	4b39      	ldr	r3, [pc, #228]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f023 0203 	bic.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4936      	ldr	r1, [pc, #216]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800312c:	f7ff fa12 	bl	8002554 <HAL_GetTick>
 8003130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	e00a      	b.n	800314a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003134:	f7ff fa0e 	bl	8002554 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e053      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 020c 	and.w	r2, r3, #12
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	429a      	cmp	r2, r3
 800315a:	d1eb      	bne.n	8003134 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800315c:	4b27      	ldr	r3, [pc, #156]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d210      	bcs.n	800318c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b24      	ldr	r3, [pc, #144]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 0207 	bic.w	r2, r3, #7
 8003172:	4922      	ldr	r1, [pc, #136]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b20      	ldr	r3, [pc, #128]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e032      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4916      	ldr	r1, [pc, #88]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031b6:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	490e      	ldr	r1, [pc, #56]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ca:	f000 f821 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 80031ce:	4601      	mov	r1, r0
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <HAL_RCC_ClockConfig+0x1c8>)
 80031dc:	5cd3      	ldrb	r3, [r2, r3]
 80031de:	fa21 f303 	lsr.w	r3, r1, r3
 80031e2:	4a09      	ldr	r2, [pc, #36]	; (8003208 <HAL_RCC_ClockConfig+0x1cc>)
 80031e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCC_ClockConfig+0x1d0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff f970 	bl	80024d0 <HAL_InitTick>

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40022000 	.word	0x40022000
 8003200:	40021000 	.word	0x40021000
 8003204:	0800621c 	.word	0x0800621c
 8003208:	20000120 	.word	0x20000120
 800320c:	20000124 	.word	0x20000124

08003210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003210:	b490      	push	{r4, r7}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003216:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003218:	1d3c      	adds	r4, r7, #4
 800321a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800321c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003220:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800323a:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b04      	cmp	r3, #4
 8003248:	d002      	beq.n	8003250 <HAL_RCC_GetSysClockFreq+0x40>
 800324a:	2b08      	cmp	r3, #8
 800324c:	d003      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x46>
 800324e:	e02d      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003250:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003252:	623b      	str	r3, [r7, #32]
      break;
 8003254:	e02d      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	0c9b      	lsrs	r3, r3, #18
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003262:	4413      	add	r3, r2
 8003264:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003268:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	0c5b      	lsrs	r3, r3, #17
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003282:	4413      	add	r3, r2
 8003284:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003288:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	4a0f      	ldr	r2, [pc, #60]	; (80032cc <HAL_RCC_GetSysClockFreq+0xbc>)
 800328e:	fb02 f203 	mul.w	r2, r2, r3
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
 800329a:	e004      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	623b      	str	r3, [r7, #32]
      break;
 80032aa:	e002      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032ac:	4b07      	ldr	r3, [pc, #28]	; (80032cc <HAL_RCC_GetSysClockFreq+0xbc>)
 80032ae:	623b      	str	r3, [r7, #32]
      break;
 80032b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b2:	6a3b      	ldr	r3, [r7, #32]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3728      	adds	r7, #40	; 0x28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc90      	pop	{r4, r7}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	08006208 	.word	0x08006208
 80032c4:	08006218 	.word	0x08006218
 80032c8:	40021000 	.word	0x40021000
 80032cc:	007a1200 	.word	0x007a1200
 80032d0:	003d0900 	.word	0x003d0900

080032d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d8:	4b02      	ldr	r3, [pc, #8]	; (80032e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr
 80032e4:	20000120 	.word	0x20000120

080032e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032ec:	f7ff fff2 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 80032f0:	4601      	mov	r1, r0
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	4a03      	ldr	r2, [pc, #12]	; (800330c <HAL_RCC_GetPCLK1Freq+0x24>)
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000
 800330c:	0800622c 	.word	0x0800622c

08003310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003314:	f7ff ffde 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 8003318:	4601      	mov	r1, r0
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	0adb      	lsrs	r3, r3, #11
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4a03      	ldr	r2, [pc, #12]	; (8003334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	fa21 f303 	lsr.w	r3, r1, r3
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000
 8003334:	0800622c 	.word	0x0800622c

08003338 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <RCC_Delay+0x34>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <RCC_Delay+0x38>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0a5b      	lsrs	r3, r3, #9
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003354:	bf00      	nop
  }
  while (Delay --);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1e5a      	subs	r2, r3, #1
 800335a:	60fa      	str	r2, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f9      	bne.n	8003354 <RCC_Delay+0x1c>
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000120 	.word	0x20000120
 8003370:	10624dd3 	.word	0x10624dd3

08003374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e041      	b.n	800340a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fe ff30 	bl	8002200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	4619      	mov	r1, r3
 80033b2:	4610      	mov	r0, r2
 80033b4:	f000 fadc 	bl	8003970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d001      	beq.n	800342c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e032      	b.n	8003492 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a18      	ldr	r2, [pc, #96]	; (800349c <HAL_TIM_Base_Start+0x88>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00e      	beq.n	800345c <HAL_TIM_Base_Start+0x48>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003446:	d009      	beq.n	800345c <HAL_TIM_Base_Start+0x48>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <HAL_TIM_Base_Start+0x8c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d004      	beq.n	800345c <HAL_TIM_Base_Start+0x48>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a13      	ldr	r2, [pc, #76]	; (80034a4 <HAL_TIM_Base_Start+0x90>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d111      	bne.n	8003480 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b06      	cmp	r3, #6
 800346c:	d010      	beq.n	8003490 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347e:	e007      	b.n	8003490 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800

080034a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d001      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e03a      	b.n	8003536 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a18      	ldr	r2, [pc, #96]	; (8003540 <HAL_TIM_Base_Start_IT+0x98>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00e      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x58>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d009      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x58>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a14      	ldr	r2, [pc, #80]	; (8003544 <HAL_TIM_Base_Start_IT+0x9c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x58>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a13      	ldr	r2, [pc, #76]	; (8003548 <HAL_TIM_Base_Start_IT+0xa0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d111      	bne.n	8003524 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d010      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003522:	e007      	b.n	8003534 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800

0800354c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6a1a      	ldr	r2, [r3, #32]
 800356a:	f241 1311 	movw	r3, #4369	; 0x1111
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10f      	bne.n	8003594 <HAL_TIM_Base_Stop_IT+0x48>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6a1a      	ldr	r2, [r3, #32]
 800357a:	f240 4344 	movw	r3, #1092	; 0x444
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_TIM_Base_Stop_IT+0x48>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0201 	bic.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr

080035a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d122      	bne.n	8003604 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d11b      	bne.n	8003604 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0202 	mvn.w	r2, #2
 80035d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f9a4 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 80035f0:	e005      	b.n	80035fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f997 	bl	8003926 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f9a6 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b04      	cmp	r3, #4
 8003610:	d122      	bne.n	8003658 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b04      	cmp	r3, #4
 800361e:	d11b      	bne.n	8003658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0204 	mvn.w	r2, #4
 8003628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2202      	movs	r2, #2
 800362e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f97a 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 8003644:	e005      	b.n	8003652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f96d 	bl	8003926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f97c 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b08      	cmp	r3, #8
 8003664:	d122      	bne.n	80036ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b08      	cmp	r3, #8
 8003672:	d11b      	bne.n	80036ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0208 	mvn.w	r2, #8
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2204      	movs	r2, #4
 8003682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f950 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f943 	bl	8003926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f952 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b10      	cmp	r3, #16
 80036b8:	d122      	bne.n	8003700 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b10      	cmp	r3, #16
 80036c6:	d11b      	bne.n	8003700 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0210 	mvn.w	r2, #16
 80036d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2208      	movs	r2, #8
 80036d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f926 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 80036ec:	e005      	b.n	80036fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f919 	bl	8003926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f928 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d10e      	bne.n	800372c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d107      	bne.n	800372c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0201 	mvn.w	r2, #1
 8003724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fd ff14 	bl	8001554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003736:	2b80      	cmp	r3, #128	; 0x80
 8003738:	d10e      	bne.n	8003758 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003744:	2b80      	cmp	r3, #128	; 0x80
 8003746:	d107      	bne.n	8003758 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fa6b 	bl	8003c2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b40      	cmp	r3, #64	; 0x40
 8003764:	d10e      	bne.n	8003784 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b40      	cmp	r3, #64	; 0x40
 8003772:	d107      	bne.n	8003784 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800377c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f8ec 	bl	800395c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b20      	cmp	r3, #32
 8003790:	d10e      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b20      	cmp	r3, #32
 800379e:	d107      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0220 	mvn.w	r2, #32
 80037a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fa36 	bl	8003c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIM_ConfigClockSource+0x18>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e0a6      	b.n	800391e <HAL_TIM_ConfigClockSource+0x166>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d067      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0x120>
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d80b      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x6c>
 800380c:	2b10      	cmp	r3, #16
 800380e:	d073      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0x140>
 8003810:	2b10      	cmp	r3, #16
 8003812:	d802      	bhi.n	800381a <HAL_TIM_ConfigClockSource+0x62>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d06f      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003818:	e078      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800381a:	2b20      	cmp	r3, #32
 800381c:	d06c      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0x140>
 800381e:	2b30      	cmp	r3, #48	; 0x30
 8003820:	d06a      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003822:	e073      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003824:	2b70      	cmp	r3, #112	; 0x70
 8003826:	d00d      	beq.n	8003844 <HAL_TIM_ConfigClockSource+0x8c>
 8003828:	2b70      	cmp	r3, #112	; 0x70
 800382a:	d804      	bhi.n	8003836 <HAL_TIM_ConfigClockSource+0x7e>
 800382c:	2b50      	cmp	r3, #80	; 0x50
 800382e:	d033      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0xe0>
 8003830:	2b60      	cmp	r3, #96	; 0x60
 8003832:	d041      	beq.n	80038b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003834:	e06a      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383a:	d066      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x152>
 800383c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003840:	d017      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003842:	e063      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6899      	ldr	r1, [r3, #8]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f000 f965 	bl	8003b22 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003866:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	609a      	str	r2, [r3, #8]
      break;
 8003870:	e04c      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6899      	ldr	r1, [r3, #8]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f000 f94e 	bl	8003b22 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003894:	609a      	str	r2, [r3, #8]
      break;
 8003896:	e039      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	461a      	mov	r2, r3
 80038a6:	f000 f8c5 	bl	8003a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2150      	movs	r1, #80	; 0x50
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 f91c 	bl	8003aee <TIM_ITRx_SetConfig>
      break;
 80038b6:	e029      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	461a      	mov	r2, r3
 80038c6:	f000 f8e3 	bl	8003a90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2160      	movs	r1, #96	; 0x60
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 f90c 	bl	8003aee <TIM_ITRx_SetConfig>
      break;
 80038d6:	e019      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	461a      	mov	r2, r3
 80038e6:	f000 f8a5 	bl	8003a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2140      	movs	r1, #64	; 0x40
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 f8fc 	bl	8003aee <TIM_ITRx_SetConfig>
      break;
 80038f6:	e009      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f000 f8f3 	bl	8003aee <TIM_ITRx_SetConfig>
        break;
 8003908:	e000      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800390a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr
	...

08003970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a29      	ldr	r2, [pc, #164]	; (8003a28 <TIM_Base_SetConfig+0xb8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00b      	beq.n	80039a0 <TIM_Base_SetConfig+0x30>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398e:	d007      	beq.n	80039a0 <TIM_Base_SetConfig+0x30>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a26      	ldr	r2, [pc, #152]	; (8003a2c <TIM_Base_SetConfig+0xbc>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_Base_SetConfig+0x30>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a25      	ldr	r2, [pc, #148]	; (8003a30 <TIM_Base_SetConfig+0xc0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d108      	bne.n	80039b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <TIM_Base_SetConfig+0xb8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00b      	beq.n	80039d2 <TIM_Base_SetConfig+0x62>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d007      	beq.n	80039d2 <TIM_Base_SetConfig+0x62>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <TIM_Base_SetConfig+0xbc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <TIM_Base_SetConfig+0x62>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <TIM_Base_SetConfig+0xc0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d108      	bne.n	80039e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a07      	ldr	r2, [pc, #28]	; (8003a28 <TIM_Base_SetConfig+0xb8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d103      	bne.n	8003a18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	615a      	str	r2, [r3, #20]
}
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800

08003a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	f023 0201 	bic.w	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f023 030a 	bic.w	r3, r3, #10
 8003a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	621a      	str	r2, [r3, #32]
}
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f023 0210 	bic.w	r2, r3, #16
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	031b      	lsls	r3, r3, #12
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003acc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	621a      	str	r2, [r3, #32]
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b085      	sub	sp, #20
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f043 0307 	orr.w	r3, r3, #7
 8003b10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	609a      	str	r2, [r3, #8]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b087      	sub	sp, #28
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	021a      	lsls	r2, r3, #8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	609a      	str	r2, [r3, #8]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e046      	b.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a16      	ldr	r2, [pc, #88]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00e      	beq.n	8003bda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc4:	d009      	beq.n	8003bda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a12      	ldr	r2, [pc, #72]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d004      	beq.n	8003bda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr
 8003c10:	40012c00 	.word	0x40012c00
 8003c14:	40000400 	.word	0x40000400
 8003c18:	40000800 	.word	0x40000800

08003c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr

08003c2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e03f      	b.n	8003cd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fe fb72 	bl	8002350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2224      	movs	r2, #36	; 0x24
 8003c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f9a3 	bl	8003fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b08a      	sub	sp, #40	; 0x28
 8003cde:	af02      	add	r7, sp, #8
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d17c      	bne.n	8003df4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_UART_Transmit+0x2c>
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e075      	b.n	8003df6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_UART_Transmit+0x3e>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e06e      	b.n	8003df6 <HAL_UART_Transmit+0x11c>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2221      	movs	r2, #33	; 0x21
 8003d2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d2e:	f7fe fc11 	bl	8002554 <HAL_GetTick>
 8003d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	88fa      	ldrh	r2, [r7, #6]
 8003d38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	88fa      	ldrh	r2, [r7, #6]
 8003d3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d48:	d108      	bne.n	8003d5c <HAL_UART_Transmit+0x82>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d104      	bne.n	8003d5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	e003      	b.n	8003d64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003d6c:	e02a      	b.n	8003dc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2200      	movs	r2, #0
 8003d76:	2180      	movs	r1, #128	; 0x80
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f8df 	bl	8003f3c <UART_WaitOnFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e036      	b.n	8003df6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10b      	bne.n	8003da6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	3302      	adds	r3, #2
 8003da2:	61bb      	str	r3, [r7, #24]
 8003da4:	e007      	b.n	8003db6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	781a      	ldrb	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	3301      	adds	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1cf      	bne.n	8003d6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2140      	movs	r1, #64	; 0x40
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f8af 	bl	8003f3c <UART_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e006      	b.n	8003df6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	e000      	b.n	8003df6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003df4:	2302      	movs	r3, #2
  }
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3720      	adds	r7, #32
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b08a      	sub	sp, #40	; 0x28
 8003e02:	af02      	add	r7, sp, #8
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	f040 8089 	bne.w	8003f32 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_UART_Receive+0x2e>
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e081      	b.n	8003f34 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Receive+0x40>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e07a      	b.n	8003f34 <HAL_UART_Receive+0x136>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2222      	movs	r2, #34	; 0x22
 8003e50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e54:	f7fe fb7e 	bl	8002554 <HAL_GetTick>
 8003e58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6e:	d108      	bne.n	8003e82 <HAL_UART_Receive+0x84>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d104      	bne.n	8003e82 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	e003      	b.n	8003e8a <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003e92:	e043      	b.n	8003f1c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2120      	movs	r1, #32
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f84c 	bl	8003f3c <UART_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e042      	b.n	8003f34 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10c      	bne.n	8003ece <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	3302      	adds	r3, #2
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	e01f      	b.n	8003f0e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed6:	d007      	beq.n	8003ee8 <HAL_UART_Receive+0xea>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10a      	bne.n	8003ef6 <HAL_UART_Receive+0xf8>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	e008      	b.n	8003f08 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1b6      	bne.n	8003e94 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e000      	b.n	8003f34 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
  }
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4c:	e02c      	b.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d028      	beq.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d007      	beq.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f5c:	f7fe fafa 	bl	8002554 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d21d      	bcs.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0201 	bic.w	r2, r2, #1
 8003f8a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e00f      	b.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d0c3      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800400a:	f023 030c 	bic.w	r3, r3, #12
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	430b      	orrs	r3, r1
 8004016:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a2c      	ldr	r2, [pc, #176]	; (80040e4 <UART_SetConfig+0x114>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d103      	bne.n	8004040 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004038:	f7ff f96a 	bl	8003310 <HAL_RCC_GetPCLK2Freq>
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	e002      	b.n	8004046 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004040:	f7ff f952 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 8004044:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	009a      	lsls	r2, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <UART_SetConfig+0x118>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	0119      	lsls	r1, r3, #4
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009a      	lsls	r2, r3, #2
 8004070:	441a      	add	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	fbb2 f2f3 	udiv	r2, r2, r3
 800407c:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <UART_SetConfig+0x118>)
 800407e:	fba3 0302 	umull	r0, r3, r3, r2
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	2064      	movs	r0, #100	; 0x64
 8004086:	fb00 f303 	mul.w	r3, r0, r3
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	3332      	adds	r3, #50	; 0x32
 8004090:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <UART_SetConfig+0x118>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800409c:	4419      	add	r1, r3
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009a      	lsls	r2, r3, #2
 80040a8:	441a      	add	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <UART_SetConfig+0x118>)
 80040b6:	fba3 0302 	umull	r0, r3, r3, r2
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2064      	movs	r0, #100	; 0x64
 80040be:	fb00 f303 	mul.w	r3, r0, r3
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	3332      	adds	r3, #50	; 0x32
 80040c8:	4a07      	ldr	r2, [pc, #28]	; (80040e8 <UART_SetConfig+0x118>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	f003 020f 	and.w	r2, r3, #15
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	440a      	add	r2, r1
 80040da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040dc:	bf00      	nop
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40013800 	.word	0x40013800
 80040e8:	51eb851f 	.word	0x51eb851f

080040ec <__errno>:
 80040ec:	4b01      	ldr	r3, [pc, #4]	; (80040f4 <__errno+0x8>)
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	2000012c 	.word	0x2000012c

080040f8 <__libc_init_array>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	2500      	movs	r5, #0
 80040fc:	4e0c      	ldr	r6, [pc, #48]	; (8004130 <__libc_init_array+0x38>)
 80040fe:	4c0d      	ldr	r4, [pc, #52]	; (8004134 <__libc_init_array+0x3c>)
 8004100:	1ba4      	subs	r4, r4, r6
 8004102:	10a4      	asrs	r4, r4, #2
 8004104:	42a5      	cmp	r5, r4
 8004106:	d109      	bne.n	800411c <__libc_init_array+0x24>
 8004108:	f002 f860 	bl	80061cc <_init>
 800410c:	2500      	movs	r5, #0
 800410e:	4e0a      	ldr	r6, [pc, #40]	; (8004138 <__libc_init_array+0x40>)
 8004110:	4c0a      	ldr	r4, [pc, #40]	; (800413c <__libc_init_array+0x44>)
 8004112:	1ba4      	subs	r4, r4, r6
 8004114:	10a4      	asrs	r4, r4, #2
 8004116:	42a5      	cmp	r5, r4
 8004118:	d105      	bne.n	8004126 <__libc_init_array+0x2e>
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004120:	4798      	blx	r3
 8004122:	3501      	adds	r5, #1
 8004124:	e7ee      	b.n	8004104 <__libc_init_array+0xc>
 8004126:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800412a:	4798      	blx	r3
 800412c:	3501      	adds	r5, #1
 800412e:	e7f2      	b.n	8004116 <__libc_init_array+0x1e>
 8004130:	08006490 	.word	0x08006490
 8004134:	08006490 	.word	0x08006490
 8004138:	08006490 	.word	0x08006490
 800413c:	08006494 	.word	0x08006494

08004140 <memset>:
 8004140:	4603      	mov	r3, r0
 8004142:	4402      	add	r2, r0
 8004144:	4293      	cmp	r3, r2
 8004146:	d100      	bne.n	800414a <memset+0xa>
 8004148:	4770      	bx	lr
 800414a:	f803 1b01 	strb.w	r1, [r3], #1
 800414e:	e7f9      	b.n	8004144 <memset+0x4>

08004150 <__cvt>:
 8004150:	2b00      	cmp	r3, #0
 8004152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004156:	461e      	mov	r6, r3
 8004158:	bfbb      	ittet	lt
 800415a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800415e:	461e      	movlt	r6, r3
 8004160:	2300      	movge	r3, #0
 8004162:	232d      	movlt	r3, #45	; 0x2d
 8004164:	b088      	sub	sp, #32
 8004166:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004168:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800416c:	f027 0720 	bic.w	r7, r7, #32
 8004170:	2f46      	cmp	r7, #70	; 0x46
 8004172:	4614      	mov	r4, r2
 8004174:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004176:	700b      	strb	r3, [r1, #0]
 8004178:	d004      	beq.n	8004184 <__cvt+0x34>
 800417a:	2f45      	cmp	r7, #69	; 0x45
 800417c:	d100      	bne.n	8004180 <__cvt+0x30>
 800417e:	3501      	adds	r5, #1
 8004180:	2302      	movs	r3, #2
 8004182:	e000      	b.n	8004186 <__cvt+0x36>
 8004184:	2303      	movs	r3, #3
 8004186:	aa07      	add	r2, sp, #28
 8004188:	9204      	str	r2, [sp, #16]
 800418a:	aa06      	add	r2, sp, #24
 800418c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004190:	e9cd 3500 	strd	r3, r5, [sp]
 8004194:	4622      	mov	r2, r4
 8004196:	4633      	mov	r3, r6
 8004198:	f000 fcda 	bl	8004b50 <_dtoa_r>
 800419c:	2f47      	cmp	r7, #71	; 0x47
 800419e:	4680      	mov	r8, r0
 80041a0:	d102      	bne.n	80041a8 <__cvt+0x58>
 80041a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80041a4:	07db      	lsls	r3, r3, #31
 80041a6:	d526      	bpl.n	80041f6 <__cvt+0xa6>
 80041a8:	2f46      	cmp	r7, #70	; 0x46
 80041aa:	eb08 0905 	add.w	r9, r8, r5
 80041ae:	d111      	bne.n	80041d4 <__cvt+0x84>
 80041b0:	f898 3000 	ldrb.w	r3, [r8]
 80041b4:	2b30      	cmp	r3, #48	; 0x30
 80041b6:	d10a      	bne.n	80041ce <__cvt+0x7e>
 80041b8:	2200      	movs	r2, #0
 80041ba:	2300      	movs	r3, #0
 80041bc:	4620      	mov	r0, r4
 80041be:	4631      	mov	r1, r6
 80041c0:	f7fc fbf2 	bl	80009a8 <__aeabi_dcmpeq>
 80041c4:	b918      	cbnz	r0, 80041ce <__cvt+0x7e>
 80041c6:	f1c5 0501 	rsb	r5, r5, #1
 80041ca:	f8ca 5000 	str.w	r5, [sl]
 80041ce:	f8da 3000 	ldr.w	r3, [sl]
 80041d2:	4499      	add	r9, r3
 80041d4:	2200      	movs	r2, #0
 80041d6:	2300      	movs	r3, #0
 80041d8:	4620      	mov	r0, r4
 80041da:	4631      	mov	r1, r6
 80041dc:	f7fc fbe4 	bl	80009a8 <__aeabi_dcmpeq>
 80041e0:	b938      	cbnz	r0, 80041f2 <__cvt+0xa2>
 80041e2:	2230      	movs	r2, #48	; 0x30
 80041e4:	9b07      	ldr	r3, [sp, #28]
 80041e6:	454b      	cmp	r3, r9
 80041e8:	d205      	bcs.n	80041f6 <__cvt+0xa6>
 80041ea:	1c59      	adds	r1, r3, #1
 80041ec:	9107      	str	r1, [sp, #28]
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e7f8      	b.n	80041e4 <__cvt+0x94>
 80041f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80041f6:	4640      	mov	r0, r8
 80041f8:	9b07      	ldr	r3, [sp, #28]
 80041fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80041fc:	eba3 0308 	sub.w	r3, r3, r8
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	b008      	add	sp, #32
 8004204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004208 <__exponent>:
 8004208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800420a:	2900      	cmp	r1, #0
 800420c:	bfb4      	ite	lt
 800420e:	232d      	movlt	r3, #45	; 0x2d
 8004210:	232b      	movge	r3, #43	; 0x2b
 8004212:	4604      	mov	r4, r0
 8004214:	bfb8      	it	lt
 8004216:	4249      	neglt	r1, r1
 8004218:	2909      	cmp	r1, #9
 800421a:	f804 2b02 	strb.w	r2, [r4], #2
 800421e:	7043      	strb	r3, [r0, #1]
 8004220:	dd21      	ble.n	8004266 <__exponent+0x5e>
 8004222:	f10d 0307 	add.w	r3, sp, #7
 8004226:	461f      	mov	r7, r3
 8004228:	260a      	movs	r6, #10
 800422a:	fb91 f5f6 	sdiv	r5, r1, r6
 800422e:	fb06 1115 	mls	r1, r6, r5, r1
 8004232:	2d09      	cmp	r5, #9
 8004234:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004238:	f803 1c01 	strb.w	r1, [r3, #-1]
 800423c:	f103 32ff 	add.w	r2, r3, #4294967295
 8004240:	4629      	mov	r1, r5
 8004242:	dc09      	bgt.n	8004258 <__exponent+0x50>
 8004244:	3130      	adds	r1, #48	; 0x30
 8004246:	3b02      	subs	r3, #2
 8004248:	f802 1c01 	strb.w	r1, [r2, #-1]
 800424c:	42bb      	cmp	r3, r7
 800424e:	4622      	mov	r2, r4
 8004250:	d304      	bcc.n	800425c <__exponent+0x54>
 8004252:	1a10      	subs	r0, r2, r0
 8004254:	b003      	add	sp, #12
 8004256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004258:	4613      	mov	r3, r2
 800425a:	e7e6      	b.n	800422a <__exponent+0x22>
 800425c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004260:	f804 2b01 	strb.w	r2, [r4], #1
 8004264:	e7f2      	b.n	800424c <__exponent+0x44>
 8004266:	2330      	movs	r3, #48	; 0x30
 8004268:	4419      	add	r1, r3
 800426a:	7083      	strb	r3, [r0, #2]
 800426c:	1d02      	adds	r2, r0, #4
 800426e:	70c1      	strb	r1, [r0, #3]
 8004270:	e7ef      	b.n	8004252 <__exponent+0x4a>
	...

08004274 <_printf_float>:
 8004274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004278:	b091      	sub	sp, #68	; 0x44
 800427a:	460c      	mov	r4, r1
 800427c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800427e:	4693      	mov	fp, r2
 8004280:	461e      	mov	r6, r3
 8004282:	4605      	mov	r5, r0
 8004284:	f001 fa18 	bl	80056b8 <_localeconv_r>
 8004288:	6803      	ldr	r3, [r0, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	9309      	str	r3, [sp, #36]	; 0x24
 800428e:	f7fb ff5f 	bl	8000150 <strlen>
 8004292:	2300      	movs	r3, #0
 8004294:	930e      	str	r3, [sp, #56]	; 0x38
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	900a      	str	r0, [sp, #40]	; 0x28
 800429a:	3307      	adds	r3, #7
 800429c:	f023 0307 	bic.w	r3, r3, #7
 80042a0:	f103 0208 	add.w	r2, r3, #8
 80042a4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80042a8:	f8d4 a000 	ldr.w	sl, [r4]
 80042ac:	603a      	str	r2, [r7, #0]
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80042b6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80042ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80042be:	930b      	str	r3, [sp, #44]	; 0x2c
 80042c0:	f04f 32ff 	mov.w	r2, #4294967295
 80042c4:	4ba6      	ldr	r3, [pc, #664]	; (8004560 <_printf_float+0x2ec>)
 80042c6:	4638      	mov	r0, r7
 80042c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042ca:	f7fc fb9f 	bl	8000a0c <__aeabi_dcmpun>
 80042ce:	bb68      	cbnz	r0, 800432c <_printf_float+0xb8>
 80042d0:	f04f 32ff 	mov.w	r2, #4294967295
 80042d4:	4ba2      	ldr	r3, [pc, #648]	; (8004560 <_printf_float+0x2ec>)
 80042d6:	4638      	mov	r0, r7
 80042d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042da:	f7fc fb79 	bl	80009d0 <__aeabi_dcmple>
 80042de:	bb28      	cbnz	r0, 800432c <_printf_float+0xb8>
 80042e0:	2200      	movs	r2, #0
 80042e2:	2300      	movs	r3, #0
 80042e4:	4638      	mov	r0, r7
 80042e6:	4649      	mov	r1, r9
 80042e8:	f7fc fb68 	bl	80009bc <__aeabi_dcmplt>
 80042ec:	b110      	cbz	r0, 80042f4 <_printf_float+0x80>
 80042ee:	232d      	movs	r3, #45	; 0x2d
 80042f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f4:	4f9b      	ldr	r7, [pc, #620]	; (8004564 <_printf_float+0x2f0>)
 80042f6:	4b9c      	ldr	r3, [pc, #624]	; (8004568 <_printf_float+0x2f4>)
 80042f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042fc:	bf98      	it	ls
 80042fe:	461f      	movls	r7, r3
 8004300:	2303      	movs	r3, #3
 8004302:	f04f 0900 	mov.w	r9, #0
 8004306:	6123      	str	r3, [r4, #16]
 8004308:	f02a 0304 	bic.w	r3, sl, #4
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	9600      	str	r6, [sp, #0]
 8004310:	465b      	mov	r3, fp
 8004312:	aa0f      	add	r2, sp, #60	; 0x3c
 8004314:	4621      	mov	r1, r4
 8004316:	4628      	mov	r0, r5
 8004318:	f000 f9e2 	bl	80046e0 <_printf_common>
 800431c:	3001      	adds	r0, #1
 800431e:	f040 8090 	bne.w	8004442 <_printf_float+0x1ce>
 8004322:	f04f 30ff 	mov.w	r0, #4294967295
 8004326:	b011      	add	sp, #68	; 0x44
 8004328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432c:	463a      	mov	r2, r7
 800432e:	464b      	mov	r3, r9
 8004330:	4638      	mov	r0, r7
 8004332:	4649      	mov	r1, r9
 8004334:	f7fc fb6a 	bl	8000a0c <__aeabi_dcmpun>
 8004338:	b110      	cbz	r0, 8004340 <_printf_float+0xcc>
 800433a:	4f8c      	ldr	r7, [pc, #560]	; (800456c <_printf_float+0x2f8>)
 800433c:	4b8c      	ldr	r3, [pc, #560]	; (8004570 <_printf_float+0x2fc>)
 800433e:	e7db      	b.n	80042f8 <_printf_float+0x84>
 8004340:	6863      	ldr	r3, [r4, #4]
 8004342:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004346:	1c59      	adds	r1, r3, #1
 8004348:	a80d      	add	r0, sp, #52	; 0x34
 800434a:	a90e      	add	r1, sp, #56	; 0x38
 800434c:	d140      	bne.n	80043d0 <_printf_float+0x15c>
 800434e:	2306      	movs	r3, #6
 8004350:	6063      	str	r3, [r4, #4]
 8004352:	f04f 0c00 	mov.w	ip, #0
 8004356:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800435a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800435e:	6863      	ldr	r3, [r4, #4]
 8004360:	6022      	str	r2, [r4, #0]
 8004362:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	463a      	mov	r2, r7
 800436a:	464b      	mov	r3, r9
 800436c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004370:	4628      	mov	r0, r5
 8004372:	f7ff feed 	bl	8004150 <__cvt>
 8004376:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800437a:	2b47      	cmp	r3, #71	; 0x47
 800437c:	4607      	mov	r7, r0
 800437e:	d109      	bne.n	8004394 <_printf_float+0x120>
 8004380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004382:	1cd8      	adds	r0, r3, #3
 8004384:	db02      	blt.n	800438c <_printf_float+0x118>
 8004386:	6862      	ldr	r2, [r4, #4]
 8004388:	4293      	cmp	r3, r2
 800438a:	dd47      	ble.n	800441c <_printf_float+0x1a8>
 800438c:	f1a8 0802 	sub.w	r8, r8, #2
 8004390:	fa5f f888 	uxtb.w	r8, r8
 8004394:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004398:	990d      	ldr	r1, [sp, #52]	; 0x34
 800439a:	d824      	bhi.n	80043e6 <_printf_float+0x172>
 800439c:	3901      	subs	r1, #1
 800439e:	4642      	mov	r2, r8
 80043a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80043a4:	910d      	str	r1, [sp, #52]	; 0x34
 80043a6:	f7ff ff2f 	bl	8004208 <__exponent>
 80043aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043ac:	4681      	mov	r9, r0
 80043ae:	1813      	adds	r3, r2, r0
 80043b0:	2a01      	cmp	r2, #1
 80043b2:	6123      	str	r3, [r4, #16]
 80043b4:	dc02      	bgt.n	80043bc <_printf_float+0x148>
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	07d1      	lsls	r1, r2, #31
 80043ba:	d501      	bpl.n	80043c0 <_printf_float+0x14c>
 80043bc:	3301      	adds	r3, #1
 80043be:	6123      	str	r3, [r4, #16]
 80043c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0a2      	beq.n	800430e <_printf_float+0x9a>
 80043c8:	232d      	movs	r3, #45	; 0x2d
 80043ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043ce:	e79e      	b.n	800430e <_printf_float+0x9a>
 80043d0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80043d4:	f000 816e 	beq.w	80046b4 <_printf_float+0x440>
 80043d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043dc:	d1b9      	bne.n	8004352 <_printf_float+0xde>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1b7      	bne.n	8004352 <_printf_float+0xde>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e7b4      	b.n	8004350 <_printf_float+0xdc>
 80043e6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80043ea:	d119      	bne.n	8004420 <_printf_float+0x1ac>
 80043ec:	2900      	cmp	r1, #0
 80043ee:	6863      	ldr	r3, [r4, #4]
 80043f0:	dd0c      	ble.n	800440c <_printf_float+0x198>
 80043f2:	6121      	str	r1, [r4, #16]
 80043f4:	b913      	cbnz	r3, 80043fc <_printf_float+0x188>
 80043f6:	6822      	ldr	r2, [r4, #0]
 80043f8:	07d2      	lsls	r2, r2, #31
 80043fa:	d502      	bpl.n	8004402 <_printf_float+0x18e>
 80043fc:	3301      	adds	r3, #1
 80043fe:	440b      	add	r3, r1
 8004400:	6123      	str	r3, [r4, #16]
 8004402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004404:	f04f 0900 	mov.w	r9, #0
 8004408:	65a3      	str	r3, [r4, #88]	; 0x58
 800440a:	e7d9      	b.n	80043c0 <_printf_float+0x14c>
 800440c:	b913      	cbnz	r3, 8004414 <_printf_float+0x1a0>
 800440e:	6822      	ldr	r2, [r4, #0]
 8004410:	07d0      	lsls	r0, r2, #31
 8004412:	d501      	bpl.n	8004418 <_printf_float+0x1a4>
 8004414:	3302      	adds	r3, #2
 8004416:	e7f3      	b.n	8004400 <_printf_float+0x18c>
 8004418:	2301      	movs	r3, #1
 800441a:	e7f1      	b.n	8004400 <_printf_float+0x18c>
 800441c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004420:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004424:	4293      	cmp	r3, r2
 8004426:	db05      	blt.n	8004434 <_printf_float+0x1c0>
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	6123      	str	r3, [r4, #16]
 800442c:	07d1      	lsls	r1, r2, #31
 800442e:	d5e8      	bpl.n	8004402 <_printf_float+0x18e>
 8004430:	3301      	adds	r3, #1
 8004432:	e7e5      	b.n	8004400 <_printf_float+0x18c>
 8004434:	2b00      	cmp	r3, #0
 8004436:	bfcc      	ite	gt
 8004438:	2301      	movgt	r3, #1
 800443a:	f1c3 0302 	rsble	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	e7de      	b.n	8004400 <_printf_float+0x18c>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	055a      	lsls	r2, r3, #21
 8004446:	d407      	bmi.n	8004458 <_printf_float+0x1e4>
 8004448:	6923      	ldr	r3, [r4, #16]
 800444a:	463a      	mov	r2, r7
 800444c:	4659      	mov	r1, fp
 800444e:	4628      	mov	r0, r5
 8004450:	47b0      	blx	r6
 8004452:	3001      	adds	r0, #1
 8004454:	d129      	bne.n	80044aa <_printf_float+0x236>
 8004456:	e764      	b.n	8004322 <_printf_float+0xae>
 8004458:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800445c:	f240 80d7 	bls.w	800460e <_printf_float+0x39a>
 8004460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004464:	2200      	movs	r2, #0
 8004466:	2300      	movs	r3, #0
 8004468:	f7fc fa9e 	bl	80009a8 <__aeabi_dcmpeq>
 800446c:	b388      	cbz	r0, 80044d2 <_printf_float+0x25e>
 800446e:	2301      	movs	r3, #1
 8004470:	4a40      	ldr	r2, [pc, #256]	; (8004574 <_printf_float+0x300>)
 8004472:	4659      	mov	r1, fp
 8004474:	4628      	mov	r0, r5
 8004476:	47b0      	blx	r6
 8004478:	3001      	adds	r0, #1
 800447a:	f43f af52 	beq.w	8004322 <_printf_float+0xae>
 800447e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004482:	429a      	cmp	r2, r3
 8004484:	db02      	blt.n	800448c <_printf_float+0x218>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	07d8      	lsls	r0, r3, #31
 800448a:	d50e      	bpl.n	80044aa <_printf_float+0x236>
 800448c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004490:	4659      	mov	r1, fp
 8004492:	4628      	mov	r0, r5
 8004494:	47b0      	blx	r6
 8004496:	3001      	adds	r0, #1
 8004498:	f43f af43 	beq.w	8004322 <_printf_float+0xae>
 800449c:	2700      	movs	r7, #0
 800449e:	f104 081a 	add.w	r8, r4, #26
 80044a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044a4:	3b01      	subs	r3, #1
 80044a6:	42bb      	cmp	r3, r7
 80044a8:	dc09      	bgt.n	80044be <_printf_float+0x24a>
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	079f      	lsls	r7, r3, #30
 80044ae:	f100 80fd 	bmi.w	80046ac <_printf_float+0x438>
 80044b2:	68e0      	ldr	r0, [r4, #12]
 80044b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044b6:	4298      	cmp	r0, r3
 80044b8:	bfb8      	it	lt
 80044ba:	4618      	movlt	r0, r3
 80044bc:	e733      	b.n	8004326 <_printf_float+0xb2>
 80044be:	2301      	movs	r3, #1
 80044c0:	4642      	mov	r2, r8
 80044c2:	4659      	mov	r1, fp
 80044c4:	4628      	mov	r0, r5
 80044c6:	47b0      	blx	r6
 80044c8:	3001      	adds	r0, #1
 80044ca:	f43f af2a 	beq.w	8004322 <_printf_float+0xae>
 80044ce:	3701      	adds	r7, #1
 80044d0:	e7e7      	b.n	80044a2 <_printf_float+0x22e>
 80044d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	dc2b      	bgt.n	8004530 <_printf_float+0x2bc>
 80044d8:	2301      	movs	r3, #1
 80044da:	4a26      	ldr	r2, [pc, #152]	; (8004574 <_printf_float+0x300>)
 80044dc:	4659      	mov	r1, fp
 80044de:	4628      	mov	r0, r5
 80044e0:	47b0      	blx	r6
 80044e2:	3001      	adds	r0, #1
 80044e4:	f43f af1d 	beq.w	8004322 <_printf_float+0xae>
 80044e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044ea:	b923      	cbnz	r3, 80044f6 <_printf_float+0x282>
 80044ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044ee:	b913      	cbnz	r3, 80044f6 <_printf_float+0x282>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	07d9      	lsls	r1, r3, #31
 80044f4:	d5d9      	bpl.n	80044aa <_printf_float+0x236>
 80044f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044fa:	4659      	mov	r1, fp
 80044fc:	4628      	mov	r0, r5
 80044fe:	47b0      	blx	r6
 8004500:	3001      	adds	r0, #1
 8004502:	f43f af0e 	beq.w	8004322 <_printf_float+0xae>
 8004506:	f04f 0800 	mov.w	r8, #0
 800450a:	f104 091a 	add.w	r9, r4, #26
 800450e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004510:	425b      	negs	r3, r3
 8004512:	4543      	cmp	r3, r8
 8004514:	dc01      	bgt.n	800451a <_printf_float+0x2a6>
 8004516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004518:	e797      	b.n	800444a <_printf_float+0x1d6>
 800451a:	2301      	movs	r3, #1
 800451c:	464a      	mov	r2, r9
 800451e:	4659      	mov	r1, fp
 8004520:	4628      	mov	r0, r5
 8004522:	47b0      	blx	r6
 8004524:	3001      	adds	r0, #1
 8004526:	f43f aefc 	beq.w	8004322 <_printf_float+0xae>
 800452a:	f108 0801 	add.w	r8, r8, #1
 800452e:	e7ee      	b.n	800450e <_printf_float+0x29a>
 8004530:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004532:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004534:	429a      	cmp	r2, r3
 8004536:	bfa8      	it	ge
 8004538:	461a      	movge	r2, r3
 800453a:	2a00      	cmp	r2, #0
 800453c:	4690      	mov	r8, r2
 800453e:	dd07      	ble.n	8004550 <_printf_float+0x2dc>
 8004540:	4613      	mov	r3, r2
 8004542:	4659      	mov	r1, fp
 8004544:	463a      	mov	r2, r7
 8004546:	4628      	mov	r0, r5
 8004548:	47b0      	blx	r6
 800454a:	3001      	adds	r0, #1
 800454c:	f43f aee9 	beq.w	8004322 <_printf_float+0xae>
 8004550:	f104 031a 	add.w	r3, r4, #26
 8004554:	f04f 0a00 	mov.w	sl, #0
 8004558:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800455c:	930b      	str	r3, [sp, #44]	; 0x2c
 800455e:	e015      	b.n	800458c <_printf_float+0x318>
 8004560:	7fefffff 	.word	0x7fefffff
 8004564:	08006238 	.word	0x08006238
 8004568:	08006234 	.word	0x08006234
 800456c:	08006240 	.word	0x08006240
 8004570:	0800623c 	.word	0x0800623c
 8004574:	08006244 	.word	0x08006244
 8004578:	2301      	movs	r3, #1
 800457a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800457c:	4659      	mov	r1, fp
 800457e:	4628      	mov	r0, r5
 8004580:	47b0      	blx	r6
 8004582:	3001      	adds	r0, #1
 8004584:	f43f aecd 	beq.w	8004322 <_printf_float+0xae>
 8004588:	f10a 0a01 	add.w	sl, sl, #1
 800458c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004590:	eba9 0308 	sub.w	r3, r9, r8
 8004594:	4553      	cmp	r3, sl
 8004596:	dcef      	bgt.n	8004578 <_printf_float+0x304>
 8004598:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800459c:	429a      	cmp	r2, r3
 800459e:	444f      	add	r7, r9
 80045a0:	db14      	blt.n	80045cc <_printf_float+0x358>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	07da      	lsls	r2, r3, #31
 80045a6:	d411      	bmi.n	80045cc <_printf_float+0x358>
 80045a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045ac:	eba3 0209 	sub.w	r2, r3, r9
 80045b0:	eba3 0901 	sub.w	r9, r3, r1
 80045b4:	4591      	cmp	r9, r2
 80045b6:	bfa8      	it	ge
 80045b8:	4691      	movge	r9, r2
 80045ba:	f1b9 0f00 	cmp.w	r9, #0
 80045be:	dc0d      	bgt.n	80045dc <_printf_float+0x368>
 80045c0:	2700      	movs	r7, #0
 80045c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045c6:	f104 081a 	add.w	r8, r4, #26
 80045ca:	e018      	b.n	80045fe <_printf_float+0x38a>
 80045cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045d0:	4659      	mov	r1, fp
 80045d2:	4628      	mov	r0, r5
 80045d4:	47b0      	blx	r6
 80045d6:	3001      	adds	r0, #1
 80045d8:	d1e6      	bne.n	80045a8 <_printf_float+0x334>
 80045da:	e6a2      	b.n	8004322 <_printf_float+0xae>
 80045dc:	464b      	mov	r3, r9
 80045de:	463a      	mov	r2, r7
 80045e0:	4659      	mov	r1, fp
 80045e2:	4628      	mov	r0, r5
 80045e4:	47b0      	blx	r6
 80045e6:	3001      	adds	r0, #1
 80045e8:	d1ea      	bne.n	80045c0 <_printf_float+0x34c>
 80045ea:	e69a      	b.n	8004322 <_printf_float+0xae>
 80045ec:	2301      	movs	r3, #1
 80045ee:	4642      	mov	r2, r8
 80045f0:	4659      	mov	r1, fp
 80045f2:	4628      	mov	r0, r5
 80045f4:	47b0      	blx	r6
 80045f6:	3001      	adds	r0, #1
 80045f8:	f43f ae93 	beq.w	8004322 <_printf_float+0xae>
 80045fc:	3701      	adds	r7, #1
 80045fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	eba3 0309 	sub.w	r3, r3, r9
 8004608:	42bb      	cmp	r3, r7
 800460a:	dcef      	bgt.n	80045ec <_printf_float+0x378>
 800460c:	e74d      	b.n	80044aa <_printf_float+0x236>
 800460e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004610:	2a01      	cmp	r2, #1
 8004612:	dc01      	bgt.n	8004618 <_printf_float+0x3a4>
 8004614:	07db      	lsls	r3, r3, #31
 8004616:	d538      	bpl.n	800468a <_printf_float+0x416>
 8004618:	2301      	movs	r3, #1
 800461a:	463a      	mov	r2, r7
 800461c:	4659      	mov	r1, fp
 800461e:	4628      	mov	r0, r5
 8004620:	47b0      	blx	r6
 8004622:	3001      	adds	r0, #1
 8004624:	f43f ae7d 	beq.w	8004322 <_printf_float+0xae>
 8004628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800462c:	4659      	mov	r1, fp
 800462e:	4628      	mov	r0, r5
 8004630:	47b0      	blx	r6
 8004632:	3001      	adds	r0, #1
 8004634:	f107 0701 	add.w	r7, r7, #1
 8004638:	f43f ae73 	beq.w	8004322 <_printf_float+0xae>
 800463c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004642:	2200      	movs	r2, #0
 8004644:	f103 38ff 	add.w	r8, r3, #4294967295
 8004648:	2300      	movs	r3, #0
 800464a:	f7fc f9ad 	bl	80009a8 <__aeabi_dcmpeq>
 800464e:	b9c0      	cbnz	r0, 8004682 <_printf_float+0x40e>
 8004650:	4643      	mov	r3, r8
 8004652:	463a      	mov	r2, r7
 8004654:	4659      	mov	r1, fp
 8004656:	4628      	mov	r0, r5
 8004658:	47b0      	blx	r6
 800465a:	3001      	adds	r0, #1
 800465c:	d10d      	bne.n	800467a <_printf_float+0x406>
 800465e:	e660      	b.n	8004322 <_printf_float+0xae>
 8004660:	2301      	movs	r3, #1
 8004662:	4642      	mov	r2, r8
 8004664:	4659      	mov	r1, fp
 8004666:	4628      	mov	r0, r5
 8004668:	47b0      	blx	r6
 800466a:	3001      	adds	r0, #1
 800466c:	f43f ae59 	beq.w	8004322 <_printf_float+0xae>
 8004670:	3701      	adds	r7, #1
 8004672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004674:	3b01      	subs	r3, #1
 8004676:	42bb      	cmp	r3, r7
 8004678:	dcf2      	bgt.n	8004660 <_printf_float+0x3ec>
 800467a:	464b      	mov	r3, r9
 800467c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004680:	e6e4      	b.n	800444c <_printf_float+0x1d8>
 8004682:	2700      	movs	r7, #0
 8004684:	f104 081a 	add.w	r8, r4, #26
 8004688:	e7f3      	b.n	8004672 <_printf_float+0x3fe>
 800468a:	2301      	movs	r3, #1
 800468c:	e7e1      	b.n	8004652 <_printf_float+0x3de>
 800468e:	2301      	movs	r3, #1
 8004690:	4642      	mov	r2, r8
 8004692:	4659      	mov	r1, fp
 8004694:	4628      	mov	r0, r5
 8004696:	47b0      	blx	r6
 8004698:	3001      	adds	r0, #1
 800469a:	f43f ae42 	beq.w	8004322 <_printf_float+0xae>
 800469e:	3701      	adds	r7, #1
 80046a0:	68e3      	ldr	r3, [r4, #12]
 80046a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	42bb      	cmp	r3, r7
 80046a8:	dcf1      	bgt.n	800468e <_printf_float+0x41a>
 80046aa:	e702      	b.n	80044b2 <_printf_float+0x23e>
 80046ac:	2700      	movs	r7, #0
 80046ae:	f104 0819 	add.w	r8, r4, #25
 80046b2:	e7f5      	b.n	80046a0 <_printf_float+0x42c>
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f43f ae94 	beq.w	80043e2 <_printf_float+0x16e>
 80046ba:	f04f 0c00 	mov.w	ip, #0
 80046be:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80046c2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80046c6:	6022      	str	r2, [r4, #0]
 80046c8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80046cc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	463a      	mov	r2, r7
 80046d4:	464b      	mov	r3, r9
 80046d6:	4628      	mov	r0, r5
 80046d8:	f7ff fd3a 	bl	8004150 <__cvt>
 80046dc:	4607      	mov	r7, r0
 80046de:	e64f      	b.n	8004380 <_printf_float+0x10c>

080046e0 <_printf_common>:
 80046e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e4:	4691      	mov	r9, r2
 80046e6:	461f      	mov	r7, r3
 80046e8:	688a      	ldr	r2, [r1, #8]
 80046ea:	690b      	ldr	r3, [r1, #16]
 80046ec:	4606      	mov	r6, r0
 80046ee:	4293      	cmp	r3, r2
 80046f0:	bfb8      	it	lt
 80046f2:	4613      	movlt	r3, r2
 80046f4:	f8c9 3000 	str.w	r3, [r9]
 80046f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046fc:	460c      	mov	r4, r1
 80046fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004702:	b112      	cbz	r2, 800470a <_printf_common+0x2a>
 8004704:	3301      	adds	r3, #1
 8004706:	f8c9 3000 	str.w	r3, [r9]
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	0699      	lsls	r1, r3, #26
 800470e:	bf42      	ittt	mi
 8004710:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004714:	3302      	addmi	r3, #2
 8004716:	f8c9 3000 	strmi.w	r3, [r9]
 800471a:	6825      	ldr	r5, [r4, #0]
 800471c:	f015 0506 	ands.w	r5, r5, #6
 8004720:	d107      	bne.n	8004732 <_printf_common+0x52>
 8004722:	f104 0a19 	add.w	sl, r4, #25
 8004726:	68e3      	ldr	r3, [r4, #12]
 8004728:	f8d9 2000 	ldr.w	r2, [r9]
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	42ab      	cmp	r3, r5
 8004730:	dc29      	bgt.n	8004786 <_printf_common+0xa6>
 8004732:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004736:	6822      	ldr	r2, [r4, #0]
 8004738:	3300      	adds	r3, #0
 800473a:	bf18      	it	ne
 800473c:	2301      	movne	r3, #1
 800473e:	0692      	lsls	r2, r2, #26
 8004740:	d42e      	bmi.n	80047a0 <_printf_common+0xc0>
 8004742:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004746:	4639      	mov	r1, r7
 8004748:	4630      	mov	r0, r6
 800474a:	47c0      	blx	r8
 800474c:	3001      	adds	r0, #1
 800474e:	d021      	beq.n	8004794 <_printf_common+0xb4>
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	68e5      	ldr	r5, [r4, #12]
 8004754:	f003 0306 	and.w	r3, r3, #6
 8004758:	2b04      	cmp	r3, #4
 800475a:	bf18      	it	ne
 800475c:	2500      	movne	r5, #0
 800475e:	f8d9 2000 	ldr.w	r2, [r9]
 8004762:	f04f 0900 	mov.w	r9, #0
 8004766:	bf08      	it	eq
 8004768:	1aad      	subeq	r5, r5, r2
 800476a:	68a3      	ldr	r3, [r4, #8]
 800476c:	6922      	ldr	r2, [r4, #16]
 800476e:	bf08      	it	eq
 8004770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004774:	4293      	cmp	r3, r2
 8004776:	bfc4      	itt	gt
 8004778:	1a9b      	subgt	r3, r3, r2
 800477a:	18ed      	addgt	r5, r5, r3
 800477c:	341a      	adds	r4, #26
 800477e:	454d      	cmp	r5, r9
 8004780:	d11a      	bne.n	80047b8 <_printf_common+0xd8>
 8004782:	2000      	movs	r0, #0
 8004784:	e008      	b.n	8004798 <_printf_common+0xb8>
 8004786:	2301      	movs	r3, #1
 8004788:	4652      	mov	r2, sl
 800478a:	4639      	mov	r1, r7
 800478c:	4630      	mov	r0, r6
 800478e:	47c0      	blx	r8
 8004790:	3001      	adds	r0, #1
 8004792:	d103      	bne.n	800479c <_printf_common+0xbc>
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479c:	3501      	adds	r5, #1
 800479e:	e7c2      	b.n	8004726 <_printf_common+0x46>
 80047a0:	2030      	movs	r0, #48	; 0x30
 80047a2:	18e1      	adds	r1, r4, r3
 80047a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047ae:	4422      	add	r2, r4
 80047b0:	3302      	adds	r3, #2
 80047b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047b6:	e7c4      	b.n	8004742 <_printf_common+0x62>
 80047b8:	2301      	movs	r3, #1
 80047ba:	4622      	mov	r2, r4
 80047bc:	4639      	mov	r1, r7
 80047be:	4630      	mov	r0, r6
 80047c0:	47c0      	blx	r8
 80047c2:	3001      	adds	r0, #1
 80047c4:	d0e6      	beq.n	8004794 <_printf_common+0xb4>
 80047c6:	f109 0901 	add.w	r9, r9, #1
 80047ca:	e7d8      	b.n	800477e <_printf_common+0x9e>

080047cc <_printf_i>:
 80047cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80047d4:	460c      	mov	r4, r1
 80047d6:	7e09      	ldrb	r1, [r1, #24]
 80047d8:	b085      	sub	sp, #20
 80047da:	296e      	cmp	r1, #110	; 0x6e
 80047dc:	4617      	mov	r7, r2
 80047de:	4606      	mov	r6, r0
 80047e0:	4698      	mov	r8, r3
 80047e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047e4:	f000 80b3 	beq.w	800494e <_printf_i+0x182>
 80047e8:	d822      	bhi.n	8004830 <_printf_i+0x64>
 80047ea:	2963      	cmp	r1, #99	; 0x63
 80047ec:	d036      	beq.n	800485c <_printf_i+0x90>
 80047ee:	d80a      	bhi.n	8004806 <_printf_i+0x3a>
 80047f0:	2900      	cmp	r1, #0
 80047f2:	f000 80b9 	beq.w	8004968 <_printf_i+0x19c>
 80047f6:	2958      	cmp	r1, #88	; 0x58
 80047f8:	f000 8083 	beq.w	8004902 <_printf_i+0x136>
 80047fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004800:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004804:	e032      	b.n	800486c <_printf_i+0xa0>
 8004806:	2964      	cmp	r1, #100	; 0x64
 8004808:	d001      	beq.n	800480e <_printf_i+0x42>
 800480a:	2969      	cmp	r1, #105	; 0x69
 800480c:	d1f6      	bne.n	80047fc <_printf_i+0x30>
 800480e:	6820      	ldr	r0, [r4, #0]
 8004810:	6813      	ldr	r3, [r2, #0]
 8004812:	0605      	lsls	r5, r0, #24
 8004814:	f103 0104 	add.w	r1, r3, #4
 8004818:	d52a      	bpl.n	8004870 <_printf_i+0xa4>
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6011      	str	r1, [r2, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	da03      	bge.n	800482a <_printf_i+0x5e>
 8004822:	222d      	movs	r2, #45	; 0x2d
 8004824:	425b      	negs	r3, r3
 8004826:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800482a:	486f      	ldr	r0, [pc, #444]	; (80049e8 <_printf_i+0x21c>)
 800482c:	220a      	movs	r2, #10
 800482e:	e039      	b.n	80048a4 <_printf_i+0xd8>
 8004830:	2973      	cmp	r1, #115	; 0x73
 8004832:	f000 809d 	beq.w	8004970 <_printf_i+0x1a4>
 8004836:	d808      	bhi.n	800484a <_printf_i+0x7e>
 8004838:	296f      	cmp	r1, #111	; 0x6f
 800483a:	d020      	beq.n	800487e <_printf_i+0xb2>
 800483c:	2970      	cmp	r1, #112	; 0x70
 800483e:	d1dd      	bne.n	80047fc <_printf_i+0x30>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	f043 0320 	orr.w	r3, r3, #32
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	e003      	b.n	8004852 <_printf_i+0x86>
 800484a:	2975      	cmp	r1, #117	; 0x75
 800484c:	d017      	beq.n	800487e <_printf_i+0xb2>
 800484e:	2978      	cmp	r1, #120	; 0x78
 8004850:	d1d4      	bne.n	80047fc <_printf_i+0x30>
 8004852:	2378      	movs	r3, #120	; 0x78
 8004854:	4865      	ldr	r0, [pc, #404]	; (80049ec <_printf_i+0x220>)
 8004856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800485a:	e055      	b.n	8004908 <_printf_i+0x13c>
 800485c:	6813      	ldr	r3, [r2, #0]
 800485e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004862:	1d19      	adds	r1, r3, #4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6011      	str	r1, [r2, #0]
 8004868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800486c:	2301      	movs	r3, #1
 800486e:	e08c      	b.n	800498a <_printf_i+0x1be>
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004876:	6011      	str	r1, [r2, #0]
 8004878:	bf18      	it	ne
 800487a:	b21b      	sxthne	r3, r3
 800487c:	e7cf      	b.n	800481e <_printf_i+0x52>
 800487e:	6813      	ldr	r3, [r2, #0]
 8004880:	6825      	ldr	r5, [r4, #0]
 8004882:	1d18      	adds	r0, r3, #4
 8004884:	6010      	str	r0, [r2, #0]
 8004886:	0628      	lsls	r0, r5, #24
 8004888:	d501      	bpl.n	800488e <_printf_i+0xc2>
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	e002      	b.n	8004894 <_printf_i+0xc8>
 800488e:	0668      	lsls	r0, r5, #25
 8004890:	d5fb      	bpl.n	800488a <_printf_i+0xbe>
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	296f      	cmp	r1, #111	; 0x6f
 8004896:	bf14      	ite	ne
 8004898:	220a      	movne	r2, #10
 800489a:	2208      	moveq	r2, #8
 800489c:	4852      	ldr	r0, [pc, #328]	; (80049e8 <_printf_i+0x21c>)
 800489e:	2100      	movs	r1, #0
 80048a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048a4:	6865      	ldr	r5, [r4, #4]
 80048a6:	2d00      	cmp	r5, #0
 80048a8:	60a5      	str	r5, [r4, #8]
 80048aa:	f2c0 8095 	blt.w	80049d8 <_printf_i+0x20c>
 80048ae:	6821      	ldr	r1, [r4, #0]
 80048b0:	f021 0104 	bic.w	r1, r1, #4
 80048b4:	6021      	str	r1, [r4, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d13d      	bne.n	8004936 <_printf_i+0x16a>
 80048ba:	2d00      	cmp	r5, #0
 80048bc:	f040 808e 	bne.w	80049dc <_printf_i+0x210>
 80048c0:	4665      	mov	r5, ip
 80048c2:	2a08      	cmp	r2, #8
 80048c4:	d10b      	bne.n	80048de <_printf_i+0x112>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	07db      	lsls	r3, r3, #31
 80048ca:	d508      	bpl.n	80048de <_printf_i+0x112>
 80048cc:	6923      	ldr	r3, [r4, #16]
 80048ce:	6862      	ldr	r2, [r4, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	bfde      	ittt	le
 80048d4:	2330      	movle	r3, #48	; 0x30
 80048d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048de:	ebac 0305 	sub.w	r3, ip, r5
 80048e2:	6123      	str	r3, [r4, #16]
 80048e4:	f8cd 8000 	str.w	r8, [sp]
 80048e8:	463b      	mov	r3, r7
 80048ea:	aa03      	add	r2, sp, #12
 80048ec:	4621      	mov	r1, r4
 80048ee:	4630      	mov	r0, r6
 80048f0:	f7ff fef6 	bl	80046e0 <_printf_common>
 80048f4:	3001      	adds	r0, #1
 80048f6:	d14d      	bne.n	8004994 <_printf_i+0x1c8>
 80048f8:	f04f 30ff 	mov.w	r0, #4294967295
 80048fc:	b005      	add	sp, #20
 80048fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004902:	4839      	ldr	r0, [pc, #228]	; (80049e8 <_printf_i+0x21c>)
 8004904:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004908:	6813      	ldr	r3, [r2, #0]
 800490a:	6821      	ldr	r1, [r4, #0]
 800490c:	1d1d      	adds	r5, r3, #4
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6015      	str	r5, [r2, #0]
 8004912:	060a      	lsls	r2, r1, #24
 8004914:	d50b      	bpl.n	800492e <_printf_i+0x162>
 8004916:	07ca      	lsls	r2, r1, #31
 8004918:	bf44      	itt	mi
 800491a:	f041 0120 	orrmi.w	r1, r1, #32
 800491e:	6021      	strmi	r1, [r4, #0]
 8004920:	b91b      	cbnz	r3, 800492a <_printf_i+0x15e>
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	f022 0220 	bic.w	r2, r2, #32
 8004928:	6022      	str	r2, [r4, #0]
 800492a:	2210      	movs	r2, #16
 800492c:	e7b7      	b.n	800489e <_printf_i+0xd2>
 800492e:	064d      	lsls	r5, r1, #25
 8004930:	bf48      	it	mi
 8004932:	b29b      	uxthmi	r3, r3
 8004934:	e7ef      	b.n	8004916 <_printf_i+0x14a>
 8004936:	4665      	mov	r5, ip
 8004938:	fbb3 f1f2 	udiv	r1, r3, r2
 800493c:	fb02 3311 	mls	r3, r2, r1, r3
 8004940:	5cc3      	ldrb	r3, [r0, r3]
 8004942:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004946:	460b      	mov	r3, r1
 8004948:	2900      	cmp	r1, #0
 800494a:	d1f5      	bne.n	8004938 <_printf_i+0x16c>
 800494c:	e7b9      	b.n	80048c2 <_printf_i+0xf6>
 800494e:	6813      	ldr	r3, [r2, #0]
 8004950:	6825      	ldr	r5, [r4, #0]
 8004952:	1d18      	adds	r0, r3, #4
 8004954:	6961      	ldr	r1, [r4, #20]
 8004956:	6010      	str	r0, [r2, #0]
 8004958:	0628      	lsls	r0, r5, #24
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	d501      	bpl.n	8004962 <_printf_i+0x196>
 800495e:	6019      	str	r1, [r3, #0]
 8004960:	e002      	b.n	8004968 <_printf_i+0x19c>
 8004962:	066a      	lsls	r2, r5, #25
 8004964:	d5fb      	bpl.n	800495e <_printf_i+0x192>
 8004966:	8019      	strh	r1, [r3, #0]
 8004968:	2300      	movs	r3, #0
 800496a:	4665      	mov	r5, ip
 800496c:	6123      	str	r3, [r4, #16]
 800496e:	e7b9      	b.n	80048e4 <_printf_i+0x118>
 8004970:	6813      	ldr	r3, [r2, #0]
 8004972:	1d19      	adds	r1, r3, #4
 8004974:	6011      	str	r1, [r2, #0]
 8004976:	681d      	ldr	r5, [r3, #0]
 8004978:	6862      	ldr	r2, [r4, #4]
 800497a:	2100      	movs	r1, #0
 800497c:	4628      	mov	r0, r5
 800497e:	f000 feb1 	bl	80056e4 <memchr>
 8004982:	b108      	cbz	r0, 8004988 <_printf_i+0x1bc>
 8004984:	1b40      	subs	r0, r0, r5
 8004986:	6060      	str	r0, [r4, #4]
 8004988:	6863      	ldr	r3, [r4, #4]
 800498a:	6123      	str	r3, [r4, #16]
 800498c:	2300      	movs	r3, #0
 800498e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004992:	e7a7      	b.n	80048e4 <_printf_i+0x118>
 8004994:	6923      	ldr	r3, [r4, #16]
 8004996:	462a      	mov	r2, r5
 8004998:	4639      	mov	r1, r7
 800499a:	4630      	mov	r0, r6
 800499c:	47c0      	blx	r8
 800499e:	3001      	adds	r0, #1
 80049a0:	d0aa      	beq.n	80048f8 <_printf_i+0x12c>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	079b      	lsls	r3, r3, #30
 80049a6:	d413      	bmi.n	80049d0 <_printf_i+0x204>
 80049a8:	68e0      	ldr	r0, [r4, #12]
 80049aa:	9b03      	ldr	r3, [sp, #12]
 80049ac:	4298      	cmp	r0, r3
 80049ae:	bfb8      	it	lt
 80049b0:	4618      	movlt	r0, r3
 80049b2:	e7a3      	b.n	80048fc <_printf_i+0x130>
 80049b4:	2301      	movs	r3, #1
 80049b6:	464a      	mov	r2, r9
 80049b8:	4639      	mov	r1, r7
 80049ba:	4630      	mov	r0, r6
 80049bc:	47c0      	blx	r8
 80049be:	3001      	adds	r0, #1
 80049c0:	d09a      	beq.n	80048f8 <_printf_i+0x12c>
 80049c2:	3501      	adds	r5, #1
 80049c4:	68e3      	ldr	r3, [r4, #12]
 80049c6:	9a03      	ldr	r2, [sp, #12]
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	42ab      	cmp	r3, r5
 80049cc:	dcf2      	bgt.n	80049b4 <_printf_i+0x1e8>
 80049ce:	e7eb      	b.n	80049a8 <_printf_i+0x1dc>
 80049d0:	2500      	movs	r5, #0
 80049d2:	f104 0919 	add.w	r9, r4, #25
 80049d6:	e7f5      	b.n	80049c4 <_printf_i+0x1f8>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1ac      	bne.n	8004936 <_printf_i+0x16a>
 80049dc:	7803      	ldrb	r3, [r0, #0]
 80049de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049e6:	e76c      	b.n	80048c2 <_printf_i+0xf6>
 80049e8:	08006246 	.word	0x08006246
 80049ec:	08006257 	.word	0x08006257

080049f0 <siprintf>:
 80049f0:	b40e      	push	{r1, r2, r3}
 80049f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049f6:	b500      	push	{lr}
 80049f8:	b09c      	sub	sp, #112	; 0x70
 80049fa:	ab1d      	add	r3, sp, #116	; 0x74
 80049fc:	9002      	str	r0, [sp, #8]
 80049fe:	9006      	str	r0, [sp, #24]
 8004a00:	9107      	str	r1, [sp, #28]
 8004a02:	9104      	str	r1, [sp, #16]
 8004a04:	4808      	ldr	r0, [pc, #32]	; (8004a28 <siprintf+0x38>)
 8004a06:	4909      	ldr	r1, [pc, #36]	; (8004a2c <siprintf+0x3c>)
 8004a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a0c:	9105      	str	r1, [sp, #20]
 8004a0e:	6800      	ldr	r0, [r0, #0]
 8004a10:	a902      	add	r1, sp, #8
 8004a12:	9301      	str	r3, [sp, #4]
 8004a14:	f001 fa6a 	bl	8005eec <_svfiprintf_r>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	9b02      	ldr	r3, [sp, #8]
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	b01c      	add	sp, #112	; 0x70
 8004a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a24:	b003      	add	sp, #12
 8004a26:	4770      	bx	lr
 8004a28:	2000012c 	.word	0x2000012c
 8004a2c:	ffff0208 	.word	0xffff0208

08004a30 <quorem>:
 8004a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	6903      	ldr	r3, [r0, #16]
 8004a36:	690c      	ldr	r4, [r1, #16]
 8004a38:	4680      	mov	r8, r0
 8004a3a:	42a3      	cmp	r3, r4
 8004a3c:	f2c0 8084 	blt.w	8004b48 <quorem+0x118>
 8004a40:	3c01      	subs	r4, #1
 8004a42:	f101 0714 	add.w	r7, r1, #20
 8004a46:	f100 0614 	add.w	r6, r0, #20
 8004a4a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004a4e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004a52:	3501      	adds	r5, #1
 8004a54:	fbb0 f5f5 	udiv	r5, r0, r5
 8004a58:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004a5c:	eb06 030c 	add.w	r3, r6, ip
 8004a60:	eb07 090c 	add.w	r9, r7, ip
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	b39d      	cbz	r5, 8004ad0 <quorem+0xa0>
 8004a68:	f04f 0a00 	mov.w	sl, #0
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	46b6      	mov	lr, r6
 8004a70:	46d3      	mov	fp, sl
 8004a72:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a76:	b293      	uxth	r3, r2
 8004a78:	fb05 a303 	mla	r3, r5, r3, sl
 8004a7c:	0c12      	lsrs	r2, r2, #16
 8004a7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a82:	fb05 a202 	mla	r2, r5, r2, sl
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	ebab 0303 	sub.w	r3, fp, r3
 8004a8c:	f8de b000 	ldr.w	fp, [lr]
 8004a90:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004a94:	fa1f fb8b 	uxth.w	fp, fp
 8004a98:	445b      	add	r3, fp
 8004a9a:	fa1f fb82 	uxth.w	fp, r2
 8004a9e:	f8de 2000 	ldr.w	r2, [lr]
 8004aa2:	4581      	cmp	r9, r0
 8004aa4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004aa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ab2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004ab6:	f84e 3b04 	str.w	r3, [lr], #4
 8004aba:	d2da      	bcs.n	8004a72 <quorem+0x42>
 8004abc:	f856 300c 	ldr.w	r3, [r6, ip]
 8004ac0:	b933      	cbnz	r3, 8004ad0 <quorem+0xa0>
 8004ac2:	9b01      	ldr	r3, [sp, #4]
 8004ac4:	3b04      	subs	r3, #4
 8004ac6:	429e      	cmp	r6, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	d331      	bcc.n	8004b30 <quorem+0x100>
 8004acc:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	f001 f835 	bl	8005b40 <__mcmp>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	db26      	blt.n	8004b28 <quorem+0xf8>
 8004ada:	4630      	mov	r0, r6
 8004adc:	f04f 0c00 	mov.w	ip, #0
 8004ae0:	3501      	adds	r5, #1
 8004ae2:	f857 1b04 	ldr.w	r1, [r7], #4
 8004ae6:	f8d0 e000 	ldr.w	lr, [r0]
 8004aea:	b28b      	uxth	r3, r1
 8004aec:	ebac 0303 	sub.w	r3, ip, r3
 8004af0:	fa1f f28e 	uxth.w	r2, lr
 8004af4:	4413      	add	r3, r2
 8004af6:	0c0a      	lsrs	r2, r1, #16
 8004af8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004afc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b06:	45b9      	cmp	r9, r7
 8004b08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b0c:	f840 3b04 	str.w	r3, [r0], #4
 8004b10:	d2e7      	bcs.n	8004ae2 <quorem+0xb2>
 8004b12:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004b16:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004b1a:	b92a      	cbnz	r2, 8004b28 <quorem+0xf8>
 8004b1c:	3b04      	subs	r3, #4
 8004b1e:	429e      	cmp	r6, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	d30b      	bcc.n	8004b3c <quorem+0x10c>
 8004b24:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b28:	4628      	mov	r0, r5
 8004b2a:	b003      	add	sp, #12
 8004b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	3b04      	subs	r3, #4
 8004b34:	2a00      	cmp	r2, #0
 8004b36:	d1c9      	bne.n	8004acc <quorem+0x9c>
 8004b38:	3c01      	subs	r4, #1
 8004b3a:	e7c4      	b.n	8004ac6 <quorem+0x96>
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	3b04      	subs	r3, #4
 8004b40:	2a00      	cmp	r2, #0
 8004b42:	d1ef      	bne.n	8004b24 <quorem+0xf4>
 8004b44:	3c01      	subs	r4, #1
 8004b46:	e7ea      	b.n	8004b1e <quorem+0xee>
 8004b48:	2000      	movs	r0, #0
 8004b4a:	e7ee      	b.n	8004b2a <quorem+0xfa>
 8004b4c:	0000      	movs	r0, r0
	...

08004b50 <_dtoa_r>:
 8004b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b54:	4616      	mov	r6, r2
 8004b56:	461f      	mov	r7, r3
 8004b58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b5a:	b095      	sub	sp, #84	; 0x54
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004b62:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004b66:	b93d      	cbnz	r5, 8004b78 <_dtoa_r+0x28>
 8004b68:	2010      	movs	r0, #16
 8004b6a:	f000 fdb3 	bl	80056d4 <malloc>
 8004b6e:	6260      	str	r0, [r4, #36]	; 0x24
 8004b70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b74:	6005      	str	r5, [r0, #0]
 8004b76:	60c5      	str	r5, [r0, #12]
 8004b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b7a:	6819      	ldr	r1, [r3, #0]
 8004b7c:	b151      	cbz	r1, 8004b94 <_dtoa_r+0x44>
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	2301      	movs	r3, #1
 8004b82:	4093      	lsls	r3, r2
 8004b84:	604a      	str	r2, [r1, #4]
 8004b86:	608b      	str	r3, [r1, #8]
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f000 fdf8 	bl	800577e <_Bfree>
 8004b8e:	2200      	movs	r2, #0
 8004b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	1e3b      	subs	r3, r7, #0
 8004b96:	bfaf      	iteee	ge
 8004b98:	2300      	movge	r3, #0
 8004b9a:	2201      	movlt	r2, #1
 8004b9c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ba0:	9303      	strlt	r3, [sp, #12]
 8004ba2:	bfac      	ite	ge
 8004ba4:	f8c8 3000 	strge.w	r3, [r8]
 8004ba8:	f8c8 2000 	strlt.w	r2, [r8]
 8004bac:	4bae      	ldr	r3, [pc, #696]	; (8004e68 <_dtoa_r+0x318>)
 8004bae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004bb2:	ea33 0308 	bics.w	r3, r3, r8
 8004bb6:	d11b      	bne.n	8004bf0 <_dtoa_r+0xa0>
 8004bb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	9b02      	ldr	r3, [sp, #8]
 8004bc2:	b923      	cbnz	r3, 8004bce <_dtoa_r+0x7e>
 8004bc4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	f000 8545 	beq.w	8005658 <_dtoa_r+0xb08>
 8004bce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bd0:	b953      	cbnz	r3, 8004be8 <_dtoa_r+0x98>
 8004bd2:	4ba6      	ldr	r3, [pc, #664]	; (8004e6c <_dtoa_r+0x31c>)
 8004bd4:	e021      	b.n	8004c1a <_dtoa_r+0xca>
 8004bd6:	4ba6      	ldr	r3, [pc, #664]	; (8004e70 <_dtoa_r+0x320>)
 8004bd8:	9306      	str	r3, [sp, #24]
 8004bda:	3308      	adds	r3, #8
 8004bdc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	9806      	ldr	r0, [sp, #24]
 8004be2:	b015      	add	sp, #84	; 0x54
 8004be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be8:	4ba0      	ldr	r3, [pc, #640]	; (8004e6c <_dtoa_r+0x31c>)
 8004bea:	9306      	str	r3, [sp, #24]
 8004bec:	3303      	adds	r3, #3
 8004bee:	e7f5      	b.n	8004bdc <_dtoa_r+0x8c>
 8004bf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	4639      	mov	r1, r7
 8004bfc:	f7fb fed4 	bl	80009a8 <__aeabi_dcmpeq>
 8004c00:	4682      	mov	sl, r0
 8004c02:	b160      	cbz	r0, 8004c1e <_dtoa_r+0xce>
 8004c04:	2301      	movs	r3, #1
 8004c06:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8520 	beq.w	8005652 <_dtoa_r+0xb02>
 8004c12:	4b98      	ldr	r3, [pc, #608]	; (8004e74 <_dtoa_r+0x324>)
 8004c14:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	9306      	str	r3, [sp, #24]
 8004c1c:	e7e0      	b.n	8004be0 <_dtoa_r+0x90>
 8004c1e:	ab12      	add	r3, sp, #72	; 0x48
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	ab13      	add	r3, sp, #76	; 0x4c
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	4632      	mov	r2, r6
 8004c28:	463b      	mov	r3, r7
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f001 f800 	bl	8005c30 <__d2b>
 8004c30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004c34:	4683      	mov	fp, r0
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	d07d      	beq.n	8004d36 <_dtoa_r+0x1e6>
 8004c3a:	46b0      	mov	r8, r6
 8004c3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004c40:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004c44:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004c48:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c4c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004c50:	2200      	movs	r2, #0
 8004c52:	4b89      	ldr	r3, [pc, #548]	; (8004e78 <_dtoa_r+0x328>)
 8004c54:	4640      	mov	r0, r8
 8004c56:	4649      	mov	r1, r9
 8004c58:	f7fb fa86 	bl	8000168 <__aeabi_dsub>
 8004c5c:	a37c      	add	r3, pc, #496	; (adr r3, 8004e50 <_dtoa_r+0x300>)
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	f7fb fc39 	bl	80004d8 <__aeabi_dmul>
 8004c66:	a37c      	add	r3, pc, #496	; (adr r3, 8004e58 <_dtoa_r+0x308>)
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f7fb fa7e 	bl	800016c <__adddf3>
 8004c70:	4606      	mov	r6, r0
 8004c72:	4628      	mov	r0, r5
 8004c74:	460f      	mov	r7, r1
 8004c76:	f7fb fbc5 	bl	8000404 <__aeabi_i2d>
 8004c7a:	a379      	add	r3, pc, #484	; (adr r3, 8004e60 <_dtoa_r+0x310>)
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	f7fb fc2a 	bl	80004d8 <__aeabi_dmul>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4630      	mov	r0, r6
 8004c8a:	4639      	mov	r1, r7
 8004c8c:	f7fb fa6e 	bl	800016c <__adddf3>
 8004c90:	4606      	mov	r6, r0
 8004c92:	460f      	mov	r7, r1
 8004c94:	f7fb fed0 	bl	8000a38 <__aeabi_d2iz>
 8004c98:	2200      	movs	r2, #0
 8004c9a:	4682      	mov	sl, r0
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	4639      	mov	r1, r7
 8004ca2:	f7fb fe8b 	bl	80009bc <__aeabi_dcmplt>
 8004ca6:	b148      	cbz	r0, 8004cbc <_dtoa_r+0x16c>
 8004ca8:	4650      	mov	r0, sl
 8004caa:	f7fb fbab 	bl	8000404 <__aeabi_i2d>
 8004cae:	4632      	mov	r2, r6
 8004cb0:	463b      	mov	r3, r7
 8004cb2:	f7fb fe79 	bl	80009a8 <__aeabi_dcmpeq>
 8004cb6:	b908      	cbnz	r0, 8004cbc <_dtoa_r+0x16c>
 8004cb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cbc:	f1ba 0f16 	cmp.w	sl, #22
 8004cc0:	d85a      	bhi.n	8004d78 <_dtoa_r+0x228>
 8004cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cc6:	496d      	ldr	r1, [pc, #436]	; (8004e7c <_dtoa_r+0x32c>)
 8004cc8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cd0:	f7fb fe92 	bl	80009f8 <__aeabi_dcmpgt>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d051      	beq.n	8004d7c <_dtoa_r+0x22c>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cde:	930d      	str	r3, [sp, #52]	; 0x34
 8004ce0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ce2:	1b5d      	subs	r5, r3, r5
 8004ce4:	1e6b      	subs	r3, r5, #1
 8004ce6:	9307      	str	r3, [sp, #28]
 8004ce8:	bf43      	ittte	mi
 8004cea:	2300      	movmi	r3, #0
 8004cec:	f1c5 0901 	rsbmi	r9, r5, #1
 8004cf0:	9307      	strmi	r3, [sp, #28]
 8004cf2:	f04f 0900 	movpl.w	r9, #0
 8004cf6:	f1ba 0f00 	cmp.w	sl, #0
 8004cfa:	db41      	blt.n	8004d80 <_dtoa_r+0x230>
 8004cfc:	9b07      	ldr	r3, [sp, #28]
 8004cfe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004d02:	4453      	add	r3, sl
 8004d04:	9307      	str	r3, [sp, #28]
 8004d06:	2300      	movs	r3, #0
 8004d08:	9308      	str	r3, [sp, #32]
 8004d0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d0c:	2b09      	cmp	r3, #9
 8004d0e:	f200 808f 	bhi.w	8004e30 <_dtoa_r+0x2e0>
 8004d12:	2b05      	cmp	r3, #5
 8004d14:	bfc4      	itt	gt
 8004d16:	3b04      	subgt	r3, #4
 8004d18:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004d1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d1c:	bfc8      	it	gt
 8004d1e:	2500      	movgt	r5, #0
 8004d20:	f1a3 0302 	sub.w	r3, r3, #2
 8004d24:	bfd8      	it	le
 8004d26:	2501      	movle	r5, #1
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	f200 808d 	bhi.w	8004e48 <_dtoa_r+0x2f8>
 8004d2e:	e8df f003 	tbb	[pc, r3]
 8004d32:	7d7b      	.short	0x7d7b
 8004d34:	6f2f      	.short	0x6f2f
 8004d36:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004d3a:	441d      	add	r5, r3
 8004d3c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004d40:	2820      	cmp	r0, #32
 8004d42:	dd13      	ble.n	8004d6c <_dtoa_r+0x21c>
 8004d44:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004d48:	9b02      	ldr	r3, [sp, #8]
 8004d4a:	fa08 f800 	lsl.w	r8, r8, r0
 8004d4e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004d52:	fa23 f000 	lsr.w	r0, r3, r0
 8004d56:	ea48 0000 	orr.w	r0, r8, r0
 8004d5a:	f7fb fb43 	bl	80003e4 <__aeabi_ui2d>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4680      	mov	r8, r0
 8004d62:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004d66:	3d01      	subs	r5, #1
 8004d68:	9310      	str	r3, [sp, #64]	; 0x40
 8004d6a:	e771      	b.n	8004c50 <_dtoa_r+0x100>
 8004d6c:	9b02      	ldr	r3, [sp, #8]
 8004d6e:	f1c0 0020 	rsb	r0, r0, #32
 8004d72:	fa03 f000 	lsl.w	r0, r3, r0
 8004d76:	e7f0      	b.n	8004d5a <_dtoa_r+0x20a>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e7b0      	b.n	8004cde <_dtoa_r+0x18e>
 8004d7c:	900d      	str	r0, [sp, #52]	; 0x34
 8004d7e:	e7af      	b.n	8004ce0 <_dtoa_r+0x190>
 8004d80:	f1ca 0300 	rsb	r3, sl, #0
 8004d84:	9308      	str	r3, [sp, #32]
 8004d86:	2300      	movs	r3, #0
 8004d88:	eba9 090a 	sub.w	r9, r9, sl
 8004d8c:	930c      	str	r3, [sp, #48]	; 0x30
 8004d8e:	e7bc      	b.n	8004d0a <_dtoa_r+0x1ba>
 8004d90:	2301      	movs	r3, #1
 8004d92:	9309      	str	r3, [sp, #36]	; 0x24
 8004d94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	dd74      	ble.n	8004e84 <_dtoa_r+0x334>
 8004d9a:	4698      	mov	r8, r3
 8004d9c:	9304      	str	r3, [sp, #16]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004da2:	6072      	str	r2, [r6, #4]
 8004da4:	2204      	movs	r2, #4
 8004da6:	f102 0014 	add.w	r0, r2, #20
 8004daa:	4298      	cmp	r0, r3
 8004dac:	6871      	ldr	r1, [r6, #4]
 8004dae:	d96e      	bls.n	8004e8e <_dtoa_r+0x33e>
 8004db0:	4620      	mov	r0, r4
 8004db2:	f000 fcb0 	bl	8005716 <_Balloc>
 8004db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004db8:	6030      	str	r0, [r6, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f1b8 0f0e 	cmp.w	r8, #14
 8004dc0:	9306      	str	r3, [sp, #24]
 8004dc2:	f200 80ed 	bhi.w	8004fa0 <_dtoa_r+0x450>
 8004dc6:	2d00      	cmp	r5, #0
 8004dc8:	f000 80ea 	beq.w	8004fa0 <_dtoa_r+0x450>
 8004dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dd0:	f1ba 0f00 	cmp.w	sl, #0
 8004dd4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004dd8:	dd77      	ble.n	8004eca <_dtoa_r+0x37a>
 8004dda:	4a28      	ldr	r2, [pc, #160]	; (8004e7c <_dtoa_r+0x32c>)
 8004ddc:	f00a 030f 	and.w	r3, sl, #15
 8004de0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004de4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004de8:	06f0      	lsls	r0, r6, #27
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004df2:	d568      	bpl.n	8004ec6 <_dtoa_r+0x376>
 8004df4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004df8:	4b21      	ldr	r3, [pc, #132]	; (8004e80 <_dtoa_r+0x330>)
 8004dfa:	2503      	movs	r5, #3
 8004dfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e00:	f7fb fc94 	bl	800072c <__aeabi_ddiv>
 8004e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e08:	f006 060f 	and.w	r6, r6, #15
 8004e0c:	4f1c      	ldr	r7, [pc, #112]	; (8004e80 <_dtoa_r+0x330>)
 8004e0e:	e04f      	b.n	8004eb0 <_dtoa_r+0x360>
 8004e10:	2301      	movs	r3, #1
 8004e12:	9309      	str	r3, [sp, #36]	; 0x24
 8004e14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e16:	4453      	add	r3, sl
 8004e18:	f103 0801 	add.w	r8, r3, #1
 8004e1c:	9304      	str	r3, [sp, #16]
 8004e1e:	4643      	mov	r3, r8
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	bfb8      	it	lt
 8004e24:	2301      	movlt	r3, #1
 8004e26:	e7ba      	b.n	8004d9e <_dtoa_r+0x24e>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e7b2      	b.n	8004d92 <_dtoa_r+0x242>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e7f0      	b.n	8004e12 <_dtoa_r+0x2c2>
 8004e30:	2501      	movs	r5, #1
 8004e32:	2300      	movs	r3, #0
 8004e34:	9509      	str	r5, [sp, #36]	; 0x24
 8004e36:	931e      	str	r3, [sp, #120]	; 0x78
 8004e38:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	9304      	str	r3, [sp, #16]
 8004e40:	4698      	mov	r8, r3
 8004e42:	2312      	movs	r3, #18
 8004e44:	921f      	str	r2, [sp, #124]	; 0x7c
 8004e46:	e7aa      	b.n	8004d9e <_dtoa_r+0x24e>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e4c:	e7f4      	b.n	8004e38 <_dtoa_r+0x2e8>
 8004e4e:	bf00      	nop
 8004e50:	636f4361 	.word	0x636f4361
 8004e54:	3fd287a7 	.word	0x3fd287a7
 8004e58:	8b60c8b3 	.word	0x8b60c8b3
 8004e5c:	3fc68a28 	.word	0x3fc68a28
 8004e60:	509f79fb 	.word	0x509f79fb
 8004e64:	3fd34413 	.word	0x3fd34413
 8004e68:	7ff00000 	.word	0x7ff00000
 8004e6c:	08006271 	.word	0x08006271
 8004e70:	08006268 	.word	0x08006268
 8004e74:	08006245 	.word	0x08006245
 8004e78:	3ff80000 	.word	0x3ff80000
 8004e7c:	080062a0 	.word	0x080062a0
 8004e80:	08006278 	.word	0x08006278
 8004e84:	2301      	movs	r3, #1
 8004e86:	9304      	str	r3, [sp, #16]
 8004e88:	4698      	mov	r8, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	e7da      	b.n	8004e44 <_dtoa_r+0x2f4>
 8004e8e:	3101      	adds	r1, #1
 8004e90:	6071      	str	r1, [r6, #4]
 8004e92:	0052      	lsls	r2, r2, #1
 8004e94:	e787      	b.n	8004da6 <_dtoa_r+0x256>
 8004e96:	07f1      	lsls	r1, r6, #31
 8004e98:	d508      	bpl.n	8004eac <_dtoa_r+0x35c>
 8004e9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ea2:	f7fb fb19 	bl	80004d8 <__aeabi_dmul>
 8004ea6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004eaa:	3501      	adds	r5, #1
 8004eac:	1076      	asrs	r6, r6, #1
 8004eae:	3708      	adds	r7, #8
 8004eb0:	2e00      	cmp	r6, #0
 8004eb2:	d1f0      	bne.n	8004e96 <_dtoa_r+0x346>
 8004eb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ebc:	f7fb fc36 	bl	800072c <__aeabi_ddiv>
 8004ec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ec4:	e01b      	b.n	8004efe <_dtoa_r+0x3ae>
 8004ec6:	2502      	movs	r5, #2
 8004ec8:	e7a0      	b.n	8004e0c <_dtoa_r+0x2bc>
 8004eca:	f000 80a4 	beq.w	8005016 <_dtoa_r+0x4c6>
 8004ece:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004ed2:	f1ca 0600 	rsb	r6, sl, #0
 8004ed6:	4ba0      	ldr	r3, [pc, #640]	; (8005158 <_dtoa_r+0x608>)
 8004ed8:	f006 020f 	and.w	r2, r6, #15
 8004edc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f7fb faf8 	bl	80004d8 <__aeabi_dmul>
 8004ee8:	2502      	movs	r5, #2
 8004eea:	2300      	movs	r3, #0
 8004eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ef0:	4f9a      	ldr	r7, [pc, #616]	; (800515c <_dtoa_r+0x60c>)
 8004ef2:	1136      	asrs	r6, r6, #4
 8004ef4:	2e00      	cmp	r6, #0
 8004ef6:	f040 8083 	bne.w	8005000 <_dtoa_r+0x4b0>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e0      	bne.n	8004ec0 <_dtoa_r+0x370>
 8004efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 808a 	beq.w	800501a <_dtoa_r+0x4ca>
 8004f06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f0a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f12:	2200      	movs	r2, #0
 8004f14:	4b92      	ldr	r3, [pc, #584]	; (8005160 <_dtoa_r+0x610>)
 8004f16:	f7fb fd51 	bl	80009bc <__aeabi_dcmplt>
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	d07d      	beq.n	800501a <_dtoa_r+0x4ca>
 8004f1e:	f1b8 0f00 	cmp.w	r8, #0
 8004f22:	d07a      	beq.n	800501a <_dtoa_r+0x4ca>
 8004f24:	9b04      	ldr	r3, [sp, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	dd36      	ble.n	8004f98 <_dtoa_r+0x448>
 8004f2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f2e:	2200      	movs	r2, #0
 8004f30:	4b8c      	ldr	r3, [pc, #560]	; (8005164 <_dtoa_r+0x614>)
 8004f32:	f7fb fad1 	bl	80004d8 <__aeabi_dmul>
 8004f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f3a:	9e04      	ldr	r6, [sp, #16]
 8004f3c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004f40:	3501      	adds	r5, #1
 8004f42:	4628      	mov	r0, r5
 8004f44:	f7fb fa5e 	bl	8000404 <__aeabi_i2d>
 8004f48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f4c:	f7fb fac4 	bl	80004d8 <__aeabi_dmul>
 8004f50:	2200      	movs	r2, #0
 8004f52:	4b85      	ldr	r3, [pc, #532]	; (8005168 <_dtoa_r+0x618>)
 8004f54:	f7fb f90a 	bl	800016c <__adddf3>
 8004f58:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004f5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f60:	950b      	str	r5, [sp, #44]	; 0x2c
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	d15c      	bne.n	8005020 <_dtoa_r+0x4d0>
 8004f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	4b7f      	ldr	r3, [pc, #508]	; (800516c <_dtoa_r+0x61c>)
 8004f6e:	f7fb f8fb 	bl	8000168 <__aeabi_dsub>
 8004f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f74:	462b      	mov	r3, r5
 8004f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f7a:	f7fb fd3d 	bl	80009f8 <__aeabi_dcmpgt>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	f040 8281 	bne.w	8005486 <_dtoa_r+0x936>
 8004f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f8a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004f8e:	f7fb fd15 	bl	80009bc <__aeabi_dcmplt>
 8004f92:	2800      	cmp	r0, #0
 8004f94:	f040 8275 	bne.w	8005482 <_dtoa_r+0x932>
 8004f98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004f9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004fa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f2c0 814b 	blt.w	800523e <_dtoa_r+0x6ee>
 8004fa8:	f1ba 0f0e 	cmp.w	sl, #14
 8004fac:	f300 8147 	bgt.w	800523e <_dtoa_r+0x6ee>
 8004fb0:	4b69      	ldr	r3, [pc, #420]	; (8005158 <_dtoa_r+0x608>)
 8004fb2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004fbe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f280 80d7 	bge.w	8005174 <_dtoa_r+0x624>
 8004fc6:	f1b8 0f00 	cmp.w	r8, #0
 8004fca:	f300 80d3 	bgt.w	8005174 <_dtoa_r+0x624>
 8004fce:	f040 8257 	bne.w	8005480 <_dtoa_r+0x930>
 8004fd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	4b64      	ldr	r3, [pc, #400]	; (800516c <_dtoa_r+0x61c>)
 8004fda:	f7fb fa7d 	bl	80004d8 <__aeabi_dmul>
 8004fde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fe2:	f7fb fcff 	bl	80009e4 <__aeabi_dcmpge>
 8004fe6:	4646      	mov	r6, r8
 8004fe8:	4647      	mov	r7, r8
 8004fea:	2800      	cmp	r0, #0
 8004fec:	f040 822d 	bne.w	800544a <_dtoa_r+0x8fa>
 8004ff0:	9b06      	ldr	r3, [sp, #24]
 8004ff2:	9a06      	ldr	r2, [sp, #24]
 8004ff4:	1c5d      	adds	r5, r3, #1
 8004ff6:	2331      	movs	r3, #49	; 0x31
 8004ff8:	f10a 0a01 	add.w	sl, sl, #1
 8004ffc:	7013      	strb	r3, [r2, #0]
 8004ffe:	e228      	b.n	8005452 <_dtoa_r+0x902>
 8005000:	07f2      	lsls	r2, r6, #31
 8005002:	d505      	bpl.n	8005010 <_dtoa_r+0x4c0>
 8005004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005008:	f7fb fa66 	bl	80004d8 <__aeabi_dmul>
 800500c:	2301      	movs	r3, #1
 800500e:	3501      	adds	r5, #1
 8005010:	1076      	asrs	r6, r6, #1
 8005012:	3708      	adds	r7, #8
 8005014:	e76e      	b.n	8004ef4 <_dtoa_r+0x3a4>
 8005016:	2502      	movs	r5, #2
 8005018:	e771      	b.n	8004efe <_dtoa_r+0x3ae>
 800501a:	4657      	mov	r7, sl
 800501c:	4646      	mov	r6, r8
 800501e:	e790      	b.n	8004f42 <_dtoa_r+0x3f2>
 8005020:	4b4d      	ldr	r3, [pc, #308]	; (8005158 <_dtoa_r+0x608>)
 8005022:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005026:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800502a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800502c:	2b00      	cmp	r3, #0
 800502e:	d048      	beq.n	80050c2 <_dtoa_r+0x572>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	2000      	movs	r0, #0
 8005036:	494e      	ldr	r1, [pc, #312]	; (8005170 <_dtoa_r+0x620>)
 8005038:	f7fb fb78 	bl	800072c <__aeabi_ddiv>
 800503c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005040:	f7fb f892 	bl	8000168 <__aeabi_dsub>
 8005044:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005048:	9d06      	ldr	r5, [sp, #24]
 800504a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800504e:	f7fb fcf3 	bl	8000a38 <__aeabi_d2iz>
 8005052:	9011      	str	r0, [sp, #68]	; 0x44
 8005054:	f7fb f9d6 	bl	8000404 <__aeabi_i2d>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005060:	f7fb f882 	bl	8000168 <__aeabi_dsub>
 8005064:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005066:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800506a:	3330      	adds	r3, #48	; 0x30
 800506c:	f805 3b01 	strb.w	r3, [r5], #1
 8005070:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005074:	f7fb fca2 	bl	80009bc <__aeabi_dcmplt>
 8005078:	2800      	cmp	r0, #0
 800507a:	d163      	bne.n	8005144 <_dtoa_r+0x5f4>
 800507c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005080:	2000      	movs	r0, #0
 8005082:	4937      	ldr	r1, [pc, #220]	; (8005160 <_dtoa_r+0x610>)
 8005084:	f7fb f870 	bl	8000168 <__aeabi_dsub>
 8005088:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800508c:	f7fb fc96 	bl	80009bc <__aeabi_dcmplt>
 8005090:	2800      	cmp	r0, #0
 8005092:	f040 80b5 	bne.w	8005200 <_dtoa_r+0x6b0>
 8005096:	9b06      	ldr	r3, [sp, #24]
 8005098:	1aeb      	subs	r3, r5, r3
 800509a:	429e      	cmp	r6, r3
 800509c:	f77f af7c 	ble.w	8004f98 <_dtoa_r+0x448>
 80050a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050a4:	2200      	movs	r2, #0
 80050a6:	4b2f      	ldr	r3, [pc, #188]	; (8005164 <_dtoa_r+0x614>)
 80050a8:	f7fb fa16 	bl	80004d8 <__aeabi_dmul>
 80050ac:	2200      	movs	r2, #0
 80050ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050b6:	4b2b      	ldr	r3, [pc, #172]	; (8005164 <_dtoa_r+0x614>)
 80050b8:	f7fb fa0e 	bl	80004d8 <__aeabi_dmul>
 80050bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050c0:	e7c3      	b.n	800504a <_dtoa_r+0x4fa>
 80050c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050c6:	f7fb fa07 	bl	80004d8 <__aeabi_dmul>
 80050ca:	9b06      	ldr	r3, [sp, #24]
 80050cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050d0:	199d      	adds	r5, r3, r6
 80050d2:	461e      	mov	r6, r3
 80050d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d8:	f7fb fcae 	bl	8000a38 <__aeabi_d2iz>
 80050dc:	9011      	str	r0, [sp, #68]	; 0x44
 80050de:	f7fb f991 	bl	8000404 <__aeabi_i2d>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050ea:	f7fb f83d 	bl	8000168 <__aeabi_dsub>
 80050ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050f4:	3330      	adds	r3, #48	; 0x30
 80050f6:	f806 3b01 	strb.w	r3, [r6], #1
 80050fa:	42ae      	cmp	r6, r5
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	d124      	bne.n	800514c <_dtoa_r+0x5fc>
 8005102:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005106:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <_dtoa_r+0x620>)
 8005108:	f7fb f830 	bl	800016c <__adddf3>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005114:	f7fb fc70 	bl	80009f8 <__aeabi_dcmpgt>
 8005118:	2800      	cmp	r0, #0
 800511a:	d171      	bne.n	8005200 <_dtoa_r+0x6b0>
 800511c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005120:	2000      	movs	r0, #0
 8005122:	4913      	ldr	r1, [pc, #76]	; (8005170 <_dtoa_r+0x620>)
 8005124:	f7fb f820 	bl	8000168 <__aeabi_dsub>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005130:	f7fb fc44 	bl	80009bc <__aeabi_dcmplt>
 8005134:	2800      	cmp	r0, #0
 8005136:	f43f af2f 	beq.w	8004f98 <_dtoa_r+0x448>
 800513a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800513e:	1e6a      	subs	r2, r5, #1
 8005140:	2b30      	cmp	r3, #48	; 0x30
 8005142:	d001      	beq.n	8005148 <_dtoa_r+0x5f8>
 8005144:	46ba      	mov	sl, r7
 8005146:	e04a      	b.n	80051de <_dtoa_r+0x68e>
 8005148:	4615      	mov	r5, r2
 800514a:	e7f6      	b.n	800513a <_dtoa_r+0x5ea>
 800514c:	4b05      	ldr	r3, [pc, #20]	; (8005164 <_dtoa_r+0x614>)
 800514e:	f7fb f9c3 	bl	80004d8 <__aeabi_dmul>
 8005152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005156:	e7bd      	b.n	80050d4 <_dtoa_r+0x584>
 8005158:	080062a0 	.word	0x080062a0
 800515c:	08006278 	.word	0x08006278
 8005160:	3ff00000 	.word	0x3ff00000
 8005164:	40240000 	.word	0x40240000
 8005168:	401c0000 	.word	0x401c0000
 800516c:	40140000 	.word	0x40140000
 8005170:	3fe00000 	.word	0x3fe00000
 8005174:	9d06      	ldr	r5, [sp, #24]
 8005176:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800517a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800517e:	4630      	mov	r0, r6
 8005180:	4639      	mov	r1, r7
 8005182:	f7fb fad3 	bl	800072c <__aeabi_ddiv>
 8005186:	f7fb fc57 	bl	8000a38 <__aeabi_d2iz>
 800518a:	4681      	mov	r9, r0
 800518c:	f7fb f93a 	bl	8000404 <__aeabi_i2d>
 8005190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005194:	f7fb f9a0 	bl	80004d8 <__aeabi_dmul>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4630      	mov	r0, r6
 800519e:	4639      	mov	r1, r7
 80051a0:	f7fa ffe2 	bl	8000168 <__aeabi_dsub>
 80051a4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80051a8:	f805 6b01 	strb.w	r6, [r5], #1
 80051ac:	9e06      	ldr	r6, [sp, #24]
 80051ae:	4602      	mov	r2, r0
 80051b0:	1bae      	subs	r6, r5, r6
 80051b2:	45b0      	cmp	r8, r6
 80051b4:	460b      	mov	r3, r1
 80051b6:	d135      	bne.n	8005224 <_dtoa_r+0x6d4>
 80051b8:	f7fa ffd8 	bl	800016c <__adddf3>
 80051bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051c0:	4606      	mov	r6, r0
 80051c2:	460f      	mov	r7, r1
 80051c4:	f7fb fc18 	bl	80009f8 <__aeabi_dcmpgt>
 80051c8:	b9c8      	cbnz	r0, 80051fe <_dtoa_r+0x6ae>
 80051ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ce:	4630      	mov	r0, r6
 80051d0:	4639      	mov	r1, r7
 80051d2:	f7fb fbe9 	bl	80009a8 <__aeabi_dcmpeq>
 80051d6:	b110      	cbz	r0, 80051de <_dtoa_r+0x68e>
 80051d8:	f019 0f01 	tst.w	r9, #1
 80051dc:	d10f      	bne.n	80051fe <_dtoa_r+0x6ae>
 80051de:	4659      	mov	r1, fp
 80051e0:	4620      	mov	r0, r4
 80051e2:	f000 facc 	bl	800577e <_Bfree>
 80051e6:	2300      	movs	r3, #0
 80051e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051ea:	702b      	strb	r3, [r5, #0]
 80051ec:	f10a 0301 	add.w	r3, sl, #1
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f43f acf3 	beq.w	8004be0 <_dtoa_r+0x90>
 80051fa:	601d      	str	r5, [r3, #0]
 80051fc:	e4f0      	b.n	8004be0 <_dtoa_r+0x90>
 80051fe:	4657      	mov	r7, sl
 8005200:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005204:	1e6b      	subs	r3, r5, #1
 8005206:	2a39      	cmp	r2, #57	; 0x39
 8005208:	d106      	bne.n	8005218 <_dtoa_r+0x6c8>
 800520a:	9a06      	ldr	r2, [sp, #24]
 800520c:	429a      	cmp	r2, r3
 800520e:	d107      	bne.n	8005220 <_dtoa_r+0x6d0>
 8005210:	2330      	movs	r3, #48	; 0x30
 8005212:	7013      	strb	r3, [r2, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	3701      	adds	r7, #1
 8005218:	781a      	ldrb	r2, [r3, #0]
 800521a:	3201      	adds	r2, #1
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	e791      	b.n	8005144 <_dtoa_r+0x5f4>
 8005220:	461d      	mov	r5, r3
 8005222:	e7ed      	b.n	8005200 <_dtoa_r+0x6b0>
 8005224:	2200      	movs	r2, #0
 8005226:	4b99      	ldr	r3, [pc, #612]	; (800548c <_dtoa_r+0x93c>)
 8005228:	f7fb f956 	bl	80004d8 <__aeabi_dmul>
 800522c:	2200      	movs	r2, #0
 800522e:	2300      	movs	r3, #0
 8005230:	4606      	mov	r6, r0
 8005232:	460f      	mov	r7, r1
 8005234:	f7fb fbb8 	bl	80009a8 <__aeabi_dcmpeq>
 8005238:	2800      	cmp	r0, #0
 800523a:	d09e      	beq.n	800517a <_dtoa_r+0x62a>
 800523c:	e7cf      	b.n	80051de <_dtoa_r+0x68e>
 800523e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005240:	2a00      	cmp	r2, #0
 8005242:	f000 8088 	beq.w	8005356 <_dtoa_r+0x806>
 8005246:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005248:	2a01      	cmp	r2, #1
 800524a:	dc6d      	bgt.n	8005328 <_dtoa_r+0x7d8>
 800524c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800524e:	2a00      	cmp	r2, #0
 8005250:	d066      	beq.n	8005320 <_dtoa_r+0x7d0>
 8005252:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005256:	464d      	mov	r5, r9
 8005258:	9e08      	ldr	r6, [sp, #32]
 800525a:	9a07      	ldr	r2, [sp, #28]
 800525c:	2101      	movs	r1, #1
 800525e:	441a      	add	r2, r3
 8005260:	4620      	mov	r0, r4
 8005262:	4499      	add	r9, r3
 8005264:	9207      	str	r2, [sp, #28]
 8005266:	f000 fb2a 	bl	80058be <__i2b>
 800526a:	4607      	mov	r7, r0
 800526c:	2d00      	cmp	r5, #0
 800526e:	dd0b      	ble.n	8005288 <_dtoa_r+0x738>
 8005270:	9b07      	ldr	r3, [sp, #28]
 8005272:	2b00      	cmp	r3, #0
 8005274:	dd08      	ble.n	8005288 <_dtoa_r+0x738>
 8005276:	42ab      	cmp	r3, r5
 8005278:	bfa8      	it	ge
 800527a:	462b      	movge	r3, r5
 800527c:	9a07      	ldr	r2, [sp, #28]
 800527e:	eba9 0903 	sub.w	r9, r9, r3
 8005282:	1aed      	subs	r5, r5, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	9307      	str	r3, [sp, #28]
 8005288:	9b08      	ldr	r3, [sp, #32]
 800528a:	b1eb      	cbz	r3, 80052c8 <_dtoa_r+0x778>
 800528c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800528e:	2b00      	cmp	r3, #0
 8005290:	d065      	beq.n	800535e <_dtoa_r+0x80e>
 8005292:	b18e      	cbz	r6, 80052b8 <_dtoa_r+0x768>
 8005294:	4639      	mov	r1, r7
 8005296:	4632      	mov	r2, r6
 8005298:	4620      	mov	r0, r4
 800529a:	f000 fbaf 	bl	80059fc <__pow5mult>
 800529e:	465a      	mov	r2, fp
 80052a0:	4601      	mov	r1, r0
 80052a2:	4607      	mov	r7, r0
 80052a4:	4620      	mov	r0, r4
 80052a6:	f000 fb13 	bl	80058d0 <__multiply>
 80052aa:	4659      	mov	r1, fp
 80052ac:	900a      	str	r0, [sp, #40]	; 0x28
 80052ae:	4620      	mov	r0, r4
 80052b0:	f000 fa65 	bl	800577e <_Bfree>
 80052b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052b6:	469b      	mov	fp, r3
 80052b8:	9b08      	ldr	r3, [sp, #32]
 80052ba:	1b9a      	subs	r2, r3, r6
 80052bc:	d004      	beq.n	80052c8 <_dtoa_r+0x778>
 80052be:	4659      	mov	r1, fp
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 fb9b 	bl	80059fc <__pow5mult>
 80052c6:	4683      	mov	fp, r0
 80052c8:	2101      	movs	r1, #1
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 faf7 	bl	80058be <__i2b>
 80052d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052d2:	4606      	mov	r6, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 81c6 	beq.w	8005666 <_dtoa_r+0xb16>
 80052da:	461a      	mov	r2, r3
 80052dc:	4601      	mov	r1, r0
 80052de:	4620      	mov	r0, r4
 80052e0:	f000 fb8c 	bl	80059fc <__pow5mult>
 80052e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80052e6:	4606      	mov	r6, r0
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	dc3e      	bgt.n	800536a <_dtoa_r+0x81a>
 80052ec:	9b02      	ldr	r3, [sp, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d137      	bne.n	8005362 <_dtoa_r+0x812>
 80052f2:	9b03      	ldr	r3, [sp, #12]
 80052f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d134      	bne.n	8005366 <_dtoa_r+0x816>
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005302:	0d1b      	lsrs	r3, r3, #20
 8005304:	051b      	lsls	r3, r3, #20
 8005306:	b12b      	cbz	r3, 8005314 <_dtoa_r+0x7c4>
 8005308:	9b07      	ldr	r3, [sp, #28]
 800530a:	f109 0901 	add.w	r9, r9, #1
 800530e:	3301      	adds	r3, #1
 8005310:	9307      	str	r3, [sp, #28]
 8005312:	2301      	movs	r3, #1
 8005314:	9308      	str	r3, [sp, #32]
 8005316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005318:	2b00      	cmp	r3, #0
 800531a:	d128      	bne.n	800536e <_dtoa_r+0x81e>
 800531c:	2001      	movs	r0, #1
 800531e:	e02e      	b.n	800537e <_dtoa_r+0x82e>
 8005320:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005322:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005326:	e796      	b.n	8005256 <_dtoa_r+0x706>
 8005328:	9b08      	ldr	r3, [sp, #32]
 800532a:	f108 36ff 	add.w	r6, r8, #4294967295
 800532e:	42b3      	cmp	r3, r6
 8005330:	bfb7      	itett	lt
 8005332:	9b08      	ldrlt	r3, [sp, #32]
 8005334:	1b9e      	subge	r6, r3, r6
 8005336:	1af2      	sublt	r2, r6, r3
 8005338:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800533a:	bfbf      	itttt	lt
 800533c:	9608      	strlt	r6, [sp, #32]
 800533e:	189b      	addlt	r3, r3, r2
 8005340:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005342:	2600      	movlt	r6, #0
 8005344:	f1b8 0f00 	cmp.w	r8, #0
 8005348:	bfb9      	ittee	lt
 800534a:	eba9 0508 	sublt.w	r5, r9, r8
 800534e:	2300      	movlt	r3, #0
 8005350:	464d      	movge	r5, r9
 8005352:	4643      	movge	r3, r8
 8005354:	e781      	b.n	800525a <_dtoa_r+0x70a>
 8005356:	9e08      	ldr	r6, [sp, #32]
 8005358:	464d      	mov	r5, r9
 800535a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800535c:	e786      	b.n	800526c <_dtoa_r+0x71c>
 800535e:	9a08      	ldr	r2, [sp, #32]
 8005360:	e7ad      	b.n	80052be <_dtoa_r+0x76e>
 8005362:	2300      	movs	r3, #0
 8005364:	e7d6      	b.n	8005314 <_dtoa_r+0x7c4>
 8005366:	9b02      	ldr	r3, [sp, #8]
 8005368:	e7d4      	b.n	8005314 <_dtoa_r+0x7c4>
 800536a:	2300      	movs	r3, #0
 800536c:	9308      	str	r3, [sp, #32]
 800536e:	6933      	ldr	r3, [r6, #16]
 8005370:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005374:	6918      	ldr	r0, [r3, #16]
 8005376:	f000 fa54 	bl	8005822 <__hi0bits>
 800537a:	f1c0 0020 	rsb	r0, r0, #32
 800537e:	9b07      	ldr	r3, [sp, #28]
 8005380:	4418      	add	r0, r3
 8005382:	f010 001f 	ands.w	r0, r0, #31
 8005386:	d047      	beq.n	8005418 <_dtoa_r+0x8c8>
 8005388:	f1c0 0320 	rsb	r3, r0, #32
 800538c:	2b04      	cmp	r3, #4
 800538e:	dd3b      	ble.n	8005408 <_dtoa_r+0x8b8>
 8005390:	9b07      	ldr	r3, [sp, #28]
 8005392:	f1c0 001c 	rsb	r0, r0, #28
 8005396:	4481      	add	r9, r0
 8005398:	4405      	add	r5, r0
 800539a:	4403      	add	r3, r0
 800539c:	9307      	str	r3, [sp, #28]
 800539e:	f1b9 0f00 	cmp.w	r9, #0
 80053a2:	dd05      	ble.n	80053b0 <_dtoa_r+0x860>
 80053a4:	4659      	mov	r1, fp
 80053a6:	464a      	mov	r2, r9
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 fb75 	bl	8005a98 <__lshift>
 80053ae:	4683      	mov	fp, r0
 80053b0:	9b07      	ldr	r3, [sp, #28]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	dd05      	ble.n	80053c2 <_dtoa_r+0x872>
 80053b6:	4631      	mov	r1, r6
 80053b8:	461a      	mov	r2, r3
 80053ba:	4620      	mov	r0, r4
 80053bc:	f000 fb6c 	bl	8005a98 <__lshift>
 80053c0:	4606      	mov	r6, r0
 80053c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053c4:	b353      	cbz	r3, 800541c <_dtoa_r+0x8cc>
 80053c6:	4631      	mov	r1, r6
 80053c8:	4658      	mov	r0, fp
 80053ca:	f000 fbb9 	bl	8005b40 <__mcmp>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	da24      	bge.n	800541c <_dtoa_r+0x8cc>
 80053d2:	2300      	movs	r3, #0
 80053d4:	4659      	mov	r1, fp
 80053d6:	220a      	movs	r2, #10
 80053d8:	4620      	mov	r0, r4
 80053da:	f000 f9e7 	bl	80057ac <__multadd>
 80053de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053e4:	4683      	mov	fp, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 8144 	beq.w	8005674 <_dtoa_r+0xb24>
 80053ec:	2300      	movs	r3, #0
 80053ee:	4639      	mov	r1, r7
 80053f0:	220a      	movs	r2, #10
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 f9da 	bl	80057ac <__multadd>
 80053f8:	9b04      	ldr	r3, [sp, #16]
 80053fa:	4607      	mov	r7, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	dc4d      	bgt.n	800549c <_dtoa_r+0x94c>
 8005400:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005402:	2b02      	cmp	r3, #2
 8005404:	dd4a      	ble.n	800549c <_dtoa_r+0x94c>
 8005406:	e011      	b.n	800542c <_dtoa_r+0x8dc>
 8005408:	d0c9      	beq.n	800539e <_dtoa_r+0x84e>
 800540a:	9a07      	ldr	r2, [sp, #28]
 800540c:	331c      	adds	r3, #28
 800540e:	441a      	add	r2, r3
 8005410:	4499      	add	r9, r3
 8005412:	441d      	add	r5, r3
 8005414:	4613      	mov	r3, r2
 8005416:	e7c1      	b.n	800539c <_dtoa_r+0x84c>
 8005418:	4603      	mov	r3, r0
 800541a:	e7f6      	b.n	800540a <_dtoa_r+0x8ba>
 800541c:	f1b8 0f00 	cmp.w	r8, #0
 8005420:	dc36      	bgt.n	8005490 <_dtoa_r+0x940>
 8005422:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005424:	2b02      	cmp	r3, #2
 8005426:	dd33      	ble.n	8005490 <_dtoa_r+0x940>
 8005428:	f8cd 8010 	str.w	r8, [sp, #16]
 800542c:	9b04      	ldr	r3, [sp, #16]
 800542e:	b963      	cbnz	r3, 800544a <_dtoa_r+0x8fa>
 8005430:	4631      	mov	r1, r6
 8005432:	2205      	movs	r2, #5
 8005434:	4620      	mov	r0, r4
 8005436:	f000 f9b9 	bl	80057ac <__multadd>
 800543a:	4601      	mov	r1, r0
 800543c:	4606      	mov	r6, r0
 800543e:	4658      	mov	r0, fp
 8005440:	f000 fb7e 	bl	8005b40 <__mcmp>
 8005444:	2800      	cmp	r0, #0
 8005446:	f73f add3 	bgt.w	8004ff0 <_dtoa_r+0x4a0>
 800544a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800544c:	9d06      	ldr	r5, [sp, #24]
 800544e:	ea6f 0a03 	mvn.w	sl, r3
 8005452:	f04f 0900 	mov.w	r9, #0
 8005456:	4631      	mov	r1, r6
 8005458:	4620      	mov	r0, r4
 800545a:	f000 f990 	bl	800577e <_Bfree>
 800545e:	2f00      	cmp	r7, #0
 8005460:	f43f aebd 	beq.w	80051de <_dtoa_r+0x68e>
 8005464:	f1b9 0f00 	cmp.w	r9, #0
 8005468:	d005      	beq.n	8005476 <_dtoa_r+0x926>
 800546a:	45b9      	cmp	r9, r7
 800546c:	d003      	beq.n	8005476 <_dtoa_r+0x926>
 800546e:	4649      	mov	r1, r9
 8005470:	4620      	mov	r0, r4
 8005472:	f000 f984 	bl	800577e <_Bfree>
 8005476:	4639      	mov	r1, r7
 8005478:	4620      	mov	r0, r4
 800547a:	f000 f980 	bl	800577e <_Bfree>
 800547e:	e6ae      	b.n	80051de <_dtoa_r+0x68e>
 8005480:	2600      	movs	r6, #0
 8005482:	4637      	mov	r7, r6
 8005484:	e7e1      	b.n	800544a <_dtoa_r+0x8fa>
 8005486:	46ba      	mov	sl, r7
 8005488:	4637      	mov	r7, r6
 800548a:	e5b1      	b.n	8004ff0 <_dtoa_r+0x4a0>
 800548c:	40240000 	.word	0x40240000
 8005490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005492:	f8cd 8010 	str.w	r8, [sp, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80f3 	beq.w	8005682 <_dtoa_r+0xb32>
 800549c:	2d00      	cmp	r5, #0
 800549e:	dd05      	ble.n	80054ac <_dtoa_r+0x95c>
 80054a0:	4639      	mov	r1, r7
 80054a2:	462a      	mov	r2, r5
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 faf7 	bl	8005a98 <__lshift>
 80054aa:	4607      	mov	r7, r0
 80054ac:	9b08      	ldr	r3, [sp, #32]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d04c      	beq.n	800554c <_dtoa_r+0x9fc>
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	4620      	mov	r0, r4
 80054b6:	f000 f92e 	bl	8005716 <_Balloc>
 80054ba:	4605      	mov	r5, r0
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	f107 010c 	add.w	r1, r7, #12
 80054c2:	3202      	adds	r2, #2
 80054c4:	0092      	lsls	r2, r2, #2
 80054c6:	300c      	adds	r0, #12
 80054c8:	f000 f91a 	bl	8005700 <memcpy>
 80054cc:	2201      	movs	r2, #1
 80054ce:	4629      	mov	r1, r5
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 fae1 	bl	8005a98 <__lshift>
 80054d6:	46b9      	mov	r9, r7
 80054d8:	4607      	mov	r7, r0
 80054da:	9b06      	ldr	r3, [sp, #24]
 80054dc:	9307      	str	r3, [sp, #28]
 80054de:	9b02      	ldr	r3, [sp, #8]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	9308      	str	r3, [sp, #32]
 80054e6:	4631      	mov	r1, r6
 80054e8:	4658      	mov	r0, fp
 80054ea:	f7ff faa1 	bl	8004a30 <quorem>
 80054ee:	4649      	mov	r1, r9
 80054f0:	4605      	mov	r5, r0
 80054f2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80054f6:	4658      	mov	r0, fp
 80054f8:	f000 fb22 	bl	8005b40 <__mcmp>
 80054fc:	463a      	mov	r2, r7
 80054fe:	9002      	str	r0, [sp, #8]
 8005500:	4631      	mov	r1, r6
 8005502:	4620      	mov	r0, r4
 8005504:	f000 fb36 	bl	8005b74 <__mdiff>
 8005508:	68c3      	ldr	r3, [r0, #12]
 800550a:	4602      	mov	r2, r0
 800550c:	bb03      	cbnz	r3, 8005550 <_dtoa_r+0xa00>
 800550e:	4601      	mov	r1, r0
 8005510:	9009      	str	r0, [sp, #36]	; 0x24
 8005512:	4658      	mov	r0, fp
 8005514:	f000 fb14 	bl	8005b40 <__mcmp>
 8005518:	4603      	mov	r3, r0
 800551a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800551c:	4611      	mov	r1, r2
 800551e:	4620      	mov	r0, r4
 8005520:	9309      	str	r3, [sp, #36]	; 0x24
 8005522:	f000 f92c 	bl	800577e <_Bfree>
 8005526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005528:	b9a3      	cbnz	r3, 8005554 <_dtoa_r+0xa04>
 800552a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800552c:	b992      	cbnz	r2, 8005554 <_dtoa_r+0xa04>
 800552e:	9a08      	ldr	r2, [sp, #32]
 8005530:	b982      	cbnz	r2, 8005554 <_dtoa_r+0xa04>
 8005532:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005536:	d029      	beq.n	800558c <_dtoa_r+0xa3c>
 8005538:	9b02      	ldr	r3, [sp, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	dd01      	ble.n	8005542 <_dtoa_r+0x9f2>
 800553e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005542:	9b07      	ldr	r3, [sp, #28]
 8005544:	1c5d      	adds	r5, r3, #1
 8005546:	f883 8000 	strb.w	r8, [r3]
 800554a:	e784      	b.n	8005456 <_dtoa_r+0x906>
 800554c:	4638      	mov	r0, r7
 800554e:	e7c2      	b.n	80054d6 <_dtoa_r+0x986>
 8005550:	2301      	movs	r3, #1
 8005552:	e7e3      	b.n	800551c <_dtoa_r+0x9cc>
 8005554:	9a02      	ldr	r2, [sp, #8]
 8005556:	2a00      	cmp	r2, #0
 8005558:	db04      	blt.n	8005564 <_dtoa_r+0xa14>
 800555a:	d123      	bne.n	80055a4 <_dtoa_r+0xa54>
 800555c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800555e:	bb0a      	cbnz	r2, 80055a4 <_dtoa_r+0xa54>
 8005560:	9a08      	ldr	r2, [sp, #32]
 8005562:	b9fa      	cbnz	r2, 80055a4 <_dtoa_r+0xa54>
 8005564:	2b00      	cmp	r3, #0
 8005566:	ddec      	ble.n	8005542 <_dtoa_r+0x9f2>
 8005568:	4659      	mov	r1, fp
 800556a:	2201      	movs	r2, #1
 800556c:	4620      	mov	r0, r4
 800556e:	f000 fa93 	bl	8005a98 <__lshift>
 8005572:	4631      	mov	r1, r6
 8005574:	4683      	mov	fp, r0
 8005576:	f000 fae3 	bl	8005b40 <__mcmp>
 800557a:	2800      	cmp	r0, #0
 800557c:	dc03      	bgt.n	8005586 <_dtoa_r+0xa36>
 800557e:	d1e0      	bne.n	8005542 <_dtoa_r+0x9f2>
 8005580:	f018 0f01 	tst.w	r8, #1
 8005584:	d0dd      	beq.n	8005542 <_dtoa_r+0x9f2>
 8005586:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800558a:	d1d8      	bne.n	800553e <_dtoa_r+0x9ee>
 800558c:	9b07      	ldr	r3, [sp, #28]
 800558e:	9a07      	ldr	r2, [sp, #28]
 8005590:	1c5d      	adds	r5, r3, #1
 8005592:	2339      	movs	r3, #57	; 0x39
 8005594:	7013      	strb	r3, [r2, #0]
 8005596:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800559a:	1e6a      	subs	r2, r5, #1
 800559c:	2b39      	cmp	r3, #57	; 0x39
 800559e:	d04d      	beq.n	800563c <_dtoa_r+0xaec>
 80055a0:	3301      	adds	r3, #1
 80055a2:	e052      	b.n	800564a <_dtoa_r+0xafa>
 80055a4:	9a07      	ldr	r2, [sp, #28]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f102 0501 	add.w	r5, r2, #1
 80055ac:	dd06      	ble.n	80055bc <_dtoa_r+0xa6c>
 80055ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80055b2:	d0eb      	beq.n	800558c <_dtoa_r+0xa3c>
 80055b4:	f108 0801 	add.w	r8, r8, #1
 80055b8:	9b07      	ldr	r3, [sp, #28]
 80055ba:	e7c4      	b.n	8005546 <_dtoa_r+0x9f6>
 80055bc:	9b06      	ldr	r3, [sp, #24]
 80055be:	9a04      	ldr	r2, [sp, #16]
 80055c0:	1aeb      	subs	r3, r5, r3
 80055c2:	4293      	cmp	r3, r2
 80055c4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80055c8:	d021      	beq.n	800560e <_dtoa_r+0xabe>
 80055ca:	4659      	mov	r1, fp
 80055cc:	2300      	movs	r3, #0
 80055ce:	220a      	movs	r2, #10
 80055d0:	4620      	mov	r0, r4
 80055d2:	f000 f8eb 	bl	80057ac <__multadd>
 80055d6:	45b9      	cmp	r9, r7
 80055d8:	4683      	mov	fp, r0
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	f04f 020a 	mov.w	r2, #10
 80055e2:	4649      	mov	r1, r9
 80055e4:	4620      	mov	r0, r4
 80055e6:	d105      	bne.n	80055f4 <_dtoa_r+0xaa4>
 80055e8:	f000 f8e0 	bl	80057ac <__multadd>
 80055ec:	4681      	mov	r9, r0
 80055ee:	4607      	mov	r7, r0
 80055f0:	9507      	str	r5, [sp, #28]
 80055f2:	e778      	b.n	80054e6 <_dtoa_r+0x996>
 80055f4:	f000 f8da 	bl	80057ac <__multadd>
 80055f8:	4639      	mov	r1, r7
 80055fa:	4681      	mov	r9, r0
 80055fc:	2300      	movs	r3, #0
 80055fe:	220a      	movs	r2, #10
 8005600:	4620      	mov	r0, r4
 8005602:	f000 f8d3 	bl	80057ac <__multadd>
 8005606:	4607      	mov	r7, r0
 8005608:	e7f2      	b.n	80055f0 <_dtoa_r+0xaa0>
 800560a:	f04f 0900 	mov.w	r9, #0
 800560e:	4659      	mov	r1, fp
 8005610:	2201      	movs	r2, #1
 8005612:	4620      	mov	r0, r4
 8005614:	f000 fa40 	bl	8005a98 <__lshift>
 8005618:	4631      	mov	r1, r6
 800561a:	4683      	mov	fp, r0
 800561c:	f000 fa90 	bl	8005b40 <__mcmp>
 8005620:	2800      	cmp	r0, #0
 8005622:	dcb8      	bgt.n	8005596 <_dtoa_r+0xa46>
 8005624:	d102      	bne.n	800562c <_dtoa_r+0xadc>
 8005626:	f018 0f01 	tst.w	r8, #1
 800562a:	d1b4      	bne.n	8005596 <_dtoa_r+0xa46>
 800562c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005630:	1e6a      	subs	r2, r5, #1
 8005632:	2b30      	cmp	r3, #48	; 0x30
 8005634:	f47f af0f 	bne.w	8005456 <_dtoa_r+0x906>
 8005638:	4615      	mov	r5, r2
 800563a:	e7f7      	b.n	800562c <_dtoa_r+0xadc>
 800563c:	9b06      	ldr	r3, [sp, #24]
 800563e:	4293      	cmp	r3, r2
 8005640:	d105      	bne.n	800564e <_dtoa_r+0xafe>
 8005642:	2331      	movs	r3, #49	; 0x31
 8005644:	9a06      	ldr	r2, [sp, #24]
 8005646:	f10a 0a01 	add.w	sl, sl, #1
 800564a:	7013      	strb	r3, [r2, #0]
 800564c:	e703      	b.n	8005456 <_dtoa_r+0x906>
 800564e:	4615      	mov	r5, r2
 8005650:	e7a1      	b.n	8005596 <_dtoa_r+0xa46>
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <_dtoa_r+0xb60>)
 8005654:	f7ff bae1 	b.w	8004c1a <_dtoa_r+0xca>
 8005658:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800565a:	2b00      	cmp	r3, #0
 800565c:	f47f aabb 	bne.w	8004bd6 <_dtoa_r+0x86>
 8005660:	4b14      	ldr	r3, [pc, #80]	; (80056b4 <_dtoa_r+0xb64>)
 8005662:	f7ff bada 	b.w	8004c1a <_dtoa_r+0xca>
 8005666:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005668:	2b01      	cmp	r3, #1
 800566a:	f77f ae3f 	ble.w	80052ec <_dtoa_r+0x79c>
 800566e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005670:	9308      	str	r3, [sp, #32]
 8005672:	e653      	b.n	800531c <_dtoa_r+0x7cc>
 8005674:	9b04      	ldr	r3, [sp, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	dc03      	bgt.n	8005682 <_dtoa_r+0xb32>
 800567a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800567c:	2b02      	cmp	r3, #2
 800567e:	f73f aed5 	bgt.w	800542c <_dtoa_r+0x8dc>
 8005682:	9d06      	ldr	r5, [sp, #24]
 8005684:	4631      	mov	r1, r6
 8005686:	4658      	mov	r0, fp
 8005688:	f7ff f9d2 	bl	8004a30 <quorem>
 800568c:	9b06      	ldr	r3, [sp, #24]
 800568e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005692:	f805 8b01 	strb.w	r8, [r5], #1
 8005696:	9a04      	ldr	r2, [sp, #16]
 8005698:	1aeb      	subs	r3, r5, r3
 800569a:	429a      	cmp	r2, r3
 800569c:	ddb5      	ble.n	800560a <_dtoa_r+0xaba>
 800569e:	4659      	mov	r1, fp
 80056a0:	2300      	movs	r3, #0
 80056a2:	220a      	movs	r2, #10
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 f881 	bl	80057ac <__multadd>
 80056aa:	4683      	mov	fp, r0
 80056ac:	e7ea      	b.n	8005684 <_dtoa_r+0xb34>
 80056ae:	bf00      	nop
 80056b0:	08006244 	.word	0x08006244
 80056b4:	08006268 	.word	0x08006268

080056b8 <_localeconv_r>:
 80056b8:	4b04      	ldr	r3, [pc, #16]	; (80056cc <_localeconv_r+0x14>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6a18      	ldr	r0, [r3, #32]
 80056be:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <_localeconv_r+0x18>)
 80056c0:	2800      	cmp	r0, #0
 80056c2:	bf08      	it	eq
 80056c4:	4618      	moveq	r0, r3
 80056c6:	30f0      	adds	r0, #240	; 0xf0
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	2000012c 	.word	0x2000012c
 80056d0:	20000190 	.word	0x20000190

080056d4 <malloc>:
 80056d4:	4b02      	ldr	r3, [pc, #8]	; (80056e0 <malloc+0xc>)
 80056d6:	4601      	mov	r1, r0
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	f000 bb53 	b.w	8005d84 <_malloc_r>
 80056de:	bf00      	nop
 80056e0:	2000012c 	.word	0x2000012c

080056e4 <memchr>:
 80056e4:	b510      	push	{r4, lr}
 80056e6:	b2c9      	uxtb	r1, r1
 80056e8:	4402      	add	r2, r0
 80056ea:	4290      	cmp	r0, r2
 80056ec:	4603      	mov	r3, r0
 80056ee:	d101      	bne.n	80056f4 <memchr+0x10>
 80056f0:	2300      	movs	r3, #0
 80056f2:	e003      	b.n	80056fc <memchr+0x18>
 80056f4:	781c      	ldrb	r4, [r3, #0]
 80056f6:	3001      	adds	r0, #1
 80056f8:	428c      	cmp	r4, r1
 80056fa:	d1f6      	bne.n	80056ea <memchr+0x6>
 80056fc:	4618      	mov	r0, r3
 80056fe:	bd10      	pop	{r4, pc}

08005700 <memcpy>:
 8005700:	b510      	push	{r4, lr}
 8005702:	1e43      	subs	r3, r0, #1
 8005704:	440a      	add	r2, r1
 8005706:	4291      	cmp	r1, r2
 8005708:	d100      	bne.n	800570c <memcpy+0xc>
 800570a:	bd10      	pop	{r4, pc}
 800570c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005710:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005714:	e7f7      	b.n	8005706 <memcpy+0x6>

08005716 <_Balloc>:
 8005716:	b570      	push	{r4, r5, r6, lr}
 8005718:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800571a:	4604      	mov	r4, r0
 800571c:	460e      	mov	r6, r1
 800571e:	b93d      	cbnz	r5, 8005730 <_Balloc+0x1a>
 8005720:	2010      	movs	r0, #16
 8005722:	f7ff ffd7 	bl	80056d4 <malloc>
 8005726:	6260      	str	r0, [r4, #36]	; 0x24
 8005728:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800572c:	6005      	str	r5, [r0, #0]
 800572e:	60c5      	str	r5, [r0, #12]
 8005730:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005732:	68eb      	ldr	r3, [r5, #12]
 8005734:	b183      	cbz	r3, 8005758 <_Balloc+0x42>
 8005736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800573e:	b9b8      	cbnz	r0, 8005770 <_Balloc+0x5a>
 8005740:	2101      	movs	r1, #1
 8005742:	fa01 f506 	lsl.w	r5, r1, r6
 8005746:	1d6a      	adds	r2, r5, #5
 8005748:	0092      	lsls	r2, r2, #2
 800574a:	4620      	mov	r0, r4
 800574c:	f000 fabf 	bl	8005cce <_calloc_r>
 8005750:	b160      	cbz	r0, 800576c <_Balloc+0x56>
 8005752:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005756:	e00e      	b.n	8005776 <_Balloc+0x60>
 8005758:	2221      	movs	r2, #33	; 0x21
 800575a:	2104      	movs	r1, #4
 800575c:	4620      	mov	r0, r4
 800575e:	f000 fab6 	bl	8005cce <_calloc_r>
 8005762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005764:	60e8      	str	r0, [r5, #12]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e4      	bne.n	8005736 <_Balloc+0x20>
 800576c:	2000      	movs	r0, #0
 800576e:	bd70      	pop	{r4, r5, r6, pc}
 8005770:	6802      	ldr	r2, [r0, #0]
 8005772:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005776:	2300      	movs	r3, #0
 8005778:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800577c:	e7f7      	b.n	800576e <_Balloc+0x58>

0800577e <_Bfree>:
 800577e:	b570      	push	{r4, r5, r6, lr}
 8005780:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005782:	4606      	mov	r6, r0
 8005784:	460d      	mov	r5, r1
 8005786:	b93c      	cbnz	r4, 8005798 <_Bfree+0x1a>
 8005788:	2010      	movs	r0, #16
 800578a:	f7ff ffa3 	bl	80056d4 <malloc>
 800578e:	6270      	str	r0, [r6, #36]	; 0x24
 8005790:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005794:	6004      	str	r4, [r0, #0]
 8005796:	60c4      	str	r4, [r0, #12]
 8005798:	b13d      	cbz	r5, 80057aa <_Bfree+0x2c>
 800579a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800579c:	686a      	ldr	r2, [r5, #4]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057a4:	6029      	str	r1, [r5, #0]
 80057a6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80057aa:	bd70      	pop	{r4, r5, r6, pc}

080057ac <__multadd>:
 80057ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b0:	461f      	mov	r7, r3
 80057b2:	4606      	mov	r6, r0
 80057b4:	460c      	mov	r4, r1
 80057b6:	2300      	movs	r3, #0
 80057b8:	690d      	ldr	r5, [r1, #16]
 80057ba:	f101 0c14 	add.w	ip, r1, #20
 80057be:	f8dc 0000 	ldr.w	r0, [ip]
 80057c2:	3301      	adds	r3, #1
 80057c4:	b281      	uxth	r1, r0
 80057c6:	fb02 7101 	mla	r1, r2, r1, r7
 80057ca:	0c00      	lsrs	r0, r0, #16
 80057cc:	0c0f      	lsrs	r7, r1, #16
 80057ce:	fb02 7000 	mla	r0, r2, r0, r7
 80057d2:	b289      	uxth	r1, r1
 80057d4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80057d8:	429d      	cmp	r5, r3
 80057da:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80057de:	f84c 1b04 	str.w	r1, [ip], #4
 80057e2:	dcec      	bgt.n	80057be <__multadd+0x12>
 80057e4:	b1d7      	cbz	r7, 800581c <__multadd+0x70>
 80057e6:	68a3      	ldr	r3, [r4, #8]
 80057e8:	42ab      	cmp	r3, r5
 80057ea:	dc12      	bgt.n	8005812 <__multadd+0x66>
 80057ec:	6861      	ldr	r1, [r4, #4]
 80057ee:	4630      	mov	r0, r6
 80057f0:	3101      	adds	r1, #1
 80057f2:	f7ff ff90 	bl	8005716 <_Balloc>
 80057f6:	4680      	mov	r8, r0
 80057f8:	6922      	ldr	r2, [r4, #16]
 80057fa:	f104 010c 	add.w	r1, r4, #12
 80057fe:	3202      	adds	r2, #2
 8005800:	0092      	lsls	r2, r2, #2
 8005802:	300c      	adds	r0, #12
 8005804:	f7ff ff7c 	bl	8005700 <memcpy>
 8005808:	4621      	mov	r1, r4
 800580a:	4630      	mov	r0, r6
 800580c:	f7ff ffb7 	bl	800577e <_Bfree>
 8005810:	4644      	mov	r4, r8
 8005812:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005816:	3501      	adds	r5, #1
 8005818:	615f      	str	r7, [r3, #20]
 800581a:	6125      	str	r5, [r4, #16]
 800581c:	4620      	mov	r0, r4
 800581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005822 <__hi0bits>:
 8005822:	0c02      	lsrs	r2, r0, #16
 8005824:	0412      	lsls	r2, r2, #16
 8005826:	4603      	mov	r3, r0
 8005828:	b9b2      	cbnz	r2, 8005858 <__hi0bits+0x36>
 800582a:	0403      	lsls	r3, r0, #16
 800582c:	2010      	movs	r0, #16
 800582e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005832:	bf04      	itt	eq
 8005834:	021b      	lsleq	r3, r3, #8
 8005836:	3008      	addeq	r0, #8
 8005838:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800583c:	bf04      	itt	eq
 800583e:	011b      	lsleq	r3, r3, #4
 8005840:	3004      	addeq	r0, #4
 8005842:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005846:	bf04      	itt	eq
 8005848:	009b      	lsleq	r3, r3, #2
 800584a:	3002      	addeq	r0, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	db06      	blt.n	800585e <__hi0bits+0x3c>
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	d503      	bpl.n	800585c <__hi0bits+0x3a>
 8005854:	3001      	adds	r0, #1
 8005856:	4770      	bx	lr
 8005858:	2000      	movs	r0, #0
 800585a:	e7e8      	b.n	800582e <__hi0bits+0xc>
 800585c:	2020      	movs	r0, #32
 800585e:	4770      	bx	lr

08005860 <__lo0bits>:
 8005860:	6803      	ldr	r3, [r0, #0]
 8005862:	4601      	mov	r1, r0
 8005864:	f013 0207 	ands.w	r2, r3, #7
 8005868:	d00b      	beq.n	8005882 <__lo0bits+0x22>
 800586a:	07da      	lsls	r2, r3, #31
 800586c:	d423      	bmi.n	80058b6 <__lo0bits+0x56>
 800586e:	0798      	lsls	r0, r3, #30
 8005870:	bf49      	itett	mi
 8005872:	085b      	lsrmi	r3, r3, #1
 8005874:	089b      	lsrpl	r3, r3, #2
 8005876:	2001      	movmi	r0, #1
 8005878:	600b      	strmi	r3, [r1, #0]
 800587a:	bf5c      	itt	pl
 800587c:	600b      	strpl	r3, [r1, #0]
 800587e:	2002      	movpl	r0, #2
 8005880:	4770      	bx	lr
 8005882:	b298      	uxth	r0, r3
 8005884:	b9a8      	cbnz	r0, 80058b2 <__lo0bits+0x52>
 8005886:	2010      	movs	r0, #16
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800588e:	bf04      	itt	eq
 8005890:	0a1b      	lsreq	r3, r3, #8
 8005892:	3008      	addeq	r0, #8
 8005894:	071a      	lsls	r2, r3, #28
 8005896:	bf04      	itt	eq
 8005898:	091b      	lsreq	r3, r3, #4
 800589a:	3004      	addeq	r0, #4
 800589c:	079a      	lsls	r2, r3, #30
 800589e:	bf04      	itt	eq
 80058a0:	089b      	lsreq	r3, r3, #2
 80058a2:	3002      	addeq	r0, #2
 80058a4:	07da      	lsls	r2, r3, #31
 80058a6:	d402      	bmi.n	80058ae <__lo0bits+0x4e>
 80058a8:	085b      	lsrs	r3, r3, #1
 80058aa:	d006      	beq.n	80058ba <__lo0bits+0x5a>
 80058ac:	3001      	adds	r0, #1
 80058ae:	600b      	str	r3, [r1, #0]
 80058b0:	4770      	bx	lr
 80058b2:	4610      	mov	r0, r2
 80058b4:	e7e9      	b.n	800588a <__lo0bits+0x2a>
 80058b6:	2000      	movs	r0, #0
 80058b8:	4770      	bx	lr
 80058ba:	2020      	movs	r0, #32
 80058bc:	4770      	bx	lr

080058be <__i2b>:
 80058be:	b510      	push	{r4, lr}
 80058c0:	460c      	mov	r4, r1
 80058c2:	2101      	movs	r1, #1
 80058c4:	f7ff ff27 	bl	8005716 <_Balloc>
 80058c8:	2201      	movs	r2, #1
 80058ca:	6144      	str	r4, [r0, #20]
 80058cc:	6102      	str	r2, [r0, #16]
 80058ce:	bd10      	pop	{r4, pc}

080058d0 <__multiply>:
 80058d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d4:	4614      	mov	r4, r2
 80058d6:	690a      	ldr	r2, [r1, #16]
 80058d8:	6923      	ldr	r3, [r4, #16]
 80058da:	4688      	mov	r8, r1
 80058dc:	429a      	cmp	r2, r3
 80058de:	bfbe      	ittt	lt
 80058e0:	460b      	movlt	r3, r1
 80058e2:	46a0      	movlt	r8, r4
 80058e4:	461c      	movlt	r4, r3
 80058e6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80058ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80058ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80058f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80058f6:	eb07 0609 	add.w	r6, r7, r9
 80058fa:	42b3      	cmp	r3, r6
 80058fc:	bfb8      	it	lt
 80058fe:	3101      	addlt	r1, #1
 8005900:	f7ff ff09 	bl	8005716 <_Balloc>
 8005904:	f100 0514 	add.w	r5, r0, #20
 8005908:	462b      	mov	r3, r5
 800590a:	2200      	movs	r2, #0
 800590c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005910:	4573      	cmp	r3, lr
 8005912:	d316      	bcc.n	8005942 <__multiply+0x72>
 8005914:	f104 0214 	add.w	r2, r4, #20
 8005918:	f108 0114 	add.w	r1, r8, #20
 800591c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005920:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	9b00      	ldr	r3, [sp, #0]
 8005928:	9201      	str	r2, [sp, #4]
 800592a:	4293      	cmp	r3, r2
 800592c:	d80c      	bhi.n	8005948 <__multiply+0x78>
 800592e:	2e00      	cmp	r6, #0
 8005930:	dd03      	ble.n	800593a <__multiply+0x6a>
 8005932:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005936:	2b00      	cmp	r3, #0
 8005938:	d05d      	beq.n	80059f6 <__multiply+0x126>
 800593a:	6106      	str	r6, [r0, #16]
 800593c:	b003      	add	sp, #12
 800593e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005942:	f843 2b04 	str.w	r2, [r3], #4
 8005946:	e7e3      	b.n	8005910 <__multiply+0x40>
 8005948:	f8b2 b000 	ldrh.w	fp, [r2]
 800594c:	f1bb 0f00 	cmp.w	fp, #0
 8005950:	d023      	beq.n	800599a <__multiply+0xca>
 8005952:	4689      	mov	r9, r1
 8005954:	46ac      	mov	ip, r5
 8005956:	f04f 0800 	mov.w	r8, #0
 800595a:	f859 4b04 	ldr.w	r4, [r9], #4
 800595e:	f8dc a000 	ldr.w	sl, [ip]
 8005962:	b2a3      	uxth	r3, r4
 8005964:	fa1f fa8a 	uxth.w	sl, sl
 8005968:	fb0b a303 	mla	r3, fp, r3, sl
 800596c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005970:	f8dc 4000 	ldr.w	r4, [ip]
 8005974:	4443      	add	r3, r8
 8005976:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800597a:	fb0b 840a 	mla	r4, fp, sl, r8
 800597e:	46e2      	mov	sl, ip
 8005980:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005984:	b29b      	uxth	r3, r3
 8005986:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800598a:	454f      	cmp	r7, r9
 800598c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005990:	f84a 3b04 	str.w	r3, [sl], #4
 8005994:	d82b      	bhi.n	80059ee <__multiply+0x11e>
 8005996:	f8cc 8004 	str.w	r8, [ip, #4]
 800599a:	9b01      	ldr	r3, [sp, #4]
 800599c:	3204      	adds	r2, #4
 800599e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80059a2:	f1ba 0f00 	cmp.w	sl, #0
 80059a6:	d020      	beq.n	80059ea <__multiply+0x11a>
 80059a8:	4689      	mov	r9, r1
 80059aa:	46a8      	mov	r8, r5
 80059ac:	f04f 0b00 	mov.w	fp, #0
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	f8b9 c000 	ldrh.w	ip, [r9]
 80059b6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	fb0a 440c 	mla	r4, sl, ip, r4
 80059c0:	46c4      	mov	ip, r8
 80059c2:	445c      	add	r4, fp
 80059c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80059c8:	f84c 3b04 	str.w	r3, [ip], #4
 80059cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80059d0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80059d4:	0c1b      	lsrs	r3, r3, #16
 80059d6:	fb0a b303 	mla	r3, sl, r3, fp
 80059da:	454f      	cmp	r7, r9
 80059dc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80059e0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80059e4:	d805      	bhi.n	80059f2 <__multiply+0x122>
 80059e6:	f8c8 3004 	str.w	r3, [r8, #4]
 80059ea:	3504      	adds	r5, #4
 80059ec:	e79b      	b.n	8005926 <__multiply+0x56>
 80059ee:	46d4      	mov	ip, sl
 80059f0:	e7b3      	b.n	800595a <__multiply+0x8a>
 80059f2:	46e0      	mov	r8, ip
 80059f4:	e7dd      	b.n	80059b2 <__multiply+0xe2>
 80059f6:	3e01      	subs	r6, #1
 80059f8:	e799      	b.n	800592e <__multiply+0x5e>
	...

080059fc <__pow5mult>:
 80059fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a00:	4615      	mov	r5, r2
 8005a02:	f012 0203 	ands.w	r2, r2, #3
 8005a06:	4606      	mov	r6, r0
 8005a08:	460f      	mov	r7, r1
 8005a0a:	d007      	beq.n	8005a1c <__pow5mult+0x20>
 8005a0c:	4c21      	ldr	r4, [pc, #132]	; (8005a94 <__pow5mult+0x98>)
 8005a0e:	3a01      	subs	r2, #1
 8005a10:	2300      	movs	r3, #0
 8005a12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a16:	f7ff fec9 	bl	80057ac <__multadd>
 8005a1a:	4607      	mov	r7, r0
 8005a1c:	10ad      	asrs	r5, r5, #2
 8005a1e:	d035      	beq.n	8005a8c <__pow5mult+0x90>
 8005a20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a22:	b93c      	cbnz	r4, 8005a34 <__pow5mult+0x38>
 8005a24:	2010      	movs	r0, #16
 8005a26:	f7ff fe55 	bl	80056d4 <malloc>
 8005a2a:	6270      	str	r0, [r6, #36]	; 0x24
 8005a2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a30:	6004      	str	r4, [r0, #0]
 8005a32:	60c4      	str	r4, [r0, #12]
 8005a34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a3c:	b94c      	cbnz	r4, 8005a52 <__pow5mult+0x56>
 8005a3e:	f240 2171 	movw	r1, #625	; 0x271
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7ff ff3b 	bl	80058be <__i2b>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a50:	6003      	str	r3, [r0, #0]
 8005a52:	f04f 0800 	mov.w	r8, #0
 8005a56:	07eb      	lsls	r3, r5, #31
 8005a58:	d50a      	bpl.n	8005a70 <__pow5mult+0x74>
 8005a5a:	4639      	mov	r1, r7
 8005a5c:	4622      	mov	r2, r4
 8005a5e:	4630      	mov	r0, r6
 8005a60:	f7ff ff36 	bl	80058d0 <__multiply>
 8005a64:	4681      	mov	r9, r0
 8005a66:	4639      	mov	r1, r7
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f7ff fe88 	bl	800577e <_Bfree>
 8005a6e:	464f      	mov	r7, r9
 8005a70:	106d      	asrs	r5, r5, #1
 8005a72:	d00b      	beq.n	8005a8c <__pow5mult+0x90>
 8005a74:	6820      	ldr	r0, [r4, #0]
 8005a76:	b938      	cbnz	r0, 8005a88 <__pow5mult+0x8c>
 8005a78:	4622      	mov	r2, r4
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	f7ff ff27 	bl	80058d0 <__multiply>
 8005a82:	6020      	str	r0, [r4, #0]
 8005a84:	f8c0 8000 	str.w	r8, [r0]
 8005a88:	4604      	mov	r4, r0
 8005a8a:	e7e4      	b.n	8005a56 <__pow5mult+0x5a>
 8005a8c:	4638      	mov	r0, r7
 8005a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a92:	bf00      	nop
 8005a94:	08006368 	.word	0x08006368

08005a98 <__lshift>:
 8005a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	4607      	mov	r7, r0
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	6923      	ldr	r3, [r4, #16]
 8005aa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005aa8:	eb0a 0903 	add.w	r9, sl, r3
 8005aac:	6849      	ldr	r1, [r1, #4]
 8005aae:	68a3      	ldr	r3, [r4, #8]
 8005ab0:	f109 0501 	add.w	r5, r9, #1
 8005ab4:	42ab      	cmp	r3, r5
 8005ab6:	db32      	blt.n	8005b1e <__lshift+0x86>
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f7ff fe2c 	bl	8005716 <_Balloc>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	4680      	mov	r8, r0
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f100 0114 	add.w	r1, r0, #20
 8005ac8:	4553      	cmp	r3, sl
 8005aca:	db2b      	blt.n	8005b24 <__lshift+0x8c>
 8005acc:	6920      	ldr	r0, [r4, #16]
 8005ace:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ad2:	f104 0314 	add.w	r3, r4, #20
 8005ad6:	f016 021f 	ands.w	r2, r6, #31
 8005ada:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ade:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ae2:	d025      	beq.n	8005b30 <__lshift+0x98>
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f1c2 0e20 	rsb	lr, r2, #32
 8005aea:	468a      	mov	sl, r1
 8005aec:	681e      	ldr	r6, [r3, #0]
 8005aee:	4096      	lsls	r6, r2
 8005af0:	4330      	orrs	r0, r6
 8005af2:	f84a 0b04 	str.w	r0, [sl], #4
 8005af6:	f853 0b04 	ldr.w	r0, [r3], #4
 8005afa:	459c      	cmp	ip, r3
 8005afc:	fa20 f00e 	lsr.w	r0, r0, lr
 8005b00:	d814      	bhi.n	8005b2c <__lshift+0x94>
 8005b02:	6048      	str	r0, [r1, #4]
 8005b04:	b108      	cbz	r0, 8005b0a <__lshift+0x72>
 8005b06:	f109 0502 	add.w	r5, r9, #2
 8005b0a:	3d01      	subs	r5, #1
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	f8c8 5010 	str.w	r5, [r8, #16]
 8005b12:	4621      	mov	r1, r4
 8005b14:	f7ff fe33 	bl	800577e <_Bfree>
 8005b18:	4640      	mov	r0, r8
 8005b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1e:	3101      	adds	r1, #1
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	e7c7      	b.n	8005ab4 <__lshift+0x1c>
 8005b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	e7cd      	b.n	8005ac8 <__lshift+0x30>
 8005b2c:	4651      	mov	r1, sl
 8005b2e:	e7dc      	b.n	8005aea <__lshift+0x52>
 8005b30:	3904      	subs	r1, #4
 8005b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b36:	459c      	cmp	ip, r3
 8005b38:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b3c:	d8f9      	bhi.n	8005b32 <__lshift+0x9a>
 8005b3e:	e7e4      	b.n	8005b0a <__lshift+0x72>

08005b40 <__mcmp>:
 8005b40:	6903      	ldr	r3, [r0, #16]
 8005b42:	690a      	ldr	r2, [r1, #16]
 8005b44:	b530      	push	{r4, r5, lr}
 8005b46:	1a9b      	subs	r3, r3, r2
 8005b48:	d10c      	bne.n	8005b64 <__mcmp+0x24>
 8005b4a:	0092      	lsls	r2, r2, #2
 8005b4c:	3014      	adds	r0, #20
 8005b4e:	3114      	adds	r1, #20
 8005b50:	1884      	adds	r4, r0, r2
 8005b52:	4411      	add	r1, r2
 8005b54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b5c:	4295      	cmp	r5, r2
 8005b5e:	d003      	beq.n	8005b68 <__mcmp+0x28>
 8005b60:	d305      	bcc.n	8005b6e <__mcmp+0x2e>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4618      	mov	r0, r3
 8005b66:	bd30      	pop	{r4, r5, pc}
 8005b68:	42a0      	cmp	r0, r4
 8005b6a:	d3f3      	bcc.n	8005b54 <__mcmp+0x14>
 8005b6c:	e7fa      	b.n	8005b64 <__mcmp+0x24>
 8005b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b72:	e7f7      	b.n	8005b64 <__mcmp+0x24>

08005b74 <__mdiff>:
 8005b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b78:	460d      	mov	r5, r1
 8005b7a:	4607      	mov	r7, r0
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	4628      	mov	r0, r5
 8005b80:	4614      	mov	r4, r2
 8005b82:	f7ff ffdd 	bl	8005b40 <__mcmp>
 8005b86:	1e06      	subs	r6, r0, #0
 8005b88:	d108      	bne.n	8005b9c <__mdiff+0x28>
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4638      	mov	r0, r7
 8005b8e:	f7ff fdc2 	bl	8005716 <_Balloc>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9c:	bfa4      	itt	ge
 8005b9e:	4623      	movge	r3, r4
 8005ba0:	462c      	movge	r4, r5
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	6861      	ldr	r1, [r4, #4]
 8005ba6:	bfa6      	itte	ge
 8005ba8:	461d      	movge	r5, r3
 8005baa:	2600      	movge	r6, #0
 8005bac:	2601      	movlt	r6, #1
 8005bae:	f7ff fdb2 	bl	8005716 <_Balloc>
 8005bb2:	f04f 0e00 	mov.w	lr, #0
 8005bb6:	60c6      	str	r6, [r0, #12]
 8005bb8:	692b      	ldr	r3, [r5, #16]
 8005bba:	6926      	ldr	r6, [r4, #16]
 8005bbc:	f104 0214 	add.w	r2, r4, #20
 8005bc0:	f105 0914 	add.w	r9, r5, #20
 8005bc4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005bc8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005bcc:	f100 0114 	add.w	r1, r0, #20
 8005bd0:	f852 ab04 	ldr.w	sl, [r2], #4
 8005bd4:	f859 5b04 	ldr.w	r5, [r9], #4
 8005bd8:	fa1f f38a 	uxth.w	r3, sl
 8005bdc:	4473      	add	r3, lr
 8005bde:	b2ac      	uxth	r4, r5
 8005be0:	1b1b      	subs	r3, r3, r4
 8005be2:	0c2c      	lsrs	r4, r5, #16
 8005be4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005be8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005bf2:	45c8      	cmp	r8, r9
 8005bf4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005bf8:	4694      	mov	ip, r2
 8005bfa:	f841 4b04 	str.w	r4, [r1], #4
 8005bfe:	d8e7      	bhi.n	8005bd0 <__mdiff+0x5c>
 8005c00:	45bc      	cmp	ip, r7
 8005c02:	d304      	bcc.n	8005c0e <__mdiff+0x9a>
 8005c04:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005c08:	b183      	cbz	r3, 8005c2c <__mdiff+0xb8>
 8005c0a:	6106      	str	r6, [r0, #16]
 8005c0c:	e7c4      	b.n	8005b98 <__mdiff+0x24>
 8005c0e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005c12:	b2a2      	uxth	r2, r4
 8005c14:	4472      	add	r2, lr
 8005c16:	1413      	asrs	r3, r2, #16
 8005c18:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005c1c:	b292      	uxth	r2, r2
 8005c1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c22:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005c26:	f841 2b04 	str.w	r2, [r1], #4
 8005c2a:	e7e9      	b.n	8005c00 <__mdiff+0x8c>
 8005c2c:	3e01      	subs	r6, #1
 8005c2e:	e7e9      	b.n	8005c04 <__mdiff+0x90>

08005c30 <__d2b>:
 8005c30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005c34:	461c      	mov	r4, r3
 8005c36:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	4690      	mov	r8, r2
 8005c3e:	f7ff fd6a 	bl	8005716 <_Balloc>
 8005c42:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005c46:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005c4a:	4607      	mov	r7, r0
 8005c4c:	bb34      	cbnz	r4, 8005c9c <__d2b+0x6c>
 8005c4e:	9201      	str	r2, [sp, #4]
 8005c50:	f1b8 0200 	subs.w	r2, r8, #0
 8005c54:	d027      	beq.n	8005ca6 <__d2b+0x76>
 8005c56:	a802      	add	r0, sp, #8
 8005c58:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005c5c:	f7ff fe00 	bl	8005860 <__lo0bits>
 8005c60:	9900      	ldr	r1, [sp, #0]
 8005c62:	b1f0      	cbz	r0, 8005ca2 <__d2b+0x72>
 8005c64:	9a01      	ldr	r2, [sp, #4]
 8005c66:	f1c0 0320 	rsb	r3, r0, #32
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	430b      	orrs	r3, r1
 8005c70:	40c2      	lsrs	r2, r0
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	9201      	str	r2, [sp, #4]
 8005c76:	9b01      	ldr	r3, [sp, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	bf14      	ite	ne
 8005c7c:	2102      	movne	r1, #2
 8005c7e:	2101      	moveq	r1, #1
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	6139      	str	r1, [r7, #16]
 8005c84:	b1c4      	cbz	r4, 8005cb8 <__d2b+0x88>
 8005c86:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005c8a:	4404      	add	r4, r0
 8005c8c:	6034      	str	r4, [r6, #0]
 8005c8e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c92:	6028      	str	r0, [r5, #0]
 8005c94:	4638      	mov	r0, r7
 8005c96:	b002      	add	sp, #8
 8005c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c9c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005ca0:	e7d5      	b.n	8005c4e <__d2b+0x1e>
 8005ca2:	6179      	str	r1, [r7, #20]
 8005ca4:	e7e7      	b.n	8005c76 <__d2b+0x46>
 8005ca6:	a801      	add	r0, sp, #4
 8005ca8:	f7ff fdda 	bl	8005860 <__lo0bits>
 8005cac:	2101      	movs	r1, #1
 8005cae:	9b01      	ldr	r3, [sp, #4]
 8005cb0:	6139      	str	r1, [r7, #16]
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	3020      	adds	r0, #32
 8005cb6:	e7e5      	b.n	8005c84 <__d2b+0x54>
 8005cb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005cbc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005cc0:	6030      	str	r0, [r6, #0]
 8005cc2:	6918      	ldr	r0, [r3, #16]
 8005cc4:	f7ff fdad 	bl	8005822 <__hi0bits>
 8005cc8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005ccc:	e7e1      	b.n	8005c92 <__d2b+0x62>

08005cce <_calloc_r>:
 8005cce:	b538      	push	{r3, r4, r5, lr}
 8005cd0:	fb02 f401 	mul.w	r4, r2, r1
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	f000 f855 	bl	8005d84 <_malloc_r>
 8005cda:	4605      	mov	r5, r0
 8005cdc:	b118      	cbz	r0, 8005ce6 <_calloc_r+0x18>
 8005cde:	4622      	mov	r2, r4
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	f7fe fa2d 	bl	8004140 <memset>
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	bd38      	pop	{r3, r4, r5, pc}
	...

08005cec <_free_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4605      	mov	r5, r0
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	d043      	beq.n	8005d7c <_free_r+0x90>
 8005cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf8:	1f0c      	subs	r4, r1, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bfb8      	it	lt
 8005cfe:	18e4      	addlt	r4, r4, r3
 8005d00:	f000 fa27 	bl	8006152 <__malloc_lock>
 8005d04:	4a1e      	ldr	r2, [pc, #120]	; (8005d80 <_free_r+0x94>)
 8005d06:	6813      	ldr	r3, [r2, #0]
 8005d08:	4610      	mov	r0, r2
 8005d0a:	b933      	cbnz	r3, 8005d1a <_free_r+0x2e>
 8005d0c:	6063      	str	r3, [r4, #4]
 8005d0e:	6014      	str	r4, [r2, #0]
 8005d10:	4628      	mov	r0, r5
 8005d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d16:	f000 ba1d 	b.w	8006154 <__malloc_unlock>
 8005d1a:	42a3      	cmp	r3, r4
 8005d1c:	d90b      	bls.n	8005d36 <_free_r+0x4a>
 8005d1e:	6821      	ldr	r1, [r4, #0]
 8005d20:	1862      	adds	r2, r4, r1
 8005d22:	4293      	cmp	r3, r2
 8005d24:	bf01      	itttt	eq
 8005d26:	681a      	ldreq	r2, [r3, #0]
 8005d28:	685b      	ldreq	r3, [r3, #4]
 8005d2a:	1852      	addeq	r2, r2, r1
 8005d2c:	6022      	streq	r2, [r4, #0]
 8005d2e:	6063      	str	r3, [r4, #4]
 8005d30:	6004      	str	r4, [r0, #0]
 8005d32:	e7ed      	b.n	8005d10 <_free_r+0x24>
 8005d34:	4613      	mov	r3, r2
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	b10a      	cbz	r2, 8005d3e <_free_r+0x52>
 8005d3a:	42a2      	cmp	r2, r4
 8005d3c:	d9fa      	bls.n	8005d34 <_free_r+0x48>
 8005d3e:	6819      	ldr	r1, [r3, #0]
 8005d40:	1858      	adds	r0, r3, r1
 8005d42:	42a0      	cmp	r0, r4
 8005d44:	d10b      	bne.n	8005d5e <_free_r+0x72>
 8005d46:	6820      	ldr	r0, [r4, #0]
 8005d48:	4401      	add	r1, r0
 8005d4a:	1858      	adds	r0, r3, r1
 8005d4c:	4282      	cmp	r2, r0
 8005d4e:	6019      	str	r1, [r3, #0]
 8005d50:	d1de      	bne.n	8005d10 <_free_r+0x24>
 8005d52:	6810      	ldr	r0, [r2, #0]
 8005d54:	6852      	ldr	r2, [r2, #4]
 8005d56:	4401      	add	r1, r0
 8005d58:	6019      	str	r1, [r3, #0]
 8005d5a:	605a      	str	r2, [r3, #4]
 8005d5c:	e7d8      	b.n	8005d10 <_free_r+0x24>
 8005d5e:	d902      	bls.n	8005d66 <_free_r+0x7a>
 8005d60:	230c      	movs	r3, #12
 8005d62:	602b      	str	r3, [r5, #0]
 8005d64:	e7d4      	b.n	8005d10 <_free_r+0x24>
 8005d66:	6820      	ldr	r0, [r4, #0]
 8005d68:	1821      	adds	r1, r4, r0
 8005d6a:	428a      	cmp	r2, r1
 8005d6c:	bf01      	itttt	eq
 8005d6e:	6811      	ldreq	r1, [r2, #0]
 8005d70:	6852      	ldreq	r2, [r2, #4]
 8005d72:	1809      	addeq	r1, r1, r0
 8005d74:	6021      	streq	r1, [r4, #0]
 8005d76:	6062      	str	r2, [r4, #4]
 8005d78:	605c      	str	r4, [r3, #4]
 8005d7a:	e7c9      	b.n	8005d10 <_free_r+0x24>
 8005d7c:	bd38      	pop	{r3, r4, r5, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000328 	.word	0x20000328

08005d84 <_malloc_r>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	1ccd      	adds	r5, r1, #3
 8005d88:	f025 0503 	bic.w	r5, r5, #3
 8005d8c:	3508      	adds	r5, #8
 8005d8e:	2d0c      	cmp	r5, #12
 8005d90:	bf38      	it	cc
 8005d92:	250c      	movcc	r5, #12
 8005d94:	2d00      	cmp	r5, #0
 8005d96:	4606      	mov	r6, r0
 8005d98:	db01      	blt.n	8005d9e <_malloc_r+0x1a>
 8005d9a:	42a9      	cmp	r1, r5
 8005d9c:	d903      	bls.n	8005da6 <_malloc_r+0x22>
 8005d9e:	230c      	movs	r3, #12
 8005da0:	6033      	str	r3, [r6, #0]
 8005da2:	2000      	movs	r0, #0
 8005da4:	bd70      	pop	{r4, r5, r6, pc}
 8005da6:	f000 f9d4 	bl	8006152 <__malloc_lock>
 8005daa:	4a21      	ldr	r2, [pc, #132]	; (8005e30 <_malloc_r+0xac>)
 8005dac:	6814      	ldr	r4, [r2, #0]
 8005dae:	4621      	mov	r1, r4
 8005db0:	b991      	cbnz	r1, 8005dd8 <_malloc_r+0x54>
 8005db2:	4c20      	ldr	r4, [pc, #128]	; (8005e34 <_malloc_r+0xb0>)
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	b91b      	cbnz	r3, 8005dc0 <_malloc_r+0x3c>
 8005db8:	4630      	mov	r0, r6
 8005dba:	f000 f98f 	bl	80060dc <_sbrk_r>
 8005dbe:	6020      	str	r0, [r4, #0]
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f000 f98a 	bl	80060dc <_sbrk_r>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d124      	bne.n	8005e16 <_malloc_r+0x92>
 8005dcc:	230c      	movs	r3, #12
 8005dce:	4630      	mov	r0, r6
 8005dd0:	6033      	str	r3, [r6, #0]
 8005dd2:	f000 f9bf 	bl	8006154 <__malloc_unlock>
 8005dd6:	e7e4      	b.n	8005da2 <_malloc_r+0x1e>
 8005dd8:	680b      	ldr	r3, [r1, #0]
 8005dda:	1b5b      	subs	r3, r3, r5
 8005ddc:	d418      	bmi.n	8005e10 <_malloc_r+0x8c>
 8005dde:	2b0b      	cmp	r3, #11
 8005de0:	d90f      	bls.n	8005e02 <_malloc_r+0x7e>
 8005de2:	600b      	str	r3, [r1, #0]
 8005de4:	18cc      	adds	r4, r1, r3
 8005de6:	50cd      	str	r5, [r1, r3]
 8005de8:	4630      	mov	r0, r6
 8005dea:	f000 f9b3 	bl	8006154 <__malloc_unlock>
 8005dee:	f104 000b 	add.w	r0, r4, #11
 8005df2:	1d23      	adds	r3, r4, #4
 8005df4:	f020 0007 	bic.w	r0, r0, #7
 8005df8:	1ac3      	subs	r3, r0, r3
 8005dfa:	d0d3      	beq.n	8005da4 <_malloc_r+0x20>
 8005dfc:	425a      	negs	r2, r3
 8005dfe:	50e2      	str	r2, [r4, r3]
 8005e00:	e7d0      	b.n	8005da4 <_malloc_r+0x20>
 8005e02:	684b      	ldr	r3, [r1, #4]
 8005e04:	428c      	cmp	r4, r1
 8005e06:	bf16      	itet	ne
 8005e08:	6063      	strne	r3, [r4, #4]
 8005e0a:	6013      	streq	r3, [r2, #0]
 8005e0c:	460c      	movne	r4, r1
 8005e0e:	e7eb      	b.n	8005de8 <_malloc_r+0x64>
 8005e10:	460c      	mov	r4, r1
 8005e12:	6849      	ldr	r1, [r1, #4]
 8005e14:	e7cc      	b.n	8005db0 <_malloc_r+0x2c>
 8005e16:	1cc4      	adds	r4, r0, #3
 8005e18:	f024 0403 	bic.w	r4, r4, #3
 8005e1c:	42a0      	cmp	r0, r4
 8005e1e:	d005      	beq.n	8005e2c <_malloc_r+0xa8>
 8005e20:	1a21      	subs	r1, r4, r0
 8005e22:	4630      	mov	r0, r6
 8005e24:	f000 f95a 	bl	80060dc <_sbrk_r>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d0cf      	beq.n	8005dcc <_malloc_r+0x48>
 8005e2c:	6025      	str	r5, [r4, #0]
 8005e2e:	e7db      	b.n	8005de8 <_malloc_r+0x64>
 8005e30:	20000328 	.word	0x20000328
 8005e34:	2000032c 	.word	0x2000032c

08005e38 <__ssputs_r>:
 8005e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	688e      	ldr	r6, [r1, #8]
 8005e3e:	4682      	mov	sl, r0
 8005e40:	429e      	cmp	r6, r3
 8005e42:	460c      	mov	r4, r1
 8005e44:	4690      	mov	r8, r2
 8005e46:	4699      	mov	r9, r3
 8005e48:	d837      	bhi.n	8005eba <__ssputs_r+0x82>
 8005e4a:	898a      	ldrh	r2, [r1, #12]
 8005e4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e50:	d031      	beq.n	8005eb6 <__ssputs_r+0x7e>
 8005e52:	2302      	movs	r3, #2
 8005e54:	6825      	ldr	r5, [r4, #0]
 8005e56:	6909      	ldr	r1, [r1, #16]
 8005e58:	1a6f      	subs	r7, r5, r1
 8005e5a:	6965      	ldr	r5, [r4, #20]
 8005e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e60:	fb95 f5f3 	sdiv	r5, r5, r3
 8005e64:	f109 0301 	add.w	r3, r9, #1
 8005e68:	443b      	add	r3, r7
 8005e6a:	429d      	cmp	r5, r3
 8005e6c:	bf38      	it	cc
 8005e6e:	461d      	movcc	r5, r3
 8005e70:	0553      	lsls	r3, r2, #21
 8005e72:	d530      	bpl.n	8005ed6 <__ssputs_r+0x9e>
 8005e74:	4629      	mov	r1, r5
 8005e76:	f7ff ff85 	bl	8005d84 <_malloc_r>
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	b950      	cbnz	r0, 8005e94 <__ssputs_r+0x5c>
 8005e7e:	230c      	movs	r3, #12
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	f8ca 3000 	str.w	r3, [sl]
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e8e:	81a3      	strh	r3, [r4, #12]
 8005e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e94:	463a      	mov	r2, r7
 8005e96:	6921      	ldr	r1, [r4, #16]
 8005e98:	f7ff fc32 	bl	8005700 <memcpy>
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	6126      	str	r6, [r4, #16]
 8005eaa:	443e      	add	r6, r7
 8005eac:	6026      	str	r6, [r4, #0]
 8005eae:	464e      	mov	r6, r9
 8005eb0:	6165      	str	r5, [r4, #20]
 8005eb2:	1bed      	subs	r5, r5, r7
 8005eb4:	60a5      	str	r5, [r4, #8]
 8005eb6:	454e      	cmp	r6, r9
 8005eb8:	d900      	bls.n	8005ebc <__ssputs_r+0x84>
 8005eba:	464e      	mov	r6, r9
 8005ebc:	4632      	mov	r2, r6
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	6820      	ldr	r0, [r4, #0]
 8005ec2:	f000 f92d 	bl	8006120 <memmove>
 8005ec6:	68a3      	ldr	r3, [r4, #8]
 8005ec8:	2000      	movs	r0, #0
 8005eca:	1b9b      	subs	r3, r3, r6
 8005ecc:	60a3      	str	r3, [r4, #8]
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	441e      	add	r6, r3
 8005ed2:	6026      	str	r6, [r4, #0]
 8005ed4:	e7dc      	b.n	8005e90 <__ssputs_r+0x58>
 8005ed6:	462a      	mov	r2, r5
 8005ed8:	f000 f93d 	bl	8006156 <_realloc_r>
 8005edc:	4606      	mov	r6, r0
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	d1e2      	bne.n	8005ea8 <__ssputs_r+0x70>
 8005ee2:	6921      	ldr	r1, [r4, #16]
 8005ee4:	4650      	mov	r0, sl
 8005ee6:	f7ff ff01 	bl	8005cec <_free_r>
 8005eea:	e7c8      	b.n	8005e7e <__ssputs_r+0x46>

08005eec <_svfiprintf_r>:
 8005eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef0:	461d      	mov	r5, r3
 8005ef2:	898b      	ldrh	r3, [r1, #12]
 8005ef4:	b09d      	sub	sp, #116	; 0x74
 8005ef6:	061f      	lsls	r7, r3, #24
 8005ef8:	4680      	mov	r8, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	4616      	mov	r6, r2
 8005efe:	d50f      	bpl.n	8005f20 <_svfiprintf_r+0x34>
 8005f00:	690b      	ldr	r3, [r1, #16]
 8005f02:	b96b      	cbnz	r3, 8005f20 <_svfiprintf_r+0x34>
 8005f04:	2140      	movs	r1, #64	; 0x40
 8005f06:	f7ff ff3d 	bl	8005d84 <_malloc_r>
 8005f0a:	6020      	str	r0, [r4, #0]
 8005f0c:	6120      	str	r0, [r4, #16]
 8005f0e:	b928      	cbnz	r0, 8005f1c <_svfiprintf_r+0x30>
 8005f10:	230c      	movs	r3, #12
 8005f12:	f8c8 3000 	str.w	r3, [r8]
 8005f16:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1a:	e0c8      	b.n	80060ae <_svfiprintf_r+0x1c2>
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	6163      	str	r3, [r4, #20]
 8005f20:	2300      	movs	r3, #0
 8005f22:	9309      	str	r3, [sp, #36]	; 0x24
 8005f24:	2320      	movs	r3, #32
 8005f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f2a:	2330      	movs	r3, #48	; 0x30
 8005f2c:	f04f 0b01 	mov.w	fp, #1
 8005f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f34:	9503      	str	r5, [sp, #12]
 8005f36:	4637      	mov	r7, r6
 8005f38:	463d      	mov	r5, r7
 8005f3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f3e:	b10b      	cbz	r3, 8005f44 <_svfiprintf_r+0x58>
 8005f40:	2b25      	cmp	r3, #37	; 0x25
 8005f42:	d13e      	bne.n	8005fc2 <_svfiprintf_r+0xd6>
 8005f44:	ebb7 0a06 	subs.w	sl, r7, r6
 8005f48:	d00b      	beq.n	8005f62 <_svfiprintf_r+0x76>
 8005f4a:	4653      	mov	r3, sl
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4640      	mov	r0, r8
 8005f52:	f7ff ff71 	bl	8005e38 <__ssputs_r>
 8005f56:	3001      	adds	r0, #1
 8005f58:	f000 80a4 	beq.w	80060a4 <_svfiprintf_r+0x1b8>
 8005f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5e:	4453      	add	r3, sl
 8005f60:	9309      	str	r3, [sp, #36]	; 0x24
 8005f62:	783b      	ldrb	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 809d 	beq.w	80060a4 <_svfiprintf_r+0x1b8>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	9307      	str	r3, [sp, #28]
 8005f78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005f7e:	462f      	mov	r7, r5
 8005f80:	2205      	movs	r2, #5
 8005f82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005f86:	4850      	ldr	r0, [pc, #320]	; (80060c8 <_svfiprintf_r+0x1dc>)
 8005f88:	f7ff fbac 	bl	80056e4 <memchr>
 8005f8c:	9b04      	ldr	r3, [sp, #16]
 8005f8e:	b9d0      	cbnz	r0, 8005fc6 <_svfiprintf_r+0xda>
 8005f90:	06d9      	lsls	r1, r3, #27
 8005f92:	bf44      	itt	mi
 8005f94:	2220      	movmi	r2, #32
 8005f96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f9a:	071a      	lsls	r2, r3, #28
 8005f9c:	bf44      	itt	mi
 8005f9e:	222b      	movmi	r2, #43	; 0x2b
 8005fa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fa4:	782a      	ldrb	r2, [r5, #0]
 8005fa6:	2a2a      	cmp	r2, #42	; 0x2a
 8005fa8:	d015      	beq.n	8005fd6 <_svfiprintf_r+0xea>
 8005faa:	462f      	mov	r7, r5
 8005fac:	2000      	movs	r0, #0
 8005fae:	250a      	movs	r5, #10
 8005fb0:	9a07      	ldr	r2, [sp, #28]
 8005fb2:	4639      	mov	r1, r7
 8005fb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fb8:	3b30      	subs	r3, #48	; 0x30
 8005fba:	2b09      	cmp	r3, #9
 8005fbc:	d94d      	bls.n	800605a <_svfiprintf_r+0x16e>
 8005fbe:	b1b8      	cbz	r0, 8005ff0 <_svfiprintf_r+0x104>
 8005fc0:	e00f      	b.n	8005fe2 <_svfiprintf_r+0xf6>
 8005fc2:	462f      	mov	r7, r5
 8005fc4:	e7b8      	b.n	8005f38 <_svfiprintf_r+0x4c>
 8005fc6:	4a40      	ldr	r2, [pc, #256]	; (80060c8 <_svfiprintf_r+0x1dc>)
 8005fc8:	463d      	mov	r5, r7
 8005fca:	1a80      	subs	r0, r0, r2
 8005fcc:	fa0b f000 	lsl.w	r0, fp, r0
 8005fd0:	4318      	orrs	r0, r3
 8005fd2:	9004      	str	r0, [sp, #16]
 8005fd4:	e7d3      	b.n	8005f7e <_svfiprintf_r+0x92>
 8005fd6:	9a03      	ldr	r2, [sp, #12]
 8005fd8:	1d11      	adds	r1, r2, #4
 8005fda:	6812      	ldr	r2, [r2, #0]
 8005fdc:	9103      	str	r1, [sp, #12]
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	db01      	blt.n	8005fe6 <_svfiprintf_r+0xfa>
 8005fe2:	9207      	str	r2, [sp, #28]
 8005fe4:	e004      	b.n	8005ff0 <_svfiprintf_r+0x104>
 8005fe6:	4252      	negs	r2, r2
 8005fe8:	f043 0302 	orr.w	r3, r3, #2
 8005fec:	9207      	str	r2, [sp, #28]
 8005fee:	9304      	str	r3, [sp, #16]
 8005ff0:	783b      	ldrb	r3, [r7, #0]
 8005ff2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ff4:	d10c      	bne.n	8006010 <_svfiprintf_r+0x124>
 8005ff6:	787b      	ldrb	r3, [r7, #1]
 8005ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8005ffa:	d133      	bne.n	8006064 <_svfiprintf_r+0x178>
 8005ffc:	9b03      	ldr	r3, [sp, #12]
 8005ffe:	3702      	adds	r7, #2
 8006000:	1d1a      	adds	r2, r3, #4
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	9203      	str	r2, [sp, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	bfb8      	it	lt
 800600a:	f04f 33ff 	movlt.w	r3, #4294967295
 800600e:	9305      	str	r3, [sp, #20]
 8006010:	4d2e      	ldr	r5, [pc, #184]	; (80060cc <_svfiprintf_r+0x1e0>)
 8006012:	2203      	movs	r2, #3
 8006014:	7839      	ldrb	r1, [r7, #0]
 8006016:	4628      	mov	r0, r5
 8006018:	f7ff fb64 	bl	80056e4 <memchr>
 800601c:	b138      	cbz	r0, 800602e <_svfiprintf_r+0x142>
 800601e:	2340      	movs	r3, #64	; 0x40
 8006020:	1b40      	subs	r0, r0, r5
 8006022:	fa03 f000 	lsl.w	r0, r3, r0
 8006026:	9b04      	ldr	r3, [sp, #16]
 8006028:	3701      	adds	r7, #1
 800602a:	4303      	orrs	r3, r0
 800602c:	9304      	str	r3, [sp, #16]
 800602e:	7839      	ldrb	r1, [r7, #0]
 8006030:	2206      	movs	r2, #6
 8006032:	4827      	ldr	r0, [pc, #156]	; (80060d0 <_svfiprintf_r+0x1e4>)
 8006034:	1c7e      	adds	r6, r7, #1
 8006036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800603a:	f7ff fb53 	bl	80056e4 <memchr>
 800603e:	2800      	cmp	r0, #0
 8006040:	d038      	beq.n	80060b4 <_svfiprintf_r+0x1c8>
 8006042:	4b24      	ldr	r3, [pc, #144]	; (80060d4 <_svfiprintf_r+0x1e8>)
 8006044:	bb13      	cbnz	r3, 800608c <_svfiprintf_r+0x1a0>
 8006046:	9b03      	ldr	r3, [sp, #12]
 8006048:	3307      	adds	r3, #7
 800604a:	f023 0307 	bic.w	r3, r3, #7
 800604e:	3308      	adds	r3, #8
 8006050:	9303      	str	r3, [sp, #12]
 8006052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006054:	444b      	add	r3, r9
 8006056:	9309      	str	r3, [sp, #36]	; 0x24
 8006058:	e76d      	b.n	8005f36 <_svfiprintf_r+0x4a>
 800605a:	fb05 3202 	mla	r2, r5, r2, r3
 800605e:	2001      	movs	r0, #1
 8006060:	460f      	mov	r7, r1
 8006062:	e7a6      	b.n	8005fb2 <_svfiprintf_r+0xc6>
 8006064:	2300      	movs	r3, #0
 8006066:	250a      	movs	r5, #10
 8006068:	4619      	mov	r1, r3
 800606a:	3701      	adds	r7, #1
 800606c:	9305      	str	r3, [sp, #20]
 800606e:	4638      	mov	r0, r7
 8006070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006074:	3a30      	subs	r2, #48	; 0x30
 8006076:	2a09      	cmp	r2, #9
 8006078:	d903      	bls.n	8006082 <_svfiprintf_r+0x196>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0c8      	beq.n	8006010 <_svfiprintf_r+0x124>
 800607e:	9105      	str	r1, [sp, #20]
 8006080:	e7c6      	b.n	8006010 <_svfiprintf_r+0x124>
 8006082:	fb05 2101 	mla	r1, r5, r1, r2
 8006086:	2301      	movs	r3, #1
 8006088:	4607      	mov	r7, r0
 800608a:	e7f0      	b.n	800606e <_svfiprintf_r+0x182>
 800608c:	ab03      	add	r3, sp, #12
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	4622      	mov	r2, r4
 8006092:	4b11      	ldr	r3, [pc, #68]	; (80060d8 <_svfiprintf_r+0x1ec>)
 8006094:	a904      	add	r1, sp, #16
 8006096:	4640      	mov	r0, r8
 8006098:	f7fe f8ec 	bl	8004274 <_printf_float>
 800609c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80060a0:	4681      	mov	r9, r0
 80060a2:	d1d6      	bne.n	8006052 <_svfiprintf_r+0x166>
 80060a4:	89a3      	ldrh	r3, [r4, #12]
 80060a6:	065b      	lsls	r3, r3, #25
 80060a8:	f53f af35 	bmi.w	8005f16 <_svfiprintf_r+0x2a>
 80060ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060ae:	b01d      	add	sp, #116	; 0x74
 80060b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b4:	ab03      	add	r3, sp, #12
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	4622      	mov	r2, r4
 80060ba:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <_svfiprintf_r+0x1ec>)
 80060bc:	a904      	add	r1, sp, #16
 80060be:	4640      	mov	r0, r8
 80060c0:	f7fe fb84 	bl	80047cc <_printf_i>
 80060c4:	e7ea      	b.n	800609c <_svfiprintf_r+0x1b0>
 80060c6:	bf00      	nop
 80060c8:	08006374 	.word	0x08006374
 80060cc:	0800637a 	.word	0x0800637a
 80060d0:	0800637e 	.word	0x0800637e
 80060d4:	08004275 	.word	0x08004275
 80060d8:	08005e39 	.word	0x08005e39

080060dc <_sbrk_r>:
 80060dc:	b538      	push	{r3, r4, r5, lr}
 80060de:	2300      	movs	r3, #0
 80060e0:	4c05      	ldr	r4, [pc, #20]	; (80060f8 <_sbrk_r+0x1c>)
 80060e2:	4605      	mov	r5, r0
 80060e4:	4608      	mov	r0, r1
 80060e6:	6023      	str	r3, [r4, #0]
 80060e8:	f7fb ff62 	bl	8001fb0 <_sbrk>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d102      	bne.n	80060f6 <_sbrk_r+0x1a>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	b103      	cbz	r3, 80060f6 <_sbrk_r+0x1a>
 80060f4:	602b      	str	r3, [r5, #0]
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	200005b0 	.word	0x200005b0

080060fc <__ascii_mbtowc>:
 80060fc:	b082      	sub	sp, #8
 80060fe:	b901      	cbnz	r1, 8006102 <__ascii_mbtowc+0x6>
 8006100:	a901      	add	r1, sp, #4
 8006102:	b142      	cbz	r2, 8006116 <__ascii_mbtowc+0x1a>
 8006104:	b14b      	cbz	r3, 800611a <__ascii_mbtowc+0x1e>
 8006106:	7813      	ldrb	r3, [r2, #0]
 8006108:	600b      	str	r3, [r1, #0]
 800610a:	7812      	ldrb	r2, [r2, #0]
 800610c:	1c10      	adds	r0, r2, #0
 800610e:	bf18      	it	ne
 8006110:	2001      	movne	r0, #1
 8006112:	b002      	add	sp, #8
 8006114:	4770      	bx	lr
 8006116:	4610      	mov	r0, r2
 8006118:	e7fb      	b.n	8006112 <__ascii_mbtowc+0x16>
 800611a:	f06f 0001 	mvn.w	r0, #1
 800611e:	e7f8      	b.n	8006112 <__ascii_mbtowc+0x16>

08006120 <memmove>:
 8006120:	4288      	cmp	r0, r1
 8006122:	b510      	push	{r4, lr}
 8006124:	eb01 0302 	add.w	r3, r1, r2
 8006128:	d807      	bhi.n	800613a <memmove+0x1a>
 800612a:	1e42      	subs	r2, r0, #1
 800612c:	4299      	cmp	r1, r3
 800612e:	d00a      	beq.n	8006146 <memmove+0x26>
 8006130:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006134:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006138:	e7f8      	b.n	800612c <memmove+0xc>
 800613a:	4283      	cmp	r3, r0
 800613c:	d9f5      	bls.n	800612a <memmove+0xa>
 800613e:	1881      	adds	r1, r0, r2
 8006140:	1ad2      	subs	r2, r2, r3
 8006142:	42d3      	cmn	r3, r2
 8006144:	d100      	bne.n	8006148 <memmove+0x28>
 8006146:	bd10      	pop	{r4, pc}
 8006148:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800614c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006150:	e7f7      	b.n	8006142 <memmove+0x22>

08006152 <__malloc_lock>:
 8006152:	4770      	bx	lr

08006154 <__malloc_unlock>:
 8006154:	4770      	bx	lr

08006156 <_realloc_r>:
 8006156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006158:	4607      	mov	r7, r0
 800615a:	4614      	mov	r4, r2
 800615c:	460e      	mov	r6, r1
 800615e:	b921      	cbnz	r1, 800616a <_realloc_r+0x14>
 8006160:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006164:	4611      	mov	r1, r2
 8006166:	f7ff be0d 	b.w	8005d84 <_malloc_r>
 800616a:	b922      	cbnz	r2, 8006176 <_realloc_r+0x20>
 800616c:	f7ff fdbe 	bl	8005cec <_free_r>
 8006170:	4625      	mov	r5, r4
 8006172:	4628      	mov	r0, r5
 8006174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006176:	f000 f821 	bl	80061bc <_malloc_usable_size_r>
 800617a:	42a0      	cmp	r0, r4
 800617c:	d20f      	bcs.n	800619e <_realloc_r+0x48>
 800617e:	4621      	mov	r1, r4
 8006180:	4638      	mov	r0, r7
 8006182:	f7ff fdff 	bl	8005d84 <_malloc_r>
 8006186:	4605      	mov	r5, r0
 8006188:	2800      	cmp	r0, #0
 800618a:	d0f2      	beq.n	8006172 <_realloc_r+0x1c>
 800618c:	4631      	mov	r1, r6
 800618e:	4622      	mov	r2, r4
 8006190:	f7ff fab6 	bl	8005700 <memcpy>
 8006194:	4631      	mov	r1, r6
 8006196:	4638      	mov	r0, r7
 8006198:	f7ff fda8 	bl	8005cec <_free_r>
 800619c:	e7e9      	b.n	8006172 <_realloc_r+0x1c>
 800619e:	4635      	mov	r5, r6
 80061a0:	e7e7      	b.n	8006172 <_realloc_r+0x1c>

080061a2 <__ascii_wctomb>:
 80061a2:	b149      	cbz	r1, 80061b8 <__ascii_wctomb+0x16>
 80061a4:	2aff      	cmp	r2, #255	; 0xff
 80061a6:	bf8b      	itete	hi
 80061a8:	238a      	movhi	r3, #138	; 0x8a
 80061aa:	700a      	strbls	r2, [r1, #0]
 80061ac:	6003      	strhi	r3, [r0, #0]
 80061ae:	2001      	movls	r0, #1
 80061b0:	bf88      	it	hi
 80061b2:	f04f 30ff 	movhi.w	r0, #4294967295
 80061b6:	4770      	bx	lr
 80061b8:	4608      	mov	r0, r1
 80061ba:	4770      	bx	lr

080061bc <_malloc_usable_size_r>:
 80061bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c0:	1f18      	subs	r0, r3, #4
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	bfbc      	itt	lt
 80061c6:	580b      	ldrlt	r3, [r1, r0]
 80061c8:	18c0      	addlt	r0, r0, r3
 80061ca:	4770      	bx	lr

080061cc <_init>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	bf00      	nop
 80061d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d2:	bc08      	pop	{r3}
 80061d4:	469e      	mov	lr, r3
 80061d6:	4770      	bx	lr

080061d8 <_fini>:
 80061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061da:	bf00      	nop
 80061dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061de:	bc08      	pop	{r3}
 80061e0:	469e      	mov	lr, r3
 80061e2:	4770      	bx	lr
