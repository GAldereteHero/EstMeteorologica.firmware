
estMet_v0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007078  08007078  00017078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a4  080074a4  000202fc  2**0
                  CONTENTS
  4 .ARM          00000000  080074a4  080074a4  000202fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074a4  080074a4  000202fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074a8  080074a8  000174a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  080074ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200002fc  080077a8  000202fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  080077a8  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb21  00000000  00000000  00020325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277c  00000000  00000000  0002fe46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  000325c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00033300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019781  00000000  00000000  00033f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef60  00000000  00000000  0004d681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba97  00000000  00000000  0005c5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8078  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000475c  00000000  00000000  000e80cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002fc 	.word	0x200002fc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800705c 	.word	0x0800705c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000300 	.word	0x20000300
 800014c:	0800705c 	.word	0x0800705c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <delay>:
/********* Variables externas ***********/

extern char msg13[80];


void delay(uint16_t us){
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <delay+0x2c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000f96:	bf00      	nop
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <delay+0x2c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d3f9      	bcc.n	8000f98 <delay+0x14>
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	2000049c 	.word	0x2000049c

08000fb4 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	4619      	mov	r1, r3
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f001 fca9 	bl	8002938 <HAL_GPIO_Init>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001010:	2301      	movs	r3, #1
 8001012:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f001 fc8c 	bl	8002938 <HAL_GPIO_Init>
}
 8001020:	bf00      	nop
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <DS18B20_Start>:

/*********************************** DS18B20 FUNCTIONS ****************************************/

uint8_t DS18B20_Start (void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8001032:	2140      	movs	r1, #64	; 0x40
 8001034:	4813      	ldr	r0, [pc, #76]	; (8001084 <DS18B20_Start+0x5c>)
 8001036:	f7ff ffbd 	bl	8000fb4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);  // pull the pin low
 800103a:	2200      	movs	r2, #0
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	4811      	ldr	r0, [pc, #68]	; (8001084 <DS18B20_Start+0x5c>)
 8001040:	f001 fe15 	bl	8002c6e <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8001044:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001048:	f7ff ff9c 	bl	8000f84 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 800104c:	2140      	movs	r1, #64	; 0x40
 800104e:	480d      	ldr	r0, [pc, #52]	; (8001084 <DS18B20_Start+0x5c>)
 8001050:	f7ff ffcd 	bl	8000fee <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8001054:	2050      	movs	r0, #80	; 0x50
 8001056:	f7ff ff95 	bl	8000f84 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 800105a:	2140      	movs	r1, #64	; 0x40
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <DS18B20_Start+0x5c>)
 800105e:	f001 fdef 	bl	8002c40 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <DS18B20_Start+0x46>
 8001068:	2301      	movs	r3, #1
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	e001      	b.n	8001072 <DS18B20_Start+0x4a>
	else Response = -1;
 800106e:	23ff      	movs	r3, #255	; 0xff
 8001070:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 8001072:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001076:	f7ff ff85 	bl	8000f84 <delay>

	return Response;
 800107a:	79fb      	ldrb	r3, [r7, #7]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40010800 	.word	0x40010800

08001088 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001092:	2140      	movs	r1, #64	; 0x40
 8001094:	481e      	ldr	r0, [pc, #120]	; (8001110 <DS18B20_Write+0x88>)
 8001096:	f7ff ff8d 	bl	8000fb4 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	e02e      	b.n	80010fe <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80010a0:	79fa      	ldrb	r2, [r7, #7]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	fa42 f303 	asr.w	r3, r2, r3
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d013      	beq.n	80010d8 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80010b0:	2140      	movs	r1, #64	; 0x40
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <DS18B20_Write+0x88>)
 80010b4:	f7ff ff7e 	bl	8000fb4 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);  // pull the pin LOW
 80010b8:	2200      	movs	r2, #0
 80010ba:	2140      	movs	r1, #64	; 0x40
 80010bc:	4814      	ldr	r0, [pc, #80]	; (8001110 <DS18B20_Write+0x88>)
 80010be:	f001 fdd6 	bl	8002c6e <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80010c2:	2001      	movs	r0, #1
 80010c4:	f7ff ff5e 	bl	8000f84 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80010c8:	2140      	movs	r1, #64	; 0x40
 80010ca:	4811      	ldr	r0, [pc, #68]	; (8001110 <DS18B20_Write+0x88>)
 80010cc:	f7ff ff8f 	bl	8000fee <Set_Pin_Input>
			delay (50);  // wait for 60 us
 80010d0:	2032      	movs	r0, #50	; 0x32
 80010d2:	f7ff ff57 	bl	8000f84 <delay>
 80010d6:	e00f      	b.n	80010f8 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 80010d8:	2140      	movs	r1, #64	; 0x40
 80010da:	480d      	ldr	r0, [pc, #52]	; (8001110 <DS18B20_Write+0x88>)
 80010dc:	f7ff ff6a 	bl	8000fb4 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);  // pull the pin LOW
 80010e0:	2200      	movs	r2, #0
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	480a      	ldr	r0, [pc, #40]	; (8001110 <DS18B20_Write+0x88>)
 80010e6:	f001 fdc2 	bl	8002c6e <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 80010ea:	2032      	movs	r0, #50	; 0x32
 80010ec:	f7ff ff4a 	bl	8000f84 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <DS18B20_Write+0x88>)
 80010f4:	f7ff ff7b 	bl	8000fee <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b07      	cmp	r3, #7
 8001102:	ddcd      	ble.n	80010a0 <DS18B20_Write+0x18>
		}
	}
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40010800 	.word	0x40010800

08001114 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800111a:	2300      	movs	r3, #0
 800111c:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	481a      	ldr	r0, [pc, #104]	; (800118c <DS18B20_Read+0x78>)
 8001122:	f7ff ff64 	bl	8000fee <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	e026      	b.n	800117a <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 800112c:	2140      	movs	r1, #64	; 0x40
 800112e:	4817      	ldr	r0, [pc, #92]	; (800118c <DS18B20_Read+0x78>)
 8001130:	f7ff ff40 	bl	8000fb4 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);  // pull the data pin LOW
 8001134:	2200      	movs	r2, #0
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	4814      	ldr	r0, [pc, #80]	; (800118c <DS18B20_Read+0x78>)
 800113a:	f001 fd98 	bl	8002c6e <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 800113e:	2001      	movs	r0, #1
 8001140:	f7ff ff20 	bl	8000f84 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001144:	2140      	movs	r1, #64	; 0x40
 8001146:	4811      	ldr	r0, [pc, #68]	; (800118c <DS18B20_Read+0x78>)
 8001148:	f7ff ff51 	bl	8000fee <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 800114c:	2140      	movs	r1, #64	; 0x40
 800114e:	480f      	ldr	r0, [pc, #60]	; (800118c <DS18B20_Read+0x78>)
 8001150:	f001 fd76 	bl	8002c40 <HAL_GPIO_ReadPin>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d009      	beq.n	800116e <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 800115a:	2201      	movs	r2, #1
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	b25a      	sxtb	r2, r3
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4313      	orrs	r3, r2
 800116a:	b25b      	sxtb	r3, r3
 800116c:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 800116e:	2032      	movs	r0, #50	; 0x32
 8001170:	f7ff ff08 	bl	8000f84 <delay>
	for (int i=0;i<8;i++)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b07      	cmp	r3, #7
 800117e:	ddd5      	ble.n	800112c <DS18B20_Read+0x18>
	}
	return value;
 8001180:	79fb      	ldrb	r3, [r7, #7]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40010800 	.word	0x40010800

08001190 <getTemp>:

uint8_t getTemp(void){
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0

	float Temperatura = 0;
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
	uint8_t Temperature = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	76fb      	strb	r3, [r7, #27]
	const float RawHigh= 92.77;
 80011a0:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <getTemp+0x104>)
 80011a2:	617b      	str	r3, [r7, #20]
	const float RawLow= 0.93;
 80011a4:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <getTemp+0x108>)
 80011a6:	613b      	str	r3, [r7, #16]
	const float ReferenceHigh= 94;
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <getTemp+0x10c>)
 80011aa:	60fb      	str	r3, [r7, #12]
	const float ReferenceLow= 0.4;
 80011ac:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <getTemp+0x110>)
 80011ae:	60bb      	str	r3, [r7, #8]
	const float RawRange= RawHigh - RawLow;
 80011b0:	6939      	ldr	r1, [r7, #16]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff fc6c 	bl	8000a90 <__aeabi_fsub>
 80011b8:	4603      	mov	r3, r0
 80011ba:	607b      	str	r3, [r7, #4]
	const float ReferenceRange= ReferenceHigh - ReferenceLow;
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f7ff fc66 	bl	8000a90 <__aeabi_fsub>
 80011c4:	4603      	mov	r3, r0
 80011c6:	603b      	str	r3, [r7, #0]


	Presence = DS18B20_Start ();
 80011c8:	f7ff ff2e 	bl	8001028 <DS18B20_Start>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <getTemp+0x114>)
 80011d2:	701a      	strb	r2, [r3, #0]
	HAL_Delay (1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f001 fa7d 	bl	80026d4 <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 80011da:	20cc      	movs	r0, #204	; 0xcc
 80011dc:	f7ff ff54 	bl	8001088 <DS18B20_Write>
	DS18B20_Write (0x44);  // convert t
 80011e0:	2044      	movs	r0, #68	; 0x44
 80011e2:	f7ff ff51 	bl	8001088 <DS18B20_Write>
	HAL_Delay (800);
 80011e6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80011ea:	f001 fa73 	bl	80026d4 <HAL_Delay>

	Presence = DS18B20_Start ();
 80011ee:	f7ff ff1b 	bl	8001028 <DS18B20_Start>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <getTemp+0x114>)
 80011f8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f001 fa6a 	bl	80026d4 <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 8001200:	20cc      	movs	r0, #204	; 0xcc
 8001202:	f7ff ff41 	bl	8001088 <DS18B20_Write>
	DS18B20_Write (0xBE);  // Read Scratch-pad
 8001206:	20be      	movs	r0, #190	; 0xbe
 8001208:	f7ff ff3e 	bl	8001088 <DS18B20_Write>

	Temp_byte1 = DS18B20_Read();
 800120c:	f7ff ff82 	bl	8001114 <DS18B20_Read>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <getTemp+0x118>)
 8001216:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DS18B20_Read();
 8001218:	f7ff ff7c 	bl	8001114 <DS18B20_Read>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <getTemp+0x11c>)
 8001222:	701a      	strb	r2, [r3, #0]
	tem = (Temp_byte2<<8)|Temp_byte1;
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <getTemp+0x11c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b21a      	sxth	r2, r3
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <getTemp+0x118>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b21b      	sxth	r3, r3
 8001232:	4313      	orrs	r3, r2
 8001234:	b21b      	sxth	r3, r3
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <getTemp+0x120>)
 800123a:	801a      	strh	r2, [r3, #0]
	Temperatura = (float)tem/16;
 800123c:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <getTemp+0x120>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fcd7 	bl	8000bf4 <__aeabi_ui2f>
 8001246:	4603      	mov	r3, r0
 8001248:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fddd 	bl	8000e0c <__aeabi_fdiv>
 8001252:	4603      	mov	r3, r0
 8001254:	61fb      	str	r3, [r7, #28]
	Temperatura = (((Temperatura - RawLow)*ReferenceRange)/RawRange)+ReferenceLow;
 8001256:	6939      	ldr	r1, [r7, #16]
 8001258:	69f8      	ldr	r0, [r7, #28]
 800125a:	f7ff fc19 	bl	8000a90 <__aeabi_fsub>
 800125e:	4603      	mov	r3, r0
 8001260:	6839      	ldr	r1, [r7, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fd1e 	bl	8000ca4 <__aeabi_fmul>
 8001268:	4603      	mov	r3, r0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fdcd 	bl	8000e0c <__aeabi_fdiv>
 8001272:	4603      	mov	r3, r0
 8001274:	4619      	mov	r1, r3
 8001276:	68b8      	ldr	r0, [r7, #8]
 8001278:	f7ff fc0c 	bl	8000a94 <__addsf3>
 800127c:	4603      	mov	r3, r0
 800127e:	61fb      	str	r3, [r7, #28]
	Temperature = (uint8_t)Temperatura;
 8001280:	69f8      	ldr	r0, [r7, #28]
 8001282:	f7ff fe5f 	bl	8000f44 <__aeabi_f2uiz>
 8001286:	4603      	mov	r3, r0
 8001288:	76fb      	strb	r3, [r7, #27]

	return(Temperature);
 800128a:	7efb      	ldrb	r3, [r7, #27]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	42b98a3d 	.word	0x42b98a3d
 8001298:	3f6e147b 	.word	0x3f6e147b
 800129c:	42bc0000 	.word	0x42bc0000
 80012a0:	3ecccccd 	.word	0x3ecccccd
 80012a4:	20000318 	.word	0x20000318
 80012a8:	20000330 	.word	0x20000330
 80012ac:	20000334 	.word	0x20000334
 80012b0:	20000332 	.word	0x20000332

080012b4 <sendTemp>:

void sendTemp(void){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

	if(cont_temp <= 9){
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <sendTemp+0x34>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b09      	cmp	r3, #9
 80012be:	d806      	bhi.n	80012ce <sendTemp+0x1a>
		cont_temp++;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <sendTemp+0x34>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <sendTemp+0x34>)
 80012ca:	701a      	strb	r2, [r3, #0]
		initModule();
//		updateTemperature(msg13, getTemp());
		uploadDataToServer(2);
		resetModule();
	}
}
 80012cc:	e009      	b.n	80012e2 <sendTemp+0x2e>
		cont_temp = 1;
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <sendTemp+0x34>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
		initModule();
 80012d4:	f000 fa18 	bl	8001708 <initModule>
		uploadDataToServer(2);
 80012d8:	2002      	movs	r0, #2
 80012da:	f000 fb01 	bl	80018e0 <uploadDataToServer>
		resetModule();
 80012de:	f000 fab1 	bl	8001844 <resetModule>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000000 	.word	0x20000000

080012ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001300:	4b52      	ldr	r3, [pc, #328]	; (800144c <MX_GPIO_Init+0x160>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a51      	ldr	r2, [pc, #324]	; (800144c <MX_GPIO_Init+0x160>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b4f      	ldr	r3, [pc, #316]	; (800144c <MX_GPIO_Init+0x160>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001318:	4b4c      	ldr	r3, [pc, #304]	; (800144c <MX_GPIO_Init+0x160>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a4b      	ldr	r2, [pc, #300]	; (800144c <MX_GPIO_Init+0x160>)
 800131e:	f043 0320 	orr.w	r3, r3, #32
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b49      	ldr	r3, [pc, #292]	; (800144c <MX_GPIO_Init+0x160>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b46      	ldr	r3, [pc, #280]	; (800144c <MX_GPIO_Init+0x160>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a45      	ldr	r2, [pc, #276]	; (800144c <MX_GPIO_Init+0x160>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b43      	ldr	r3, [pc, #268]	; (800144c <MX_GPIO_Init+0x160>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	4b40      	ldr	r3, [pc, #256]	; (800144c <MX_GPIO_Init+0x160>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a3f      	ldr	r2, [pc, #252]	; (800144c <MX_GPIO_Init+0x160>)
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b3d      	ldr	r3, [pc, #244]	; (800144c <MX_GPIO_Init+0x160>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001366:	483a      	ldr	r0, [pc, #232]	; (8001450 <MX_GPIO_Init+0x164>)
 8001368:	f001 fc81 	bl	8002c6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Reset_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2142      	movs	r1, #66	; 0x42
 8001370:	4838      	ldr	r0, [pc, #224]	; (8001454 <MX_GPIO_Init+0x168>)
 8001372:	f001 fc7c 	bl	8002c6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_A6_Pin|RST_A6_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800137c:	4836      	ldr	r0, [pc, #216]	; (8001458 <MX_GPIO_Init+0x16c>)
 800137e:	f001 fc76 	bl	8002c6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8001382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2302      	movs	r3, #2
 8001392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4619      	mov	r1, r3
 800139a:	482d      	ldr	r0, [pc, #180]	; (8001450 <MX_GPIO_Init+0x164>)
 800139c:	f001 facc 	bl	8002938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013a0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	2303      	movs	r3, #3
 80013a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	4619      	mov	r1, r3
 80013b0:	4827      	ldr	r0, [pc, #156]	; (8001450 <MX_GPIO_Init+0x164>)
 80013b2:	f001 fac1 	bl	8002938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 80013b6:	f649 13b1 	movw	r3, #39345	; 0x99b1
 80013ba:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013bc:	2303      	movs	r3, #3
 80013be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	4823      	ldr	r0, [pc, #140]	; (8001454 <MX_GPIO_Init+0x168>)
 80013c8:	f001 fab6 	bl	8002938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Reset_Pin|DS18B20_Pin;
 80013cc:	2342      	movs	r3, #66	; 0x42
 80013ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2302      	movs	r3, #2
 80013da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	481c      	ldr	r0, [pc, #112]	; (8001454 <MX_GPIO_Init+0x168>)
 80013e4:	f001 faa8 	bl	8002938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_MAG_Pin;
 80013e8:	2301      	movs	r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_GPIO_Init+0x170>)
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SENSOR_MAG_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4619      	mov	r1, r3
 80013fa:	4817      	ldr	r0, [pc, #92]	; (8001458 <MX_GPIO_Init+0x16c>)
 80013fc:	f001 fa9c 	bl	8002938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB14 PB15 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8001400:	f64c 73f6 	movw	r3, #53238	; 0xcff6
 8001404:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001406:	2303      	movs	r3, #3
 8001408:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4619      	mov	r1, r3
 8001410:	4811      	ldr	r0, [pc, #68]	; (8001458 <MX_GPIO_Init+0x16c>)
 8001412:	f001 fa91 	bl	8002938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_A6_Pin|RST_A6_Pin;
 8001416:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800141a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2302      	movs	r3, #2
 8001426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4619      	mov	r1, r3
 800142e:	480a      	ldr	r0, [pc, #40]	; (8001458 <MX_GPIO_Init+0x16c>)
 8001430:	f001 fa82 	bl	8002938 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2106      	movs	r1, #6
 8001438:	2006      	movs	r0, #6
 800143a:	f001 fa46 	bl	80028ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800143e:	2006      	movs	r0, #6
 8001440:	f001 fa5f 	bl	8002902 <HAL_NVIC_EnableIRQ>

}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	40011000 	.word	0x40011000
 8001454:	40010800 	.word	0x40010800
 8001458:	40010c00 	.word	0x40010c00
 800145c:	10110000 	.word	0x10110000

08001460 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001468:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800146c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d013      	beq.n	80014a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001478:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800147c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001480:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00b      	beq.n	80014a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001488:	e000      	b.n	800148c <ITM_SendChar+0x2c>
    {
      __NOP();
 800148a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800148c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f9      	beq.n	800148a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001496:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
	int i;
	for (i = 0; i < len; i++) {
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e009      	b.n	80014d2 <_write+0x26>
		ITM_SendChar(*ptr++);
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	60ba      	str	r2, [r7, #8]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ffca 	bl	8001460 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3301      	adds	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	dbf1      	blt.n	80014be <_write+0x12>
	}
	return len;
 80014da:	687b      	ldr	r3, [r7, #4]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e8:	f001 f892 	bl	8002610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ec:	f000 f826 	bl	800153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f0:	f7ff fefc 	bl	80012ec <MX_GPIO_Init>
  MX_TIM4_Init();
 80014f4:	f000 feec 	bl	80022d0 <MX_TIM4_Init>
  MX_TIM1_Init();
 80014f8:	f000 fe4c 	bl	8002194 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80014fc:	f000 ff8a 	bl	8002414 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001500:	f000 fe98 	bl	8002234 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001504:	f000 ffb0 	bl	8002468 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8001508:	4809      	ldr	r0, [pc, #36]	; (8001530 <main+0x4c>)
 800150a:	f002 f863 	bl	80035d4 <HAL_TIM_Base_Start>

  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <main+0x50>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f06f 0201 	mvn.w	r2, #1
 8001516:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim2);
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <main+0x50>)
 800151a:	f002 f8a5 	bl	8003668 <HAL_TIM_Base_Start_IT>

  __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <main+0x54>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f06f 0201 	mvn.w	r2, #1
 8001526:	611a      	str	r2, [r3, #16]

  resetModule();
 8001528:	f000 f98c 	bl	8001844 <resetModule>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800152c:	e7fe      	b.n	800152c <main+0x48>
 800152e:	bf00      	nop
 8001530:	2000049c 	.word	0x2000049c
 8001534:	200004e4 	.word	0x200004e4
 8001538:	20000454 	.word	0x20000454

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b090      	sub	sp, #64	; 0x40
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	f107 0318 	add.w	r3, r7, #24
 8001546:	2228      	movs	r2, #40	; 0x28
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f002 fee4 	bl	8004318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800155e:	2301      	movs	r3, #1
 8001560:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001566:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156c:	2301      	movs	r3, #1
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001570:	2302      	movs	r3, #2
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800157a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001580:	f107 0318 	add.w	r3, r7, #24
 8001584:	4618      	mov	r0, r3
 8001586:	f001 fbbb 	bl	8002d00 <HAL_RCC_OscConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001590:	f000 f844 	bl	800161c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001594:	230f      	movs	r3, #15
 8001596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001598:	2302      	movs	r3, #2
 800159a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80015a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2102      	movs	r1, #2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 fe26 	bl	8003200 <HAL_RCC_ClockConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015ba:	f000 f82f 	bl	800161c <Error_Handler>
  }
}
 80015be:	bf00      	nop
 80015c0:	3740      	adds	r7, #64	; 0x40
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	80fb      	strh	r3, [r7, #6]

	startRain();
 80015d0:	f000 fca2 	bl	8001f18 <startRain>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ec:	d106      	bne.n	80015fc <HAL_TIM_PeriodElapsedCallback+0x20>
		HAL_GPIO_TogglePin(RED_LED_GPIO_Port,RED_LED_Pin);
 80015ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015f2:	4808      	ldr	r0, [pc, #32]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015f4:	f001 fb53 	bl	8002c9e <HAL_GPIO_TogglePin>
		sendTemp(); // Se activa cada 3 minutos
 80015f8:	f7ff fe5c 	bl	80012b4 <sendTemp>
	}

	if (htim->Instance == TIM4){
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_TIM_PeriodElapsedCallback+0x2e>
		sendIncrement();// Se activa cada 1 minuto
 8001606:	f000 fc39 	bl	8001e7c <sendIncrement>
	}
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40011000 	.word	0x40011000
 8001618:	40000800 	.word	0x40000800

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while (1){
		HAL_GPIO_TogglePin(RED_LED_GPIO_Port,RED_LED_Pin);
 8001620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001624:	4803      	ldr	r0, [pc, #12]	; (8001634 <Error_Handler+0x18>)
 8001626:	f001 fb3a 	bl	8002c9e <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800162a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162e:	f001 f851 	bl	80026d4 <HAL_Delay>
		HAL_GPIO_TogglePin(RED_LED_GPIO_Port,RED_LED_Pin);
 8001632:	e7f5      	b.n	8001620 <Error_Handler+0x4>
 8001634:	40011000 	.word	0x40011000

08001638 <checkAnswer>:

statesMefUart state;

/*********Funciones***********/

_Bool checkAnswer( uint8_t answerOption ){
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]

	switch ( answerOption ){
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d03a      	beq.n	80016be <checkAnswer+0x86>
 8001648:	2b03      	cmp	r3, #3
 800164a:	dc52      	bgt.n	80016f2 <checkAnswer+0xba>
 800164c:	2b01      	cmp	r3, #1
 800164e:	d002      	beq.n	8001656 <checkAnswer+0x1e>
 8001650:	2b02      	cmp	r3, #2
 8001652:	d01a      	beq.n	800168a <checkAnswer+0x52>
 8001654:	e04d      	b.n	80016f2 <checkAnswer+0xba>
		case 1:{
			for(uint8_t i = 0; i <= sizeRxBuffer; i++){
 8001656:	2300      	movs	r3, #0
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	e00f      	b.n	800167c <checkAnswer+0x44>
				if(rxBuffer[i] == 'O' && rxBuffer[i+1] == 'K' ){ return 1; }
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	4a28      	ldr	r2, [pc, #160]	; (8001700 <checkAnswer+0xc8>)
 8001660:	5cd3      	ldrb	r3, [r2, r3]
 8001662:	2b4f      	cmp	r3, #79	; 0x4f
 8001664:	d107      	bne.n	8001676 <checkAnswer+0x3e>
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	3301      	adds	r3, #1
 800166a:	4a25      	ldr	r2, [pc, #148]	; (8001700 <checkAnswer+0xc8>)
 800166c:	5cd3      	ldrb	r3, [r2, r3]
 800166e:	2b4b      	cmp	r3, #75	; 0x4b
 8001670:	d101      	bne.n	8001676 <checkAnswer+0x3e>
 8001672:	2301      	movs	r3, #1
 8001674:	e03e      	b.n	80016f4 <checkAnswer+0xbc>
			for(uint8_t i = 0; i <= sizeRxBuffer; i++){
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	3301      	adds	r3, #1
 800167a:	73fb      	strb	r3, [r7, #15]
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <checkAnswer+0xcc>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	7bfa      	ldrb	r2, [r7, #15]
 8001682:	429a      	cmp	r2, r3
 8001684:	d9ea      	bls.n	800165c <checkAnswer+0x24>
			}
			return 0;
 8001686:	2300      	movs	r3, #0
 8001688:	e034      	b.n	80016f4 <checkAnswer+0xbc>
		}break;

		case 2:{
			for(uint8_t i = 0; i <= sizeRxBuffer; i++){
 800168a:	2300      	movs	r3, #0
 800168c:	73bb      	strb	r3, [r7, #14]
 800168e:	e00f      	b.n	80016b0 <checkAnswer+0x78>
				if(rxBuffer[i] == 'C' && rxBuffer[i+1] == 'O' ){ return 1; }
 8001690:	7bbb      	ldrb	r3, [r7, #14]
 8001692:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <checkAnswer+0xc8>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	2b43      	cmp	r3, #67	; 0x43
 8001698:	d107      	bne.n	80016aa <checkAnswer+0x72>
 800169a:	7bbb      	ldrb	r3, [r7, #14]
 800169c:	3301      	adds	r3, #1
 800169e:	4a18      	ldr	r2, [pc, #96]	; (8001700 <checkAnswer+0xc8>)
 80016a0:	5cd3      	ldrb	r3, [r2, r3]
 80016a2:	2b4f      	cmp	r3, #79	; 0x4f
 80016a4:	d101      	bne.n	80016aa <checkAnswer+0x72>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e024      	b.n	80016f4 <checkAnswer+0xbc>
			for(uint8_t i = 0; i <= sizeRxBuffer; i++){
 80016aa:	7bbb      	ldrb	r3, [r7, #14]
 80016ac:	3301      	adds	r3, #1
 80016ae:	73bb      	strb	r3, [r7, #14]
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <checkAnswer+0xcc>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	7bba      	ldrb	r2, [r7, #14]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d9ea      	bls.n	8001690 <checkAnswer+0x58>
			}
			return 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e01a      	b.n	80016f4 <checkAnswer+0xbc>
		}break;

		case 3:{
			for(uint8_t i = 0; i <= sizeRxBuffer; i++){
 80016be:	2300      	movs	r3, #0
 80016c0:	737b      	strb	r3, [r7, #13]
 80016c2:	e00f      	b.n	80016e4 <checkAnswer+0xac>
				if(rxBuffer[i] == '1' && rxBuffer[i+2] == '1' ){ return 1; }
 80016c4:	7b7b      	ldrb	r3, [r7, #13]
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <checkAnswer+0xc8>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	2b31      	cmp	r3, #49	; 0x31
 80016cc:	d107      	bne.n	80016de <checkAnswer+0xa6>
 80016ce:	7b7b      	ldrb	r3, [r7, #13]
 80016d0:	3302      	adds	r3, #2
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <checkAnswer+0xc8>)
 80016d4:	5cd3      	ldrb	r3, [r2, r3]
 80016d6:	2b31      	cmp	r3, #49	; 0x31
 80016d8:	d101      	bne.n	80016de <checkAnswer+0xa6>
 80016da:	2301      	movs	r3, #1
 80016dc:	e00a      	b.n	80016f4 <checkAnswer+0xbc>
			for(uint8_t i = 0; i <= sizeRxBuffer; i++){
 80016de:	7b7b      	ldrb	r3, [r7, #13]
 80016e0:	3301      	adds	r3, #1
 80016e2:	737b      	strb	r3, [r7, #13]
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <checkAnswer+0xcc>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	7b7a      	ldrb	r2, [r7, #13]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d9ea      	bls.n	80016c4 <checkAnswer+0x8c>
			}
			return 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e000      	b.n	80016f4 <checkAnswer+0xbc>
		}break;

		default:{
			return 0;
 80016f2:	2300      	movs	r3, #0
		}break;
	}

}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	2000038c 	.word	0x2000038c
 8001704:	20000001 	.word	0x20000001

08001708 <initModule>:

void initModule(void){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(PWR_A6_GPIO_Port, PWR_A6_Pin, GPIO_PIN_SET);
 800170e:	2201      	movs	r2, #1
 8001710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001714:	4843      	ldr	r0, [pc, #268]	; (8001824 <initModule+0x11c>)
 8001716:	f001 faaa 	bl	8002c6e <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800171a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800171e:	f000 ffd9 	bl	80026d4 <HAL_Delay>
	HAL_GPIO_WritePin(PWR_A6_GPIO_Port, PWR_A6_Pin, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001728:	483e      	ldr	r0, [pc, #248]	; (8001824 <initModule+0x11c>)
 800172a:	f001 faa0 	bl	8002c6e <HAL_GPIO_WritePin>
	HAL_Delay(15000);
 800172e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001732:	f000 ffcf 	bl	80026d4 <HAL_Delay>

	memset(rxBuffer, 0, sizeRxBuffer);
 8001736:	4b3c      	ldr	r3, [pc, #240]	; (8001828 <initModule+0x120>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	2100      	movs	r1, #0
 800173e:	483b      	ldr	r0, [pc, #236]	; (800182c <initModule+0x124>)
 8001740:	f002 fdea 	bl	8004318 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t *)msg17, sizeof(msg17), 500);	// "AT+IPR?"
 8001744:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001748:	2209      	movs	r2, #9
 800174a:	4939      	ldr	r1, [pc, #228]	; (8001830 <initModule+0x128>)
 800174c:	4839      	ldr	r0, [pc, #228]	; (8001834 <initModule+0x12c>)
 800174e:	f002 fbb0 	bl	8003eb2 <HAL_UART_Transmit>
	while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 1000) == HAL_BUSY){}
 8001752:	bf00      	nop
 8001754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001758:	22c8      	movs	r2, #200	; 0xc8
 800175a:	4934      	ldr	r1, [pc, #208]	; (800182c <initModule+0x124>)
 800175c:	4835      	ldr	r0, [pc, #212]	; (8001834 <initModule+0x12c>)
 800175e:	f002 fc3a 	bl	8003fd6 <HAL_UART_Receive>
 8001762:	4603      	mov	r3, r0
 8001764:	2b02      	cmp	r3, #2
 8001766:	d0f5      	beq.n	8001754 <initModule+0x4c>
	HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001768:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800176c:	22c8      	movs	r2, #200	; 0xc8
 800176e:	492f      	ldr	r1, [pc, #188]	; (800182c <initModule+0x124>)
 8001770:	4831      	ldr	r0, [pc, #196]	; (8001838 <initModule+0x130>)
 8001772:	f002 fb9e 	bl	8003eb2 <HAL_UART_Transmit>

	for(uint8_t i=1; i<=3; i++){
 8001776:	2301      	movs	r3, #1
 8001778:	71fb      	strb	r3, [r7, #7]
 800177a:	e04a      	b.n	8001812 <initModule+0x10a>

		memset(rxBuffer, 0, sizeRxBuffer);
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <initModule+0x120>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	2100      	movs	r1, #0
 8001784:	4829      	ldr	r0, [pc, #164]	; (800182c <initModule+0x124>)
 8001786:	f002 fdc7 	bl	8004318 <memset>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg0, sizeof(msg0), 500);	// "AT"
 800178a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800178e:	2204      	movs	r2, #4
 8001790:	492a      	ldr	r1, [pc, #168]	; (800183c <initModule+0x134>)
 8001792:	4828      	ldr	r0, [pc, #160]	; (8001834 <initModule+0x12c>)
 8001794:	f002 fb8d 	bl	8003eb2 <HAL_UART_Transmit>
		while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 1000) == HAL_BUSY){}
 8001798:	bf00      	nop
 800179a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179e:	22c8      	movs	r2, #200	; 0xc8
 80017a0:	4922      	ldr	r1, [pc, #136]	; (800182c <initModule+0x124>)
 80017a2:	4824      	ldr	r0, [pc, #144]	; (8001834 <initModule+0x12c>)
 80017a4:	f002 fc17 	bl	8003fd6 <HAL_UART_Receive>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d0f5      	beq.n	800179a <initModule+0x92>
		HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 80017ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017b2:	22c8      	movs	r2, #200	; 0xc8
 80017b4:	491d      	ldr	r1, [pc, #116]	; (800182c <initModule+0x124>)
 80017b6:	4820      	ldr	r0, [pc, #128]	; (8001838 <initModule+0x130>)
 80017b8:	f002 fb7b 	bl	8003eb2 <HAL_UART_Transmit>

		memset(rxBuffer, 0, sizeRxBuffer);
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <initModule+0x120>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	2100      	movs	r1, #0
 80017c4:	4819      	ldr	r0, [pc, #100]	; (800182c <initModule+0x124>)
 80017c6:	f002 fda7 	bl	8004318 <memset>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg12, sizeof(msg12), 500);	// "AT+CREG?"
 80017ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017ce:	220a      	movs	r2, #10
 80017d0:	491b      	ldr	r1, [pc, #108]	; (8001840 <initModule+0x138>)
 80017d2:	4818      	ldr	r0, [pc, #96]	; (8001834 <initModule+0x12c>)
 80017d4:	f002 fb6d 	bl	8003eb2 <HAL_UART_Transmit>
		while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 1000) == HAL_BUSY){}
 80017d8:	bf00      	nop
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	22c8      	movs	r2, #200	; 0xc8
 80017e0:	4912      	ldr	r1, [pc, #72]	; (800182c <initModule+0x124>)
 80017e2:	4814      	ldr	r0, [pc, #80]	; (8001834 <initModule+0x12c>)
 80017e4:	f002 fbf7 	bl	8003fd6 <HAL_UART_Receive>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d0f5      	beq.n	80017da <initModule+0xd2>
		HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 80017ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017f2:	22c8      	movs	r2, #200	; 0xc8
 80017f4:	490d      	ldr	r1, [pc, #52]	; (800182c <initModule+0x124>)
 80017f6:	4810      	ldr	r0, [pc, #64]	; (8001838 <initModule+0x130>)
 80017f8:	f002 fb5b 	bl	8003eb2 <HAL_UART_Transmit>

		if( checkAnswer(3) == 1 ){ i = 4;}
 80017fc:	2003      	movs	r0, #3
 80017fe:	f7ff ff1b 	bl	8001638 <checkAnswer>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <initModule+0x104>
 8001808:	2304      	movs	r3, #4
 800180a:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=1; i<=3; i++){
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	3301      	adds	r3, #1
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d9b1      	bls.n	800177c <initModule+0x74>
		else{/*Error_Handler();*/}
	}
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40010c00 	.word	0x40010c00
 8001828:	20000001 	.word	0x20000001
 800182c:	2000038c 	.word	0x2000038c
 8001830:	20000114 	.word	0x20000114
 8001834:	2000052c 	.word	0x2000052c
 8001838:	2000056c 	.word	0x2000056c
 800183c:	20000008 	.word	0x20000008
 8001840:	20000108 	.word	0x20000108

08001844 <resetModule>:

void resetModule(void){
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_A6_GPIO_Port, RST_A6_Pin, GPIO_PIN_SET);
 8001848:	2201      	movs	r2, #1
 800184a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800184e:	4807      	ldr	r0, [pc, #28]	; (800186c <resetModule+0x28>)
 8001850:	f001 fa0d 	bl	8002c6e <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8001854:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001858:	f000 ff3c 	bl	80026d4 <HAL_Delay>
	HAL_GPIO_WritePin(RST_A6_GPIO_Port, RST_A6_Pin, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001862:	4802      	ldr	r0, [pc, #8]	; (800186c <resetModule+0x28>)
 8001864:	f001 fa03 	bl	8002c6e <HAL_GPIO_WritePin>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40010c00 	.word	0x40010c00

08001870 <updateTemperature>:

void updateTemperature(char *pAux, uint8_t temp){
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	70fb      	strb	r3, [r7, #3]

	memset(msg13, 0, sizeof(msg13));
 800187c:	2250      	movs	r2, #80	; 0x50
 800187e:	2100      	movs	r1, #0
 8001880:	4806      	ldr	r0, [pc, #24]	; (800189c <updateTemperature+0x2c>)
 8001882:	f002 fd49 	bl	8004318 <memset>
	sprintf(pAux,"%sfield2=%d\r\n",msg10,temp);
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <updateTemperature+0x30>)
 800188a:	4906      	ldr	r1, [pc, #24]	; (80018a4 <updateTemperature+0x34>)
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f003 f9ab 	bl	8004be8 <siprintf>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000338 	.word	0x20000338
 80018a0:	200000b8 	.word	0x200000b8
 80018a4:	08007078 	.word	0x08007078

080018a8 <updatePluviometer>:

void updatePluviometer(char *pAux, uint8_t mili){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]

	memset(msg13, 0, sizeof(msg13));
 80018b4:	2250      	movs	r2, #80	; 0x50
 80018b6:	2100      	movs	r1, #0
 80018b8:	4806      	ldr	r0, [pc, #24]	; (80018d4 <updatePluviometer+0x2c>)
 80018ba:	f002 fd2d 	bl	8004318 <memset>
	sprintf(pAux,"%sfield1=%d\r\n",msg10,mili);
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <updatePluviometer+0x30>)
 80018c2:	4906      	ldr	r1, [pc, #24]	; (80018dc <updatePluviometer+0x34>)
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f003 f98f 	bl	8004be8 <siprintf>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000338 	.word	0x20000338
 80018d8:	200000b8 	.word	0x200000b8
 80018dc:	08007088 	.word	0x08007088

080018e0 <uploadDataToServer>:

#ifdef CHIP_PERSONAL

_Bool uploadDataToServer (uint8_t topic){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]

	uint8_t errorCount = 1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
	state = STATE_1;
 80018ee:	4bb0      	ldr	r3, [pc, #704]	; (8001bb0 <uploadDataToServer+0x2d0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]

	for (uint8_t loopCount = 0; loopCount <= 10; loopCount++ ){
 80018f4:	2300      	movs	r3, #0
 80018f6:	73bb      	strb	r3, [r7, #14]
 80018f8:	e28f      	b.n	8001e1a <uploadDataToServer+0x53a>
		if ( errorCount <= 3){
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	f200 8283 	bhi.w	8001e08 <uploadDataToServer+0x528>

			switch( state ){
 8001902:	4bab      	ldr	r3, [pc, #684]	; (8001bb0 <uploadDataToServer+0x2d0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b0a      	cmp	r3, #10
 8001908:	f200 8278 	bhi.w	8001dfc <uploadDataToServer+0x51c>
 800190c:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <uploadDataToServer+0x34>)
 800190e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001912:	bf00      	nop
 8001914:	08001941 	.word	0x08001941
 8001918:	080019a9 	.word	0x080019a9
 800191c:	08001a11 	.word	0x08001a11
 8001920:	08001a79 	.word	0x08001a79
 8001924:	08001ae1 	.word	0x08001ae1
 8001928:	08001b49 	.word	0x08001b49
 800192c:	08001bdd 	.word	0x08001bdd
 8001930:	08001c45 	.word	0x08001c45
 8001934:	08001cad 	.word	0x08001cad
 8001938:	08001d15 	.word	0x08001d15
 800193c:	08001dc3 	.word	0x08001dc3

				case STATE_1:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001940:	4b9c      	ldr	r3, [pc, #624]	; (8001bb4 <uploadDataToServer+0x2d4>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	2100      	movs	r1, #0
 8001948:	489b      	ldr	r0, [pc, #620]	; (8001bb8 <uploadDataToServer+0x2d8>)
 800194a:	f002 fce5 	bl	8004318 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg0, sizeof(msg0), 500);	// "AT"
 800194e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001952:	2204      	movs	r2, #4
 8001954:	4999      	ldr	r1, [pc, #612]	; (8001bbc <uploadDataToServer+0x2dc>)
 8001956:	489a      	ldr	r0, [pc, #616]	; (8001bc0 <uploadDataToServer+0x2e0>)
 8001958:	f002 faab 	bl	8003eb2 <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 800195c:	bf00      	nop
 800195e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001962:	22c8      	movs	r2, #200	; 0xc8
 8001964:	4994      	ldr	r1, [pc, #592]	; (8001bb8 <uploadDataToServer+0x2d8>)
 8001966:	4896      	ldr	r0, [pc, #600]	; (8001bc0 <uploadDataToServer+0x2e0>)
 8001968:	f002 fb35 	bl	8003fd6 <HAL_UART_Receive>
 800196c:	4603      	mov	r3, r0
 800196e:	2b02      	cmp	r3, #2
 8001970:	d0f5      	beq.n	800195e <uploadDataToServer+0x7e>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001972:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001976:	22c8      	movs	r2, #200	; 0xc8
 8001978:	498f      	ldr	r1, [pc, #572]	; (8001bb8 <uploadDataToServer+0x2d8>)
 800197a:	4892      	ldr	r0, [pc, #584]	; (8001bc4 <uploadDataToServer+0x2e4>)
 800197c:	f002 fa99 	bl	8003eb2 <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_2; }
 8001980:	2001      	movs	r0, #1
 8001982:	f7ff fe59 	bl	8001638 <checkAnswer>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <uploadDataToServer+0xb4>
 800198c:	4b88      	ldr	r3, [pc, #544]	; (8001bb0 <uploadDataToServer+0x2d0>)
 800198e:	2201      	movs	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_1; loopCount--;}
				}break;
 8001992:	e23f      	b.n	8001e14 <uploadDataToServer+0x534>
					else{ errorCount++; state = STATE_1; loopCount--;}
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	3301      	adds	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	4b85      	ldr	r3, [pc, #532]	; (8001bb0 <uploadDataToServer+0x2d0>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	7bbb      	ldrb	r3, [r7, #14]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	73bb      	strb	r3, [r7, #14]
				}break;
 80019a6:	e235      	b.n	8001e14 <uploadDataToServer+0x534>

				case STATE_2:{
					memset(rxBuffer, 0, sizeRxBuffer);
 80019a8:	4b82      	ldr	r3, [pc, #520]	; (8001bb4 <uploadDataToServer+0x2d4>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	2100      	movs	r1, #0
 80019b0:	4881      	ldr	r0, [pc, #516]	; (8001bb8 <uploadDataToServer+0x2d8>)
 80019b2:	f002 fcb1 	bl	8004318 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg1, sizeof(msg1), 500);	// "AT+CGATT?"
 80019b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019ba:	220b      	movs	r2, #11
 80019bc:	4982      	ldr	r1, [pc, #520]	; (8001bc8 <uploadDataToServer+0x2e8>)
 80019be:	4880      	ldr	r0, [pc, #512]	; (8001bc0 <uploadDataToServer+0x2e0>)
 80019c0:	f002 fa77 	bl	8003eb2 <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 80019c4:	bf00      	nop
 80019c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80019ca:	22c8      	movs	r2, #200	; 0xc8
 80019cc:	497a      	ldr	r1, [pc, #488]	; (8001bb8 <uploadDataToServer+0x2d8>)
 80019ce:	487c      	ldr	r0, [pc, #496]	; (8001bc0 <uploadDataToServer+0x2e0>)
 80019d0:	f002 fb01 	bl	8003fd6 <HAL_UART_Receive>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d0f5      	beq.n	80019c6 <uploadDataToServer+0xe6>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 80019da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019de:	22c8      	movs	r2, #200	; 0xc8
 80019e0:	4975      	ldr	r1, [pc, #468]	; (8001bb8 <uploadDataToServer+0x2d8>)
 80019e2:	4878      	ldr	r0, [pc, #480]	; (8001bc4 <uploadDataToServer+0x2e4>)
 80019e4:	f002 fa65 	bl	8003eb2 <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_3; }
 80019e8:	2001      	movs	r0, #1
 80019ea:	f7ff fe25 	bl	8001638 <checkAnswer>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <uploadDataToServer+0x11c>
 80019f4:	4b6e      	ldr	r3, [pc, #440]	; (8001bb0 <uploadDataToServer+0x2d0>)
 80019f6:	2202      	movs	r2, #2
 80019f8:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_2; loopCount--;}
				}break;
 80019fa:	e20b      	b.n	8001e14 <uploadDataToServer+0x534>
					else{ errorCount++; state = STATE_2; loopCount--;}
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	3301      	adds	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	4b6b      	ldr	r3, [pc, #428]	; (8001bb0 <uploadDataToServer+0x2d0>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	73bb      	strb	r3, [r7, #14]
				}break;
 8001a0e:	e201      	b.n	8001e14 <uploadDataToServer+0x534>

				case STATE_3:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001a10:	4b68      	ldr	r3, [pc, #416]	; (8001bb4 <uploadDataToServer+0x2d4>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	2100      	movs	r1, #0
 8001a18:	4867      	ldr	r0, [pc, #412]	; (8001bb8 <uploadDataToServer+0x2d8>)
 8001a1a:	f002 fc7d 	bl	8004318 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg2, sizeof(msg2), 500);	// "AT+CGDCONT=1"
 8001a1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a22:	220c      	movs	r2, #12
 8001a24:	4969      	ldr	r1, [pc, #420]	; (8001bcc <uploadDataToServer+0x2ec>)
 8001a26:	4866      	ldr	r0, [pc, #408]	; (8001bc0 <uploadDataToServer+0x2e0>)
 8001a28:	f002 fa43 	bl	8003eb2 <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001a2c:	bf00      	nop
 8001a2e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a32:	22c8      	movs	r2, #200	; 0xc8
 8001a34:	4960      	ldr	r1, [pc, #384]	; (8001bb8 <uploadDataToServer+0x2d8>)
 8001a36:	4862      	ldr	r0, [pc, #392]	; (8001bc0 <uploadDataToServer+0x2e0>)
 8001a38:	f002 facd 	bl	8003fd6 <HAL_UART_Receive>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d0f5      	beq.n	8001a2e <uploadDataToServer+0x14e>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001a42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a46:	22c8      	movs	r2, #200	; 0xc8
 8001a48:	495b      	ldr	r1, [pc, #364]	; (8001bb8 <uploadDataToServer+0x2d8>)
 8001a4a:	485e      	ldr	r0, [pc, #376]	; (8001bc4 <uploadDataToServer+0x2e4>)
 8001a4c:	f002 fa31 	bl	8003eb2 <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_4; }
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff fdf1 	bl	8001638 <checkAnswer>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <uploadDataToServer+0x184>
 8001a5c:	4b54      	ldr	r3, [pc, #336]	; (8001bb0 <uploadDataToServer+0x2d0>)
 8001a5e:	2203      	movs	r2, #3
 8001a60:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_3; loopCount--;}
				}break;
 8001a62:	e1d7      	b.n	8001e14 <uploadDataToServer+0x534>
					else{ errorCount++; state = STATE_3; loopCount--;}
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	3301      	adds	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	4b51      	ldr	r3, [pc, #324]	; (8001bb0 <uploadDataToServer+0x2d0>)
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	7bbb      	ldrb	r3, [r7, #14]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	73bb      	strb	r3, [r7, #14]
				}break;
 8001a76:	e1cd      	b.n	8001e14 <uploadDataToServer+0x534>

				case STATE_4:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001a78:	4b4e      	ldr	r3, [pc, #312]	; (8001bb4 <uploadDataToServer+0x2d4>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2100      	movs	r1, #0
 8001a80:	484d      	ldr	r0, [pc, #308]	; (8001bb8 <uploadDataToServer+0x2d8>)
 8001a82:	f002 fc49 	bl	8004318 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg3, sizeof(msg3), 500);	//"AT+CGDCONT=1,\"IP\",\"datos.personal.com\""
 8001a86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a8a:	2228      	movs	r2, #40	; 0x28
 8001a8c:	4950      	ldr	r1, [pc, #320]	; (8001bd0 <uploadDataToServer+0x2f0>)
 8001a8e:	484c      	ldr	r0, [pc, #304]	; (8001bc0 <uploadDataToServer+0x2e0>)
 8001a90:	f002 fa0f 	bl	8003eb2 <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001a94:	bf00      	nop
 8001a96:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a9a:	22c8      	movs	r2, #200	; 0xc8
 8001a9c:	4946      	ldr	r1, [pc, #280]	; (8001bb8 <uploadDataToServer+0x2d8>)
 8001a9e:	4848      	ldr	r0, [pc, #288]	; (8001bc0 <uploadDataToServer+0x2e0>)
 8001aa0:	f002 fa99 	bl	8003fd6 <HAL_UART_Receive>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d0f5      	beq.n	8001a96 <uploadDataToServer+0x1b6>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001aaa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001aae:	22c8      	movs	r2, #200	; 0xc8
 8001ab0:	4941      	ldr	r1, [pc, #260]	; (8001bb8 <uploadDataToServer+0x2d8>)
 8001ab2:	4844      	ldr	r0, [pc, #272]	; (8001bc4 <uploadDataToServer+0x2e4>)
 8001ab4:	f002 f9fd 	bl	8003eb2 <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_5; }
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f7ff fdbd 	bl	8001638 <checkAnswer>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <uploadDataToServer+0x1ec>
 8001ac4:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <uploadDataToServer+0x2d0>)
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_4; loopCount--;}
				}break;
 8001aca:	e1a3      	b.n	8001e14 <uploadDataToServer+0x534>
					else{ errorCount++; state = STATE_4; loopCount--;}
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <uploadDataToServer+0x2d0>)
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	7bbb      	ldrb	r3, [r7, #14]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	73bb      	strb	r3, [r7, #14]
				}break;
 8001ade:	e199      	b.n	8001e14 <uploadDataToServer+0x534>

				case STATE_5:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001ae0:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <uploadDataToServer+0x2d4>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4833      	ldr	r0, [pc, #204]	; (8001bb8 <uploadDataToServer+0x2d8>)
 8001aea:	f002 fc15 	bl	8004318 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg4, sizeof(msg4), 500);	//"AT+CGACT=1,1"
 8001aee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001af2:	220e      	movs	r2, #14
 8001af4:	4937      	ldr	r1, [pc, #220]	; (8001bd4 <uploadDataToServer+0x2f4>)
 8001af6:	4832      	ldr	r0, [pc, #200]	; (8001bc0 <uploadDataToServer+0x2e0>)
 8001af8:	f002 f9db 	bl	8003eb2 <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001afc:	bf00      	nop
 8001afe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b02:	22c8      	movs	r2, #200	; 0xc8
 8001b04:	492c      	ldr	r1, [pc, #176]	; (8001bb8 <uploadDataToServer+0x2d8>)
 8001b06:	482e      	ldr	r0, [pc, #184]	; (8001bc0 <uploadDataToServer+0x2e0>)
 8001b08:	f002 fa65 	bl	8003fd6 <HAL_UART_Receive>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d0f5      	beq.n	8001afe <uploadDataToServer+0x21e>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001b12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b16:	22c8      	movs	r2, #200	; 0xc8
 8001b18:	4927      	ldr	r1, [pc, #156]	; (8001bb8 <uploadDataToServer+0x2d8>)
 8001b1a:	482a      	ldr	r0, [pc, #168]	; (8001bc4 <uploadDataToServer+0x2e4>)
 8001b1c:	f002 f9c9 	bl	8003eb2 <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_6; }
 8001b20:	2001      	movs	r0, #1
 8001b22:	f7ff fd89 	bl	8001638 <checkAnswer>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <uploadDataToServer+0x254>
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <uploadDataToServer+0x2d0>)
 8001b2e:	2205      	movs	r2, #5
 8001b30:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_5; loopCount--;}
				}break;
 8001b32:	e16f      	b.n	8001e14 <uploadDataToServer+0x534>
					else{ errorCount++; state = STATE_5; loopCount--;}
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	3301      	adds	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <uploadDataToServer+0x2d0>)
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	73bb      	strb	r3, [r7, #14]
				}break;
 8001b46:	e165      	b.n	8001e14 <uploadDataToServer+0x534>

				case STATE_6:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <uploadDataToServer+0x2d4>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4819      	ldr	r0, [pc, #100]	; (8001bb8 <uploadDataToServer+0x2d8>)
 8001b52:	f002 fbe1 	bl	8004318 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg5, sizeof(msg5), 500);	//"ATD*99***1#"
 8001b56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b5a:	220d      	movs	r2, #13
 8001b5c:	491e      	ldr	r1, [pc, #120]	; (8001bd8 <uploadDataToServer+0x2f8>)
 8001b5e:	4818      	ldr	r0, [pc, #96]	; (8001bc0 <uploadDataToServer+0x2e0>)
 8001b60:	f002 f9a7 	bl	8003eb2 <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001b64:	bf00      	nop
 8001b66:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b6a:	22c8      	movs	r2, #200	; 0xc8
 8001b6c:	4912      	ldr	r1, [pc, #72]	; (8001bb8 <uploadDataToServer+0x2d8>)
 8001b6e:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <uploadDataToServer+0x2e0>)
 8001b70:	f002 fa31 	bl	8003fd6 <HAL_UART_Receive>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d0f5      	beq.n	8001b66 <uploadDataToServer+0x286>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001b7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b7e:	22c8      	movs	r2, #200	; 0xc8
 8001b80:	490d      	ldr	r1, [pc, #52]	; (8001bb8 <uploadDataToServer+0x2d8>)
 8001b82:	4810      	ldr	r0, [pc, #64]	; (8001bc4 <uploadDataToServer+0x2e4>)
 8001b84:	f002 f995 	bl	8003eb2 <HAL_UART_Transmit>

					if( checkAnswer(2) == 1 ){ state = STATE_7; }
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7ff fd55 	bl	8001638 <checkAnswer>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <uploadDataToServer+0x2bc>
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <uploadDataToServer+0x2d0>)
 8001b96:	2206      	movs	r2, #6
 8001b98:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_6; loopCount--;}
				}break;
 8001b9a:	e13b      	b.n	8001e14 <uploadDataToServer+0x534>
					else{ errorCount++; state = STATE_6; loopCount--;}
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <uploadDataToServer+0x2d0>)
 8001ba4:	2205      	movs	r2, #5
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	7bbb      	ldrb	r3, [r7, #14]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	73bb      	strb	r3, [r7, #14]
				}break;
 8001bae:	e131      	b.n	8001e14 <uploadDataToServer+0x534>
 8001bb0:	20000388 	.word	0x20000388
 8001bb4:	20000001 	.word	0x20000001
 8001bb8:	2000038c 	.word	0x2000038c
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	2000052c 	.word	0x2000052c
 8001bc4:	2000056c 	.word	0x2000056c
 8001bc8:	2000000c 	.word	0x2000000c
 8001bcc:	20000018 	.word	0x20000018
 8001bd0:	20000024 	.word	0x20000024
 8001bd4:	2000004c 	.word	0x2000004c
 8001bd8:	2000005c 	.word	0x2000005c

				case STATE_7:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001bdc:	4b93      	ldr	r3, [pc, #588]	; (8001e2c <uploadDataToServer+0x54c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	2100      	movs	r1, #0
 8001be4:	4892      	ldr	r0, [pc, #584]	; (8001e30 <uploadDataToServer+0x550>)
 8001be6:	f002 fb97 	bl	8004318 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg6, sizeof(msg6), 500);	//"+++"
 8001bea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bee:	2205      	movs	r2, #5
 8001bf0:	4990      	ldr	r1, [pc, #576]	; (8001e34 <uploadDataToServer+0x554>)
 8001bf2:	4891      	ldr	r0, [pc, #580]	; (8001e38 <uploadDataToServer+0x558>)
 8001bf4:	f002 f95d 	bl	8003eb2 <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001bf8:	bf00      	nop
 8001bfa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bfe:	22c8      	movs	r2, #200	; 0xc8
 8001c00:	498b      	ldr	r1, [pc, #556]	; (8001e30 <uploadDataToServer+0x550>)
 8001c02:	488d      	ldr	r0, [pc, #564]	; (8001e38 <uploadDataToServer+0x558>)
 8001c04:	f002 f9e7 	bl	8003fd6 <HAL_UART_Receive>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d0f5      	beq.n	8001bfa <uploadDataToServer+0x31a>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001c0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c12:	22c8      	movs	r2, #200	; 0xc8
 8001c14:	4986      	ldr	r1, [pc, #536]	; (8001e30 <uploadDataToServer+0x550>)
 8001c16:	4889      	ldr	r0, [pc, #548]	; (8001e3c <uploadDataToServer+0x55c>)
 8001c18:	f002 f94b 	bl	8003eb2 <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_8; }
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff fd0b 	bl	8001638 <checkAnswer>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <uploadDataToServer+0x350>
 8001c28:	4b85      	ldr	r3, [pc, #532]	; (8001e40 <uploadDataToServer+0x560>)
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_7; loopCount--;}
				}break;
 8001c2e:	e0f1      	b.n	8001e14 <uploadDataToServer+0x534>
					else{ errorCount++; state = STATE_7; loopCount--;}
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	3301      	adds	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
 8001c36:	4b82      	ldr	r3, [pc, #520]	; (8001e40 <uploadDataToServer+0x560>)
 8001c38:	2206      	movs	r2, #6
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	7bbb      	ldrb	r3, [r7, #14]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	73bb      	strb	r3, [r7, #14]
				}break;
 8001c42:	e0e7      	b.n	8001e14 <uploadDataToServer+0x534>

				case STATE_8:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001c44:	4b79      	ldr	r3, [pc, #484]	; (8001e2c <uploadDataToServer+0x54c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4878      	ldr	r0, [pc, #480]	; (8001e30 <uploadDataToServer+0x550>)
 8001c4e:	f002 fb63 	bl	8004318 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg7, sizeof(msg7), 500);	//"AT+CIFSR"
 8001c52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c56:	220a      	movs	r2, #10
 8001c58:	497a      	ldr	r1, [pc, #488]	; (8001e44 <uploadDataToServer+0x564>)
 8001c5a:	4877      	ldr	r0, [pc, #476]	; (8001e38 <uploadDataToServer+0x558>)
 8001c5c:	f002 f929 	bl	8003eb2 <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001c60:	bf00      	nop
 8001c62:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c66:	22c8      	movs	r2, #200	; 0xc8
 8001c68:	4971      	ldr	r1, [pc, #452]	; (8001e30 <uploadDataToServer+0x550>)
 8001c6a:	4873      	ldr	r0, [pc, #460]	; (8001e38 <uploadDataToServer+0x558>)
 8001c6c:	f002 f9b3 	bl	8003fd6 <HAL_UART_Receive>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d0f5      	beq.n	8001c62 <uploadDataToServer+0x382>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001c76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c7a:	22c8      	movs	r2, #200	; 0xc8
 8001c7c:	496c      	ldr	r1, [pc, #432]	; (8001e30 <uploadDataToServer+0x550>)
 8001c7e:	486f      	ldr	r0, [pc, #444]	; (8001e3c <uploadDataToServer+0x55c>)
 8001c80:	f002 f917 	bl	8003eb2 <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_9; }
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7ff fcd7 	bl	8001638 <checkAnswer>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <uploadDataToServer+0x3b8>
 8001c90:	4b6b      	ldr	r3, [pc, #428]	; (8001e40 <uploadDataToServer+0x560>)
 8001c92:	2208      	movs	r2, #8
 8001c94:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_8; loopCount--;}
				}break;
 8001c96:	e0bd      	b.n	8001e14 <uploadDataToServer+0x534>
					else{ errorCount++; state = STATE_8; loopCount--;}
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <uploadDataToServer+0x560>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	7bbb      	ldrb	r3, [r7, #14]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	73bb      	strb	r3, [r7, #14]
				}break;
 8001caa:	e0b3      	b.n	8001e14 <uploadDataToServer+0x534>

				case STATE_9:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001cac:	4b5f      	ldr	r3, [pc, #380]	; (8001e2c <uploadDataToServer+0x54c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	485e      	ldr	r0, [pc, #376]	; (8001e30 <uploadDataToServer+0x550>)
 8001cb6:	f002 fb2f 	bl	8004318 <memset>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg8, sizeof(msg8), 500);	//"AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80"
 8001cba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001cbe:	222b      	movs	r2, #43	; 0x2b
 8001cc0:	4961      	ldr	r1, [pc, #388]	; (8001e48 <uploadDataToServer+0x568>)
 8001cc2:	485d      	ldr	r0, [pc, #372]	; (8001e38 <uploadDataToServer+0x558>)
 8001cc4:	f002 f8f5 	bl	8003eb2 <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 10000) == HAL_BUSY){}
 8001cc8:	bf00      	nop
 8001cca:	f242 7310 	movw	r3, #10000	; 0x2710
 8001cce:	22c8      	movs	r2, #200	; 0xc8
 8001cd0:	4957      	ldr	r1, [pc, #348]	; (8001e30 <uploadDataToServer+0x550>)
 8001cd2:	4859      	ldr	r0, [pc, #356]	; (8001e38 <uploadDataToServer+0x558>)
 8001cd4:	f002 f97f 	bl	8003fd6 <HAL_UART_Receive>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d0f5      	beq.n	8001cca <uploadDataToServer+0x3ea>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001cde:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ce2:	22c8      	movs	r2, #200	; 0xc8
 8001ce4:	4952      	ldr	r1, [pc, #328]	; (8001e30 <uploadDataToServer+0x550>)
 8001ce6:	4855      	ldr	r0, [pc, #340]	; (8001e3c <uploadDataToServer+0x55c>)
 8001ce8:	f002 f8e3 	bl	8003eb2 <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_10; }
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff fca3 	bl	8001638 <checkAnswer>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <uploadDataToServer+0x420>
 8001cf8:	4b51      	ldr	r3, [pc, #324]	; (8001e40 <uploadDataToServer+0x560>)
 8001cfa:	2209      	movs	r2, #9
 8001cfc:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_9; loopCount--;}
				}break;
 8001cfe:	e089      	b.n	8001e14 <uploadDataToServer+0x534>
					else{ errorCount++; state = STATE_9; loopCount--;}
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	3301      	adds	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
 8001d06:	4b4e      	ldr	r3, [pc, #312]	; (8001e40 <uploadDataToServer+0x560>)
 8001d08:	2208      	movs	r2, #8
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	7bbb      	ldrb	r3, [r7, #14]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	73bb      	strb	r3, [r7, #14]
				}break;
 8001d12:	e07f      	b.n	8001e14 <uploadDataToServer+0x534>

				case STATE_10:{
					memset(rxBuffer, 0, sizeRxBuffer);
 8001d14:	4b45      	ldr	r3, [pc, #276]	; (8001e2c <uploadDataToServer+0x54c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4844      	ldr	r0, [pc, #272]	; (8001e30 <uploadDataToServer+0x550>)
 8001d1e:	f002 fafb 	bl	8004318 <memset>

					if( topic == 1){ updatePluviometer(msg13,cont);}
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <uploadDataToServer+0x458>
 8001d28:	4b48      	ldr	r3, [pc, #288]	; (8001e4c <uploadDataToServer+0x56c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4847      	ldr	r0, [pc, #284]	; (8001e50 <uploadDataToServer+0x570>)
 8001d32:	f7ff fdb9 	bl	80018a8 <updatePluviometer>
 8001d36:	e006      	b.n	8001d46 <uploadDataToServer+0x466>
					else{ updateTemperature(msg13, getTemp());}
 8001d38:	f7ff fa2a 	bl	8001190 <getTemp>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4843      	ldr	r0, [pc, #268]	; (8001e50 <uploadDataToServer+0x570>)
 8001d42:	f7ff fd95 	bl	8001870 <updateTemperature>

					HAL_UART_Transmit(&huart1, (uint8_t *)msg9, sizeof(msg9), 500);	// "AT+CIPSEND"
 8001d46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	4941      	ldr	r1, [pc, #260]	; (8001e54 <uploadDataToServer+0x574>)
 8001d4e:	483a      	ldr	r0, [pc, #232]	; (8001e38 <uploadDataToServer+0x558>)
 8001d50:	f002 f8af 	bl	8003eb2 <HAL_UART_Transmit>
					HAL_Delay(1000);
 8001d54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d58:	f000 fcbc 	bl	80026d4 <HAL_Delay>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg13, sizeof(msg13), 500);	//"GET https://api.thingspeak.com/update?api_key=Z0OCNIE9923JVEEG&field1="
 8001d5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d60:	2250      	movs	r2, #80	; 0x50
 8001d62:	493b      	ldr	r1, [pc, #236]	; (8001e50 <uploadDataToServer+0x570>)
 8001d64:	4834      	ldr	r0, [pc, #208]	; (8001e38 <uploadDataToServer+0x558>)
 8001d66:	f002 f8a4 	bl	8003eb2 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 500);		// "<SUB>"
 8001d6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d6e:	2203      	movs	r2, #3
 8001d70:	4939      	ldr	r1, [pc, #228]	; (8001e58 <uploadDataToServer+0x578>)
 8001d72:	4831      	ldr	r0, [pc, #196]	; (8001e38 <uploadDataToServer+0x558>)
 8001d74:	f002 f89d 	bl	8003eb2 <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 10000) == HAL_BUSY){}
 8001d78:	bf00      	nop
 8001d7a:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d7e:	22c8      	movs	r2, #200	; 0xc8
 8001d80:	492b      	ldr	r1, [pc, #172]	; (8001e30 <uploadDataToServer+0x550>)
 8001d82:	482d      	ldr	r0, [pc, #180]	; (8001e38 <uploadDataToServer+0x558>)
 8001d84:	f002 f927 	bl	8003fd6 <HAL_UART_Receive>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d0f5      	beq.n	8001d7a <uploadDataToServer+0x49a>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001d8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d92:	22c8      	movs	r2, #200	; 0xc8
 8001d94:	4926      	ldr	r1, [pc, #152]	; (8001e30 <uploadDataToServer+0x550>)
 8001d96:	4829      	ldr	r0, [pc, #164]	; (8001e3c <uploadDataToServer+0x55c>)
 8001d98:	f002 f88b 	bl	8003eb2 <HAL_UART_Transmit>

					if( checkAnswer(1) == 1 ){ state = STATE_11; }
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7ff fc4b 	bl	8001638 <checkAnswer>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <uploadDataToServer+0x4d0>
 8001da8:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <uploadDataToServer+0x560>)
 8001daa:	220a      	movs	r2, #10
 8001dac:	701a      	strb	r2, [r3, #0]
					else{ errorCount++; state = STATE_1; loopCount = 0;}
				}break;
 8001dae:	e031      	b.n	8001e14 <uploadDataToServer+0x534>
					else{ errorCount++; state = STATE_1; loopCount = 0;}
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	3301      	adds	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <uploadDataToServer+0x560>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73bb      	strb	r3, [r7, #14]
				}break;
 8001dc0:	e028      	b.n	8001e14 <uploadDataToServer+0x534>

				case STATE_11:{
					HAL_UART_Transmit(&huart1, (uint8_t *)msg11, sizeof(msg11), 500);		//"AT+CIPSHUT"
 8001dc2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001dc6:	220d      	movs	r2, #13
 8001dc8:	4924      	ldr	r1, [pc, #144]	; (8001e5c <uploadDataToServer+0x57c>)
 8001dca:	481b      	ldr	r0, [pc, #108]	; (8001e38 <uploadDataToServer+0x558>)
 8001dcc:	f002 f871 	bl	8003eb2 <HAL_UART_Transmit>
					while (HAL_UART_Receive(&huart1, (uint8_t*) rxBuffer, sizeof(rxBuffer), 2000) == HAL_BUSY){}
 8001dd0:	bf00      	nop
 8001dd2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001dd6:	22c8      	movs	r2, #200	; 0xc8
 8001dd8:	4915      	ldr	r1, [pc, #84]	; (8001e30 <uploadDataToServer+0x550>)
 8001dda:	4817      	ldr	r0, [pc, #92]	; (8001e38 <uploadDataToServer+0x558>)
 8001ddc:	f002 f8fb 	bl	8003fd6 <HAL_UART_Receive>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d0f5      	beq.n	8001dd2 <uploadDataToServer+0x4f2>
					HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, sizeof(rxBuffer), 500);
 8001de6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001dea:	22c8      	movs	r2, #200	; 0xc8
 8001dec:	4910      	ldr	r1, [pc, #64]	; (8001e30 <uploadDataToServer+0x550>)
 8001dee:	4813      	ldr	r0, [pc, #76]	; (8001e3c <uploadDataToServer+0x55c>)
 8001df0:	f002 f85f 	bl	8003eb2 <HAL_UART_Transmit>
					state = STATE_1;
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <uploadDataToServer+0x560>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
				}break;
 8001dfa:	e00b      	b.n	8001e14 <uploadDataToServer+0x534>

				default:{
					state = STATE_1;
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <uploadDataToServer+0x560>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
					loopCount = 11;
 8001e02:	230b      	movs	r3, #11
 8001e04:	73bb      	strb	r3, [r7, #14]
				}break;
 8001e06:	e005      	b.n	8001e14 <uploadDataToServer+0x534>
			}
		}
	else{
		errorCount = 1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
		loopCount = 11;
 8001e0c:	230b      	movs	r3, #11
 8001e0e:	73bb      	strb	r3, [r7, #14]
		return 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e007      	b.n	8001e24 <uploadDataToServer+0x544>
	for (uint8_t loopCount = 0; loopCount <= 10; loopCount++ ){
 8001e14:	7bbb      	ldrb	r3, [r7, #14]
 8001e16:	3301      	adds	r3, #1
 8001e18:	73bb      	strb	r3, [r7, #14]
 8001e1a:	7bbb      	ldrb	r3, [r7, #14]
 8001e1c:	2b0a      	cmp	r3, #10
 8001e1e:	f67f ad6c 	bls.w	80018fa <uploadDataToServer+0x1a>
	}
	}
	return 1;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000001 	.word	0x20000001
 8001e30:	2000038c 	.word	0x2000038c
 8001e34:	2000006c 	.word	0x2000006c
 8001e38:	2000052c 	.word	0x2000052c
 8001e3c:	2000056c 	.word	0x2000056c
 8001e40:	20000388 	.word	0x20000388
 8001e44:	20000074 	.word	0x20000074
 8001e48:	20000080 	.word	0x20000080
 8001e4c:	2000031c 	.word	0x2000031c
 8001e50:	20000338 	.word	0x20000338
 8001e54:	200000ac 	.word	0x200000ac
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	200000f8 	.word	0x200000f8

08001e60 <getRainfall>:
extern char msg13[80];

/********* Funciones **********/

// Función que realiza un antirebote por Soft e incrementa el contador del balancín.
void getRainfall(void){
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

//	if( HAL_GetTick() - startTime > timeThreshold){
		cont += 1;
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <getRainfall+0x18>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4a03      	ldr	r2, [pc, #12]	; (8001e78 <getRainfall+0x18>)
 8001e6c:	6013      	str	r3, [r2, #0]
//		startTime = HAL_GetTick();
//	}
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	2000031c 	.word	0x2000031c

08001e7c <sendIncrement>:

void sendIncrement(void){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0

	if (init == 1){
 8001e80:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <sendIncrement+0x84>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00a      	beq.n	8001e9e <sendIncrement+0x22>
		init = 0;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <sendIncrement+0x84>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
		initModule();
 8001e8e:	f7ff fc3b 	bl	8001708 <initModule>

//		updatePluviometer(msg13,cont);
		if( uploadDataToServer(1) == 0){ /*Error_Handler();*/}
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7ff fd24 	bl	80018e0 <uploadDataToServer>
		cont = 0;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <sendIncrement+0x88>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
	}

	if(incrCont == 5){
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <sendIncrement+0x8c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	d125      	bne.n	8001ef2 <sendIncrement+0x76>
		incrCont = 0;
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <sendIncrement+0x8c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

		if(cont != 0){
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <sendIncrement+0x88>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d006      	beq.n	8001ec2 <sendIncrement+0x46>
//			updatePluviometer(msg13,cont);
			if( uploadDataToServer(1) == 0){ /*Error_Handler();*/}
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f7ff fd13 	bl	80018e0 <uploadDataToServer>
			cont = 0;
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <sendIncrement+0x88>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
		}
	}
	else{
		incrCont +=1;
	}
}
 8001ec0:	e01c      	b.n	8001efc <sendIncrement+0x80>
			firstInit = 1;
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <sendIncrement+0x90>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
			init = 1;
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <sendIncrement+0x84>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim4);
 8001ece:	4810      	ldr	r0, [pc, #64]	; (8001f10 <sendIncrement+0x94>)
 8001ed0:	f001 fc1c 	bl	800370c <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <sendIncrement+0x98>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0201 	mvn.w	r2, #1
 8001edc:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <sendIncrement+0x98>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim2);
 8001ee6:	480b      	ldr	r0, [pc, #44]	; (8001f14 <sendIncrement+0x98>)
 8001ee8:	f001 fbbe 	bl	8003668 <HAL_TIM_Base_Start_IT>
			resetModule();
 8001eec:	f7ff fcaa 	bl	8001844 <resetModule>
}
 8001ef0:	e004      	b.n	8001efc <sendIncrement+0x80>
		incrCont +=1;
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <sendIncrement+0x8c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	4a03      	ldr	r2, [pc, #12]	; (8001f08 <sendIncrement+0x8c>)
 8001efa:	6013      	str	r3, [r2, #0]
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	2000011e 	.word	0x2000011e
 8001f04:	2000031c 	.word	0x2000031c
 8001f08:	20000320 	.word	0x20000320
 8001f0c:	2000011d 	.word	0x2000011d
 8001f10:	20000454 	.word	0x20000454
 8001f14:	200004e4 	.word	0x200004e4

08001f18 <startRain>:

void startRain(void){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0

	getRainfall();
 8001f1c:	f7ff ffa0 	bl	8001e60 <getRainfall>

	if(firstInit == 1){
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <startRain+0x28>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <startRain+0x22>

		firstInit = 0;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <startRain+0x28>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001f2e:	4805      	ldr	r0, [pc, #20]	; (8001f44 <startRain+0x2c>)
 8001f30:	f001 fbec 	bl	800370c <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim4);
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <startRain+0x30>)
 8001f36:	f001 fb97 	bl	8003668 <HAL_TIM_Base_Start_IT>
//		sendIncrement();
	}
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000011d 	.word	0x2000011d
 8001f44:	200004e4 	.word	0x200004e4
 8001f48:	20000454 	.word	0x20000454

08001f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_MspInit+0x60>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	4a15      	ldr	r2, [pc, #84]	; (8001fac <HAL_MspInit+0x60>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6193      	str	r3, [r2, #24]
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_MspInit+0x60>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_MspInit+0x60>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <HAL_MspInit+0x60>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	61d3      	str	r3, [r2, #28]
 8001f76:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <HAL_MspInit+0x60>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001f82:	2004      	movs	r0, #4
 8001f84:	f000 fc96 	bl	80028b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_MspInit+0x64>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <HAL_MspInit+0x64>)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40010000 	.word	0x40010000

08001fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <HardFault_Handler+0x4>

08001fc6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <MemManage_Handler+0x4>

08001fcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <BusFault_Handler+0x4>

08001fd2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <UsageFault_Handler+0x4>

08001fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002000:	f000 fb4c 	bl	800269c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800200c:	2001      	movs	r0, #1
 800200e:	f000 fe5f 	bl	8002cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <TIM2_IRQHandler+0x10>)
 800201e:	f001 fba3 	bl	8003768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200004e4 	.word	0x200004e4

0800202c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <TIM4_IRQHandler+0x10>)
 8002032:	f001 fb99 	bl	8003768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000454 	.word	0x20000454

08002040 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
	return 1;
 8002044:	2301      	movs	r3, #1
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <_kill>:

int _kill(int pid, int sig)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002058:	f002 f934 	bl	80042c4 <__errno>
 800205c:	4603      	mov	r3, r0
 800205e:	2216      	movs	r2, #22
 8002060:	601a      	str	r2, [r3, #0]
	return -1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <_exit>:

void _exit (int status)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002076:	f04f 31ff 	mov.w	r1, #4294967295
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ffe7 	bl	800204e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002080:	e7fe      	b.n	8002080 <_exit+0x12>

08002082 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	e00a      	b.n	80020aa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002094:	f3af 8000 	nop.w
 8002098:	4601      	mov	r1, r0
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	60ba      	str	r2, [r7, #8]
 80020a0:	b2ca      	uxtb	r2, r1
 80020a2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3301      	adds	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	dbf0      	blt.n	8002094 <_read+0x12>
	}

return len;
 80020b2:	687b      	ldr	r3, [r7, #4]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_close>:
	}
	return len;
}

int _close(int file)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	return -1;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e2:	605a      	str	r2, [r3, #4]
	return 0;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <_isatty>:

int _isatty(int file)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	return 1;
 80020f8:	2301      	movs	r3, #1
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
	return 0;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <_sbrk+0x5c>)
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <_sbrk+0x60>)
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <_sbrk+0x64>)
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <_sbrk+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	429a      	cmp	r2, r3
 800214a:	d207      	bcs.n	800215c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800214c:	f002 f8ba 	bl	80042c4 <__errno>
 8002150:	4603      	mov	r3, r0
 8002152:	220c      	movs	r2, #12
 8002154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
 800215a:	e009      	b.n	8002170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <_sbrk+0x64>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <_sbrk+0x64>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <_sbrk+0x64>)
 800216c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800216e:	68fb      	ldr	r3, [r7, #12]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20005000 	.word	0x20005000
 800217c:	00000400 	.word	0x00000400
 8002180:	20000324 	.word	0x20000324
 8002184:	200005c0 	.word	0x200005c0

08002188 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219a:	f107 0308 	add.w	r3, r7, #8
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a8:	463b      	mov	r3, r7
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80021b0:	4b1e      	ldr	r3, [pc, #120]	; (800222c <MX_TIM1_Init+0x98>)
 80021b2:	4a1f      	ldr	r2, [pc, #124]	; (8002230 <MX_TIM1_Init+0x9c>)
 80021b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80021b6:	4b1d      	ldr	r3, [pc, #116]	; (800222c <MX_TIM1_Init+0x98>)
 80021b8:	2247      	movs	r2, #71	; 0x47
 80021ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021bc:	4b1b      	ldr	r3, [pc, #108]	; (800222c <MX_TIM1_Init+0x98>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 80021c2:	4b1a      	ldr	r3, [pc, #104]	; (800222c <MX_TIM1_Init+0x98>)
 80021c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80021c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <MX_TIM1_Init+0x98>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <MX_TIM1_Init+0x98>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <MX_TIM1_Init+0x98>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021dc:	4813      	ldr	r0, [pc, #76]	; (800222c <MX_TIM1_Init+0x98>)
 80021de:	f001 f9a9 	bl	8003534 <HAL_TIM_Base_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80021e8:	f7ff fa18 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021f2:	f107 0308 	add.w	r3, r7, #8
 80021f6:	4619      	mov	r1, r3
 80021f8:	480c      	ldr	r0, [pc, #48]	; (800222c <MX_TIM1_Init+0x98>)
 80021fa:	f001 fbbd 	bl	8003978 <HAL_TIM_ConfigClockSource>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002204:	f7ff fa0a 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002210:	463b      	mov	r3, r7
 8002212:	4619      	mov	r1, r3
 8002214:	4805      	ldr	r0, [pc, #20]	; (800222c <MX_TIM1_Init+0x98>)
 8002216:	f001 fd8f 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002220:	f7ff f9fc 	bl	800161c <Error_Handler>
  }

}
 8002224:	bf00      	nop
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	2000049c 	.word	0x2000049c
 8002230:	40012c00 	.word	0x40012c00

08002234 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800223a:	f107 0308 	add.w	r3, r7, #8
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002248:	463b      	mov	r3, r7
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002250:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <MX_TIM2_Init+0x98>)
 8002252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002256:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59999;
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <MX_TIM2_Init+0x98>)
 800225a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800225e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <MX_TIM2_Init+0x98>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 54000-1;
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <MX_TIM2_Init+0x98>)
 8002268:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 800226c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <MX_TIM2_Init+0x98>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002274:	4b15      	ldr	r3, [pc, #84]	; (80022cc <MX_TIM2_Init+0x98>)
 8002276:	2200      	movs	r2, #0
 8002278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800227a:	4814      	ldr	r0, [pc, #80]	; (80022cc <MX_TIM2_Init+0x98>)
 800227c:	f001 f95a 	bl	8003534 <HAL_TIM_Base_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002286:	f7ff f9c9 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800228a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800228e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	4619      	mov	r1, r3
 8002296:	480d      	ldr	r0, [pc, #52]	; (80022cc <MX_TIM2_Init+0x98>)
 8002298:	f001 fb6e 	bl	8003978 <HAL_TIM_ConfigClockSource>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80022a2:	f7ff f9bb 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ae:	463b      	mov	r3, r7
 80022b0:	4619      	mov	r1, r3
 80022b2:	4806      	ldr	r0, [pc, #24]	; (80022cc <MX_TIM2_Init+0x98>)
 80022b4:	f001 fd40 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80022be:	f7ff f9ad 	bl	800161c <Error_Handler>
  }

}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200004e4 	.word	0x200004e4

080022d0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e4:	463b      	mov	r3, r7
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80022ec:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <MX_TIM4_Init+0x94>)
 80022ee:	4a1e      	ldr	r2, [pc, #120]	; (8002368 <MX_TIM4_Init+0x98>)
 80022f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 59999;
 80022f2:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <MX_TIM4_Init+0x94>)
 80022f4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80022f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fa:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <MX_TIM4_Init+0x94>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 18000-1;
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <MX_TIM4_Init+0x94>)
 8002302:	f244 624f 	movw	r2, #17999	; 0x464f
 8002306:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <MX_TIM4_Init+0x94>)
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <MX_TIM4_Init+0x94>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002314:	4813      	ldr	r0, [pc, #76]	; (8002364 <MX_TIM4_Init+0x94>)
 8002316:	f001 f90d 	bl	8003534 <HAL_TIM_Base_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002320:	f7ff f97c 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002328:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800232a:	f107 0308 	add.w	r3, r7, #8
 800232e:	4619      	mov	r1, r3
 8002330:	480c      	ldr	r0, [pc, #48]	; (8002364 <MX_TIM4_Init+0x94>)
 8002332:	f001 fb21 	bl	8003978 <HAL_TIM_ConfigClockSource>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800233c:	f7ff f96e 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002340:	2320      	movs	r3, #32
 8002342:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002348:	463b      	mov	r3, r7
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <MX_TIM4_Init+0x94>)
 800234e:	f001 fcf3 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002358:	f7ff f960 	bl	800161c <Error_Handler>
  }

}
 800235c:	bf00      	nop
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000454 	.word	0x20000454
 8002368:	40000800 	.word	0x40000800

0800236c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a23      	ldr	r2, [pc, #140]	; (8002408 <HAL_TIM_Base_MspInit+0x9c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10c      	bne.n	8002398 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800237e:	4b23      	ldr	r3, [pc, #140]	; (800240c <HAL_TIM_Base_MspInit+0xa0>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	4a22      	ldr	r2, [pc, #136]	; (800240c <HAL_TIM_Base_MspInit+0xa0>)
 8002384:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002388:	6193      	str	r3, [r2, #24]
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_TIM_Base_MspInit+0xa0>)
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002396:	e032      	b.n	80023fe <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a0:	d114      	bne.n	80023cc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023a2:	4b1a      	ldr	r3, [pc, #104]	; (800240c <HAL_TIM_Base_MspInit+0xa0>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4a19      	ldr	r2, [pc, #100]	; (800240c <HAL_TIM_Base_MspInit+0xa0>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	61d3      	str	r3, [r2, #28]
 80023ae:	4b17      	ldr	r3, [pc, #92]	; (800240c <HAL_TIM_Base_MspInit+0xa0>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2107      	movs	r1, #7
 80023be:	201c      	movs	r0, #28
 80023c0:	f000 fa83 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023c4:	201c      	movs	r0, #28
 80023c6:	f000 fa9c 	bl	8002902 <HAL_NVIC_EnableIRQ>
}
 80023ca:	e018      	b.n	80023fe <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0f      	ldr	r2, [pc, #60]	; (8002410 <HAL_TIM_Base_MspInit+0xa4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d113      	bne.n	80023fe <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_TIM_Base_MspInit+0xa0>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a0c      	ldr	r2, [pc, #48]	; (800240c <HAL_TIM_Base_MspInit+0xa0>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	61d3      	str	r3, [r2, #28]
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_TIM_Base_MspInit+0xa0>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 7, 1);
 80023ee:	2201      	movs	r2, #1
 80023f0:	2107      	movs	r1, #7
 80023f2:	201e      	movs	r0, #30
 80023f4:	f000 fa69 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023f8:	201e      	movs	r0, #30
 80023fa:	f000 fa82 	bl	8002902 <HAL_NVIC_EnableIRQ>
}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40012c00 	.word	0x40012c00
 800240c:	40021000 	.word	0x40021000
 8002410:	40000800 	.word	0x40000800

08002414 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <MX_USART1_UART_Init+0x50>)
 800241c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 8002420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 800243a:	220c      	movs	r2, #12
 800243c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 800244c:	f001 fce4 	bl	8003e18 <HAL_UART_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002456:	f7ff f8e1 	bl	800161c <Error_Handler>
  }

}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000052c 	.word	0x2000052c
 8002464:	40013800 	.word	0x40013800

08002468 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 800246e:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <MX_USART2_UART_Init+0x50>)
 8002470:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 8002474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002478:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 800248e:	220c      	movs	r2, #12
 8002490:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800249e:	4805      	ldr	r0, [pc, #20]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 80024a0:	f001 fcba 	bl	8003e18 <HAL_UART_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024aa:	f7ff f8b7 	bl	800161c <Error_Handler>
  }

}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000056c 	.word	0x2000056c
 80024b8:	40004400 	.word	0x40004400

080024bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 0318 	add.w	r3, r7, #24
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a37      	ldr	r2, [pc, #220]	; (80025b4 <HAL_UART_MspInit+0xf8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d132      	bne.n	8002542 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024dc:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_UART_MspInit+0xfc>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	4a35      	ldr	r2, [pc, #212]	; (80025b8 <HAL_UART_MspInit+0xfc>)
 80024e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e6:	6193      	str	r3, [r2, #24]
 80024e8:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_UART_MspInit+0xfc>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f4:	4b30      	ldr	r3, [pc, #192]	; (80025b8 <HAL_UART_MspInit+0xfc>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	4a2f      	ldr	r2, [pc, #188]	; (80025b8 <HAL_UART_MspInit+0xfc>)
 80024fa:	f043 0304 	orr.w	r3, r3, #4
 80024fe:	6193      	str	r3, [r2, #24]
 8002500:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_UART_MspInit+0xfc>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800250c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	f107 0318 	add.w	r3, r7, #24
 800251e:	4619      	mov	r1, r3
 8002520:	4826      	ldr	r0, [pc, #152]	; (80025bc <HAL_UART_MspInit+0x100>)
 8002522:	f000 fa09 	bl	8002938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800252a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002534:	f107 0318 	add.w	r3, r7, #24
 8002538:	4619      	mov	r1, r3
 800253a:	4820      	ldr	r0, [pc, #128]	; (80025bc <HAL_UART_MspInit+0x100>)
 800253c:	f000 f9fc 	bl	8002938 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002540:	e034      	b.n	80025ac <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <HAL_UART_MspInit+0x104>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d12f      	bne.n	80025ac <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_UART_MspInit+0xfc>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <HAL_UART_MspInit+0xfc>)
 8002552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002556:	61d3      	str	r3, [r2, #28]
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <HAL_UART_MspInit+0xfc>)
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <HAL_UART_MspInit+0xfc>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <HAL_UART_MspInit+0xfc>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6193      	str	r3, [r2, #24]
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_UART_MspInit+0xfc>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800257c:	2304      	movs	r3, #4
 800257e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002588:	f107 0318 	add.w	r3, r7, #24
 800258c:	4619      	mov	r1, r3
 800258e:	480b      	ldr	r0, [pc, #44]	; (80025bc <HAL_UART_MspInit+0x100>)
 8002590:	f000 f9d2 	bl	8002938 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002594:	2308      	movs	r3, #8
 8002596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a0:	f107 0318 	add.w	r3, r7, #24
 80025a4:	4619      	mov	r1, r3
 80025a6:	4805      	ldr	r0, [pc, #20]	; (80025bc <HAL_UART_MspInit+0x100>)
 80025a8:	f000 f9c6 	bl	8002938 <HAL_GPIO_Init>
}
 80025ac:	bf00      	nop
 80025ae:	3728      	adds	r7, #40	; 0x28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40013800 	.word	0x40013800
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40010800 	.word	0x40010800
 80025c0:	40004400 	.word	0x40004400

080025c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80025c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80025c6:	e003      	b.n	80025d0 <LoopCopyDataInit>

080025c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80025ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80025cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80025ce:	3104      	adds	r1, #4

080025d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80025d0:	480a      	ldr	r0, [pc, #40]	; (80025fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80025d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80025d8:	d3f6      	bcc.n	80025c8 <CopyDataInit>
  ldr r2, =_sbss
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80025dc:	e002      	b.n	80025e4 <LoopFillZerobss>

080025de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80025de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80025e0:	f842 3b04 	str.w	r3, [r2], #4

080025e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80025e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80025e8:	d3f9      	bcc.n	80025de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025ea:	f7ff fdcd 	bl	8002188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ee:	f001 fe6f 	bl	80042d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025f2:	f7fe ff77 	bl	80014e4 <main>
  bx lr
 80025f6:	4770      	bx	lr
  ldr r3, =_sidata
 80025f8:	080074ac 	.word	0x080074ac
  ldr r0, =_sdata
 80025fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002600:	200002fc 	.word	0x200002fc
  ldr r2, =_sbss
 8002604:	200002fc 	.word	0x200002fc
  ldr r3, = _ebss
 8002608:	200005c0 	.word	0x200005c0

0800260c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800260c:	e7fe      	b.n	800260c <ADC1_2_IRQHandler>
	...

08002610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <HAL_Init+0x28>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a07      	ldr	r2, [pc, #28]	; (8002638 <HAL_Init+0x28>)
 800261a:	f043 0310 	orr.w	r3, r3, #16
 800261e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002620:	2003      	movs	r0, #3
 8002622:	f000 f947 	bl	80028b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002626:	2000      	movs	r0, #0
 8002628:	f000 f808 	bl	800263c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800262c:	f7ff fc8e 	bl	8001f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40022000 	.word	0x40022000

0800263c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_InitTick+0x54>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_InitTick+0x58>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	4619      	mov	r1, r3
 800264e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002652:	fbb3 f3f1 	udiv	r3, r3, r1
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f95f 	bl	800291e <HAL_SYSTICK_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e00e      	b.n	8002688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b0f      	cmp	r3, #15
 800266e:	d80a      	bhi.n	8002686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002670:	2200      	movs	r2, #0
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	f04f 30ff 	mov.w	r0, #4294967295
 8002678:	f000 f927 	bl	80028ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <HAL_InitTick+0x5c>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000120 	.word	0x20000120
 8002694:	20000128 	.word	0x20000128
 8002698:	20000124 	.word	0x20000124

0800269c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_IncTick+0x1c>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_IncTick+0x20>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	4a03      	ldr	r2, [pc, #12]	; (80026bc <HAL_IncTick+0x20>)
 80026ae:	6013      	str	r3, [r2, #0]
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	20000128 	.word	0x20000128
 80026bc:	200005ac 	.word	0x200005ac

080026c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return uwTick;
 80026c4:	4b02      	ldr	r3, [pc, #8]	; (80026d0 <HAL_GetTick+0x10>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	200005ac 	.word	0x200005ac

080026d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026dc:	f7ff fff0 	bl	80026c0 <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d005      	beq.n	80026fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_Delay+0x44>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026fa:	bf00      	nop
 80026fc:	f7ff ffe0 	bl	80026c0 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	429a      	cmp	r2, r3
 800270a:	d8f7      	bhi.n	80026fc <HAL_Delay+0x28>
  {
  }
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000128 	.word	0x20000128

0800271c <__NVIC_SetPriorityGrouping>:
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002738:	4013      	ands	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274e:	4a04      	ldr	r2, [pc, #16]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	60d3      	str	r3, [r2, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_GetPriorityGrouping>:
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <__NVIC_GetPriorityGrouping+0x18>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0307 	and.w	r3, r3, #7
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_EnableIRQ>:
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	db0b      	blt.n	80027aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	4906      	ldr	r1, [pc, #24]	; (80027b4 <__NVIC_EnableIRQ+0x34>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2001      	movs	r0, #1
 80027a2:	fa00 f202 	lsl.w	r2, r0, r2
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	e000e100 	.word	0xe000e100

080027b8 <__NVIC_SetPriority>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	; (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <NVIC_EncodePriority>:
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	bf28      	it	cs
 800282a:	2304      	movcs	r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3304      	adds	r3, #4
 8002832:	2b06      	cmp	r3, #6
 8002834:	d902      	bls.n	800283c <NVIC_EncodePriority+0x30>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3b03      	subs	r3, #3
 800283a:	e000      	b.n	800283e <NVIC_EncodePriority+0x32>
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	f04f 32ff 	mov.w	r2, #4294967295
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43d9      	mvns	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	4313      	orrs	r3, r2
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	; 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <SysTick_Config>:
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002880:	d301      	bcc.n	8002886 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002882:	2301      	movs	r3, #1
 8002884:	e00f      	b.n	80028a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002886:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <SysTick_Config+0x40>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288e:	210f      	movs	r1, #15
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	f7ff ff90 	bl	80027b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <SysTick_Config+0x40>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289e:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <SysTick_Config+0x40>)
 80028a0:	2207      	movs	r2, #7
 80028a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	e000e010 	.word	0xe000e010

080028b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ff2d 	bl	800271c <__NVIC_SetPriorityGrouping>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028dc:	f7ff ff42 	bl	8002764 <__NVIC_GetPriorityGrouping>
 80028e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	6978      	ldr	r0, [r7, #20]
 80028e8:	f7ff ff90 	bl	800280c <NVIC_EncodePriority>
 80028ec:	4602      	mov	r2, r0
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff5f 	bl	80027b8 <__NVIC_SetPriority>
}
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff35 	bl	8002780 <__NVIC_EnableIRQ>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ffa2 	bl	8002870 <SysTick_Config>
 800292c:	4603      	mov	r3, r0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002938:	b480      	push	{r7}
 800293a:	b08b      	sub	sp, #44	; 0x2c
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800294a:	e169      	b.n	8002c20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800294c:	2201      	movs	r2, #1
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	429a      	cmp	r2, r3
 8002966:	f040 8158 	bne.w	8002c1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a9a      	ldr	r2, [pc, #616]	; (8002bd8 <HAL_GPIO_Init+0x2a0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d05e      	beq.n	8002a32 <HAL_GPIO_Init+0xfa>
 8002974:	4a98      	ldr	r2, [pc, #608]	; (8002bd8 <HAL_GPIO_Init+0x2a0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d875      	bhi.n	8002a66 <HAL_GPIO_Init+0x12e>
 800297a:	4a98      	ldr	r2, [pc, #608]	; (8002bdc <HAL_GPIO_Init+0x2a4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d058      	beq.n	8002a32 <HAL_GPIO_Init+0xfa>
 8002980:	4a96      	ldr	r2, [pc, #600]	; (8002bdc <HAL_GPIO_Init+0x2a4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d86f      	bhi.n	8002a66 <HAL_GPIO_Init+0x12e>
 8002986:	4a96      	ldr	r2, [pc, #600]	; (8002be0 <HAL_GPIO_Init+0x2a8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d052      	beq.n	8002a32 <HAL_GPIO_Init+0xfa>
 800298c:	4a94      	ldr	r2, [pc, #592]	; (8002be0 <HAL_GPIO_Init+0x2a8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d869      	bhi.n	8002a66 <HAL_GPIO_Init+0x12e>
 8002992:	4a94      	ldr	r2, [pc, #592]	; (8002be4 <HAL_GPIO_Init+0x2ac>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d04c      	beq.n	8002a32 <HAL_GPIO_Init+0xfa>
 8002998:	4a92      	ldr	r2, [pc, #584]	; (8002be4 <HAL_GPIO_Init+0x2ac>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d863      	bhi.n	8002a66 <HAL_GPIO_Init+0x12e>
 800299e:	4a92      	ldr	r2, [pc, #584]	; (8002be8 <HAL_GPIO_Init+0x2b0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d046      	beq.n	8002a32 <HAL_GPIO_Init+0xfa>
 80029a4:	4a90      	ldr	r2, [pc, #576]	; (8002be8 <HAL_GPIO_Init+0x2b0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d85d      	bhi.n	8002a66 <HAL_GPIO_Init+0x12e>
 80029aa:	2b12      	cmp	r3, #18
 80029ac:	d82a      	bhi.n	8002a04 <HAL_GPIO_Init+0xcc>
 80029ae:	2b12      	cmp	r3, #18
 80029b0:	d859      	bhi.n	8002a66 <HAL_GPIO_Init+0x12e>
 80029b2:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <HAL_GPIO_Init+0x80>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	08002a33 	.word	0x08002a33
 80029bc:	08002a0d 	.word	0x08002a0d
 80029c0:	08002a1f 	.word	0x08002a1f
 80029c4:	08002a61 	.word	0x08002a61
 80029c8:	08002a67 	.word	0x08002a67
 80029cc:	08002a67 	.word	0x08002a67
 80029d0:	08002a67 	.word	0x08002a67
 80029d4:	08002a67 	.word	0x08002a67
 80029d8:	08002a67 	.word	0x08002a67
 80029dc:	08002a67 	.word	0x08002a67
 80029e0:	08002a67 	.word	0x08002a67
 80029e4:	08002a67 	.word	0x08002a67
 80029e8:	08002a67 	.word	0x08002a67
 80029ec:	08002a67 	.word	0x08002a67
 80029f0:	08002a67 	.word	0x08002a67
 80029f4:	08002a67 	.word	0x08002a67
 80029f8:	08002a67 	.word	0x08002a67
 80029fc:	08002a15 	.word	0x08002a15
 8002a00:	08002a29 	.word	0x08002a29
 8002a04:	4a79      	ldr	r2, [pc, #484]	; (8002bec <HAL_GPIO_Init+0x2b4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a0a:	e02c      	b.n	8002a66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	623b      	str	r3, [r7, #32]
          break;
 8002a12:	e029      	b.n	8002a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	623b      	str	r3, [r7, #32]
          break;
 8002a1c:	e024      	b.n	8002a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	3308      	adds	r3, #8
 8002a24:	623b      	str	r3, [r7, #32]
          break;
 8002a26:	e01f      	b.n	8002a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	330c      	adds	r3, #12
 8002a2e:	623b      	str	r3, [r7, #32]
          break;
 8002a30:	e01a      	b.n	8002a68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	623b      	str	r3, [r7, #32]
          break;
 8002a3e:	e013      	b.n	8002a68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d105      	bne.n	8002a54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a48:	2308      	movs	r3, #8
 8002a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	611a      	str	r2, [r3, #16]
          break;
 8002a52:	e009      	b.n	8002a68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a54:	2308      	movs	r3, #8
 8002a56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	615a      	str	r2, [r3, #20]
          break;
 8002a5e:	e003      	b.n	8002a68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a60:	2300      	movs	r3, #0
 8002a62:	623b      	str	r3, [r7, #32]
          break;
 8002a64:	e000      	b.n	8002a68 <HAL_GPIO_Init+0x130>
          break;
 8002a66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2bff      	cmp	r3, #255	; 0xff
 8002a6c:	d801      	bhi.n	8002a72 <HAL_GPIO_Init+0x13a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	e001      	b.n	8002a76 <HAL_GPIO_Init+0x13e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3304      	adds	r3, #4
 8002a76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	2bff      	cmp	r3, #255	; 0xff
 8002a7c:	d802      	bhi.n	8002a84 <HAL_GPIO_Init+0x14c>
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	e002      	b.n	8002a8a <HAL_GPIO_Init+0x152>
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	3b08      	subs	r3, #8
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	210f      	movs	r1, #15
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	6a39      	ldr	r1, [r7, #32]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80b1 	beq.w	8002c1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <HAL_GPIO_Init+0x2b8>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	4a4c      	ldr	r2, [pc, #304]	; (8002bf0 <HAL_GPIO_Init+0x2b8>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6193      	str	r3, [r2, #24]
 8002ac4:	4b4a      	ldr	r3, [pc, #296]	; (8002bf0 <HAL_GPIO_Init+0x2b8>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ad0:	4a48      	ldr	r2, [pc, #288]	; (8002bf4 <HAL_GPIO_Init+0x2bc>)
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002adc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	220f      	movs	r2, #15
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4013      	ands	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a40      	ldr	r2, [pc, #256]	; (8002bf8 <HAL_GPIO_Init+0x2c0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d013      	beq.n	8002b24 <HAL_GPIO_Init+0x1ec>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a3f      	ldr	r2, [pc, #252]	; (8002bfc <HAL_GPIO_Init+0x2c4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00d      	beq.n	8002b20 <HAL_GPIO_Init+0x1e8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a3e      	ldr	r2, [pc, #248]	; (8002c00 <HAL_GPIO_Init+0x2c8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d007      	beq.n	8002b1c <HAL_GPIO_Init+0x1e4>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a3d      	ldr	r2, [pc, #244]	; (8002c04 <HAL_GPIO_Init+0x2cc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d101      	bne.n	8002b18 <HAL_GPIO_Init+0x1e0>
 8002b14:	2303      	movs	r3, #3
 8002b16:	e006      	b.n	8002b26 <HAL_GPIO_Init+0x1ee>
 8002b18:	2304      	movs	r3, #4
 8002b1a:	e004      	b.n	8002b26 <HAL_GPIO_Init+0x1ee>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e002      	b.n	8002b26 <HAL_GPIO_Init+0x1ee>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <HAL_GPIO_Init+0x1ee>
 8002b24:	2300      	movs	r3, #0
 8002b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b28:	f002 0203 	and.w	r2, r2, #3
 8002b2c:	0092      	lsls	r2, r2, #2
 8002b2e:	4093      	lsls	r3, r2
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b36:	492f      	ldr	r1, [pc, #188]	; (8002bf4 <HAL_GPIO_Init+0x2bc>)
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d006      	beq.n	8002b5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b50:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	492c      	ldr	r1, [pc, #176]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	600b      	str	r3, [r1, #0]
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b5e:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	4928      	ldr	r1, [pc, #160]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b78:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	4922      	ldr	r1, [pc, #136]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
 8002b84:	e006      	b.n	8002b94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	491e      	ldr	r1, [pc, #120]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d006      	beq.n	8002bae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	4918      	ldr	r1, [pc, #96]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	608b      	str	r3, [r1, #8]
 8002bac:	e006      	b.n	8002bbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	4914      	ldr	r1, [pc, #80]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d021      	beq.n	8002c0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	490e      	ldr	r1, [pc, #56]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60cb      	str	r3, [r1, #12]
 8002bd4:	e021      	b.n	8002c1a <HAL_GPIO_Init+0x2e2>
 8002bd6:	bf00      	nop
 8002bd8:	10320000 	.word	0x10320000
 8002bdc:	10310000 	.word	0x10310000
 8002be0:	10220000 	.word	0x10220000
 8002be4:	10210000 	.word	0x10210000
 8002be8:	10120000 	.word	0x10120000
 8002bec:	10110000 	.word	0x10110000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	40010800 	.word	0x40010800
 8002bfc:	40010c00 	.word	0x40010c00
 8002c00:	40011000 	.word	0x40011000
 8002c04:	40011400 	.word	0x40011400
 8002c08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_GPIO_Init+0x304>)
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	4909      	ldr	r1, [pc, #36]	; (8002c3c <HAL_GPIO_Init+0x304>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f47f ae8e 	bne.w	800294c <HAL_GPIO_Init+0x14>
  }
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	372c      	adds	r7, #44	; 0x2c
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	40010400 	.word	0x40010400

08002c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	887b      	ldrh	r3, [r7, #2]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	e001      	b.n	8002c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	807b      	strh	r3, [r7, #2]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c7e:	787b      	ldrb	r3, [r7, #1]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c84:	887a      	ldrh	r2, [r7, #2]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c8a:	e003      	b.n	8002c94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c8c:	887b      	ldrh	r3, [r7, #2]
 8002c8e:	041a      	lsls	r2, r3, #16
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	611a      	str	r2, [r3, #16]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cb0:	887a      	ldrh	r2, [r7, #2]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	041a      	lsls	r2, r3, #16
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	43d9      	mvns	r1, r3
 8002cbc:	887b      	ldrh	r3, [r7, #2]
 8002cbe:	400b      	ands	r3, r1
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	611a      	str	r2, [r3, #16]
}
 8002cc6:	bf00      	nop
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d006      	beq.n	8002cf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ce6:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe fc69 	bl	80015c6 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40010400 	.word	0x40010400

08002d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e26c      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8087 	beq.w	8002e2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d20:	4b92      	ldr	r3, [pc, #584]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d00c      	beq.n	8002d46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d2c:	4b8f      	ldr	r3, [pc, #572]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d112      	bne.n	8002d5e <HAL_RCC_OscConfig+0x5e>
 8002d38:	4b8c      	ldr	r3, [pc, #560]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d44:	d10b      	bne.n	8002d5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d46:	4b89      	ldr	r3, [pc, #548]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d06c      	beq.n	8002e2c <HAL_RCC_OscConfig+0x12c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d168      	bne.n	8002e2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e246      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x76>
 8002d68:	4b80      	ldr	r3, [pc, #512]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a7f      	ldr	r2, [pc, #508]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	e02e      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd4>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x98>
 8002d7e:	4b7b      	ldr	r3, [pc, #492]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7a      	ldr	r2, [pc, #488]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b78      	ldr	r3, [pc, #480]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a77      	ldr	r2, [pc, #476]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e01d      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd4>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0xbc>
 8002da2:	4b72      	ldr	r3, [pc, #456]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a71      	ldr	r2, [pc, #452]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b6f      	ldr	r3, [pc, #444]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a6e      	ldr	r2, [pc, #440]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd4>
 8002dbc:	4b6b      	ldr	r3, [pc, #428]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a6a      	ldr	r2, [pc, #424]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b68      	ldr	r3, [pc, #416]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a67      	ldr	r2, [pc, #412]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7ff fc70 	bl	80026c0 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de4:	f7ff fc6c 	bl	80026c0 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e1fa      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0xe4>
 8002e02:	e014      	b.n	8002e2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7ff fc5c 	bl	80026c0 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7ff fc58 	bl	80026c0 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e1e6      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	4b53      	ldr	r3, [pc, #332]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x10c>
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d063      	beq.n	8002f02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e3a:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e46:	4b49      	ldr	r3, [pc, #292]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d11c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x18c>
 8002e52:	4b46      	ldr	r3, [pc, #280]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d116      	bne.n	8002e8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	4b43      	ldr	r3, [pc, #268]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_RCC_OscConfig+0x176>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e1ba      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e76:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4939      	ldr	r1, [pc, #228]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	e03a      	b.n	8002f02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e94:	4b36      	ldr	r3, [pc, #216]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9a:	f7ff fc11 	bl	80026c0 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea2:	f7ff fc0d 	bl	80026c0 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e19b      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec0:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4927      	ldr	r1, [pc, #156]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]
 8002ed4:	e015      	b.n	8002f02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed6:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7ff fbf0 	bl	80026c0 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee4:	f7ff fbec 	bl	80026c0 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e17a      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d03a      	beq.n	8002f84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d019      	beq.n	8002f4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f16:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <HAL_RCC_OscConfig+0x274>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1c:	f7ff fbd0 	bl	80026c0 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f24:	f7ff fbcc 	bl	80026c0 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e15a      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f42:	2001      	movs	r0, #1
 8002f44:	f000 fad8 	bl	80034f8 <RCC_Delay>
 8002f48:	e01c      	b.n	8002f84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f50:	f7ff fbb6 	bl	80026c0 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f56:	e00f      	b.n	8002f78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f58:	f7ff fbb2 	bl	80026c0 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d908      	bls.n	8002f78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e140      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	42420000 	.word	0x42420000
 8002f74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f78:	4b9e      	ldr	r3, [pc, #632]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e9      	bne.n	8002f58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80a6 	beq.w	80030de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f96:	4b97      	ldr	r3, [pc, #604]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10d      	bne.n	8002fbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	4b94      	ldr	r3, [pc, #592]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	4a93      	ldr	r2, [pc, #588]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fac:	61d3      	str	r3, [r2, #28]
 8002fae:	4b91      	ldr	r3, [pc, #580]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbe:	4b8e      	ldr	r3, [pc, #568]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d118      	bne.n	8002ffc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fca:	4b8b      	ldr	r3, [pc, #556]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a8a      	ldr	r2, [pc, #552]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd6:	f7ff fb73 	bl	80026c0 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fde:	f7ff fb6f 	bl	80026c0 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b64      	cmp	r3, #100	; 0x64
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e0fd      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff0:	4b81      	ldr	r3, [pc, #516]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d106      	bne.n	8003012 <HAL_RCC_OscConfig+0x312>
 8003004:	4b7b      	ldr	r3, [pc, #492]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a7a      	ldr	r2, [pc, #488]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	e02d      	b.n	800306e <HAL_RCC_OscConfig+0x36e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0x334>
 800301a:	4b76      	ldr	r3, [pc, #472]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4a75      	ldr	r2, [pc, #468]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	6213      	str	r3, [r2, #32]
 8003026:	4b73      	ldr	r3, [pc, #460]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	4a72      	ldr	r2, [pc, #456]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	6213      	str	r3, [r2, #32]
 8003032:	e01c      	b.n	800306e <HAL_RCC_OscConfig+0x36e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2b05      	cmp	r3, #5
 800303a:	d10c      	bne.n	8003056 <HAL_RCC_OscConfig+0x356>
 800303c:	4b6d      	ldr	r3, [pc, #436]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4a6c      	ldr	r2, [pc, #432]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8003042:	f043 0304 	orr.w	r3, r3, #4
 8003046:	6213      	str	r3, [r2, #32]
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4a69      	ldr	r2, [pc, #420]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6213      	str	r3, [r2, #32]
 8003054:	e00b      	b.n	800306e <HAL_RCC_OscConfig+0x36e>
 8003056:	4b67      	ldr	r3, [pc, #412]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	4a66      	ldr	r2, [pc, #408]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 800305c:	f023 0301 	bic.w	r3, r3, #1
 8003060:	6213      	str	r3, [r2, #32]
 8003062:	4b64      	ldr	r3, [pc, #400]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	4a63      	ldr	r2, [pc, #396]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8003068:	f023 0304 	bic.w	r3, r3, #4
 800306c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d015      	beq.n	80030a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7ff fb23 	bl	80026c0 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307c:	e00a      	b.n	8003094 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7ff fb1f 	bl	80026c0 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	; 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e0ab      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003094:	4b57      	ldr	r3, [pc, #348]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ee      	beq.n	800307e <HAL_RCC_OscConfig+0x37e>
 80030a0:	e014      	b.n	80030cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7ff fb0d 	bl	80026c0 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7ff fb09 	bl	80026c0 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e095      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c0:	4b4c      	ldr	r3, [pc, #304]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1ee      	bne.n	80030aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030cc:	7dfb      	ldrb	r3, [r7, #23]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d105      	bne.n	80030de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d2:	4b48      	ldr	r3, [pc, #288]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	4a47      	ldr	r2, [pc, #284]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 80030d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 8081 	beq.w	80031ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e8:	4b42      	ldr	r3, [pc, #264]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 030c 	and.w	r3, r3, #12
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d061      	beq.n	80031b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d146      	bne.n	800318a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fc:	4b3f      	ldr	r3, [pc, #252]	; (80031fc <HAL_RCC_OscConfig+0x4fc>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7ff fadd 	bl	80026c0 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310a:	f7ff fad9 	bl	80026c0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e067      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311c:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003130:	d108      	bne.n	8003144 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003132:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	492d      	ldr	r1, [pc, #180]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8003140:	4313      	orrs	r3, r2
 8003142:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003144:	4b2b      	ldr	r3, [pc, #172]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a19      	ldr	r1, [r3, #32]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	430b      	orrs	r3, r1
 8003156:	4927      	ldr	r1, [pc, #156]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800315c:	4b27      	ldr	r3, [pc, #156]	; (80031fc <HAL_RCC_OscConfig+0x4fc>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003162:	f7ff faad 	bl	80026c0 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316a:	f7ff faa9 	bl	80026c0 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e037      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800317c:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x46a>
 8003188:	e02f      	b.n	80031ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318a:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <HAL_RCC_OscConfig+0x4fc>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7ff fa96 	bl	80026c0 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003198:	f7ff fa92 	bl	80026c0 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e020      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031aa:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x498>
 80031b6:	e018      	b.n	80031ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e013      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCC_OscConfig+0x4f4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40007000 	.word	0x40007000
 80031fc:	42420060 	.word	0x42420060

08003200 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0d0      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003214:	4b6a      	ldr	r3, [pc, #424]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d910      	bls.n	8003244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b67      	ldr	r3, [pc, #412]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 0207 	bic.w	r2, r3, #7
 800322a:	4965      	ldr	r1, [pc, #404]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b63      	ldr	r3, [pc, #396]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0b8      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800325c:	4b59      	ldr	r3, [pc, #356]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4a58      	ldr	r2, [pc, #352]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003266:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003274:	4b53      	ldr	r3, [pc, #332]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a52      	ldr	r2, [pc, #328]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800327e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003280:	4b50      	ldr	r3, [pc, #320]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	494d      	ldr	r1, [pc, #308]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d040      	beq.n	8003320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	4b47      	ldr	r3, [pc, #284]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d115      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e07f      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032be:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e073      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ce:	4b3d      	ldr	r3, [pc, #244]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e06b      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f023 0203 	bic.w	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4936      	ldr	r1, [pc, #216]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f0:	f7ff f9e6 	bl	80026c0 <HAL_GetTick>
 80032f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	e00a      	b.n	800330e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f8:	f7ff f9e2 	bl	80026c0 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e053      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 020c 	and.w	r2, r3, #12
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	429a      	cmp	r2, r3
 800331e:	d1eb      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003320:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d210      	bcs.n	8003350 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 0207 	bic.w	r2, r3, #7
 8003336:	4922      	ldr	r1, [pc, #136]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e032      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4916      	ldr	r1, [pc, #88]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d009      	beq.n	800338e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800337a:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	490e      	ldr	r1, [pc, #56]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800338e:	f000 f821 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003392:	4602      	mov	r2, r0
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	490a      	ldr	r1, [pc, #40]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80033a0:	5ccb      	ldrb	r3, [r1, r3]
 80033a2:	fa22 f303 	lsr.w	r3, r2, r3
 80033a6:	4a09      	ldr	r2, [pc, #36]	; (80033cc <HAL_RCC_ClockConfig+0x1cc>)
 80033a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033aa:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_ClockConfig+0x1d0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f944 	bl	800263c <HAL_InitTick>

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40022000 	.word	0x40022000
 80033c4:	40021000 	.word	0x40021000
 80033c8:	080070a8 	.word	0x080070a8
 80033cc:	20000120 	.word	0x20000120
 80033d0:	20000124 	.word	0x20000124

080033d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d4:	b490      	push	{r4, r7}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033da:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033dc:	1d3c      	adds	r4, r7, #4
 80033de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033e4:	f240 2301 	movw	r3, #513	; 0x201
 80033e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	2300      	movs	r3, #0
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b04      	cmp	r3, #4
 800340c:	d002      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x40>
 800340e:	2b08      	cmp	r3, #8
 8003410:	d003      	beq.n	800341a <HAL_RCC_GetSysClockFreq+0x46>
 8003412:	e02d      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003416:	623b      	str	r3, [r7, #32]
      break;
 8003418:	e02d      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	0c9b      	lsrs	r3, r3, #18
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003426:	4413      	add	r3, r2
 8003428:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800342c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003438:	4b13      	ldr	r3, [pc, #76]	; (8003488 <HAL_RCC_GetSysClockFreq+0xb4>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	0c5b      	lsrs	r3, r3, #17
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003446:	4413      	add	r3, r2
 8003448:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800344c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	4a0e      	ldr	r2, [pc, #56]	; (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003452:	fb02 f203 	mul.w	r2, r2, r3
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	fbb2 f3f3 	udiv	r3, r2, r3
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
 800345e:	e004      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	4a0b      	ldr	r2, [pc, #44]	; (8003490 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003464:	fb02 f303 	mul.w	r3, r2, r3
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	623b      	str	r3, [r7, #32]
      break;
 800346e:	e002      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003472:	623b      	str	r3, [r7, #32]
      break;
 8003474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003476:	6a3b      	ldr	r3, [r7, #32]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3728      	adds	r7, #40	; 0x28
 800347c:	46bd      	mov	sp, r7
 800347e:	bc90      	pop	{r4, r7}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	08007098 	.word	0x08007098
 8003488:	40021000 	.word	0x40021000
 800348c:	007a1200 	.word	0x007a1200
 8003490:	003d0900 	.word	0x003d0900

08003494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003498:	4b02      	ldr	r3, [pc, #8]	; (80034a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	20000120 	.word	0x20000120

080034a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034ac:	f7ff fff2 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	080070b8 	.word	0x080070b8

080034d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034d4:	f7ff ffde 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	0adb      	lsrs	r3, r3, #11
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4903      	ldr	r1, [pc, #12]	; (80034f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	080070b8 	.word	0x080070b8

080034f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <RCC_Delay+0x34>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <RCC_Delay+0x38>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0a5b      	lsrs	r3, r3, #9
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003514:	bf00      	nop
  }
  while (Delay --);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1e5a      	subs	r2, r3, #1
 800351a:	60fa      	str	r2, [r7, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f9      	bne.n	8003514 <RCC_Delay+0x1c>
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	20000120 	.word	0x20000120
 8003530:	10624dd3 	.word	0x10624dd3

08003534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e041      	b.n	80035ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe ff06 	bl	800236c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f000 fae8 	bl	8003b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d001      	beq.n	80035ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e032      	b.n	8003652 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a18      	ldr	r2, [pc, #96]	; (800365c <HAL_TIM_Base_Start+0x88>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00e      	beq.n	800361c <HAL_TIM_Base_Start+0x48>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003606:	d009      	beq.n	800361c <HAL_TIM_Base_Start+0x48>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <HAL_TIM_Base_Start+0x8c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_TIM_Base_Start+0x48>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a13      	ldr	r2, [pc, #76]	; (8003664 <HAL_TIM_Base_Start+0x90>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d111      	bne.n	8003640 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b06      	cmp	r3, #6
 800362c:	d010      	beq.n	8003650 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0201 	orr.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363e:	e007      	b.n	8003650 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	40012c00 	.word	0x40012c00
 8003660:	40000400 	.word	0x40000400
 8003664:	40000800 	.word	0x40000800

08003668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d001      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e03a      	b.n	80036f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a18      	ldr	r2, [pc, #96]	; (8003700 <HAL_TIM_Base_Start_IT+0x98>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x58>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036aa:	d009      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x58>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a14      	ldr	r2, [pc, #80]	; (8003704 <HAL_TIM_Base_Start_IT+0x9c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x58>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a13      	ldr	r2, [pc, #76]	; (8003708 <HAL_TIM_Base_Start_IT+0xa0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d111      	bne.n	80036e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b06      	cmp	r3, #6
 80036d0:	d010      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	e007      	b.n	80036f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800

0800370c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	f241 1311 	movw	r3, #4369	; 0x1111
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10f      	bne.n	8003754 <HAL_TIM_Base_Stop_IT+0x48>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6a1a      	ldr	r2, [r3, #32]
 800373a:	f240 4344 	movw	r3, #1092	; 0x444
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d107      	bne.n	8003754 <HAL_TIM_Base_Stop_IT+0x48>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0202 	mvn.w	r2, #2
 8003794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9b1 	bl	8003b12 <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f9a4 	bl	8003b00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f9b3 	bl	8003b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0204 	mvn.w	r2, #4
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f987 	bl	8003b12 <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f97a 	bl	8003b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f989 	bl	8003b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b08      	cmp	r3, #8
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b08      	cmp	r3, #8
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0208 	mvn.w	r2, #8
 800383c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2204      	movs	r2, #4
 8003842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f95d 	bl	8003b12 <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f950 	bl	8003b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f95f 	bl	8003b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b10      	cmp	r3, #16
 8003878:	d122      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b10      	cmp	r3, #16
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0210 	mvn.w	r2, #16
 8003890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2208      	movs	r2, #8
 8003896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f933 	bl	8003b12 <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f926 	bl	8003b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f935 	bl	8003b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0201 	mvn.w	r2, #1
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fe78 	bl	80015dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f6:	2b80      	cmp	r3, #128	; 0x80
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fa77 	bl	8003e06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d10e      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d107      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800393c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8f9 	bl	8003b36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b20      	cmp	r3, #32
 8003950:	d10e      	bne.n	8003970 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b20      	cmp	r3, #32
 800395e:	d107      	bne.n	8003970 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0220 	mvn.w	r2, #32
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fa42 	bl	8003df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_TIM_ConfigClockSource+0x18>
 800398c:	2302      	movs	r3, #2
 800398e:	e0b3      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x180>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c8:	d03e      	beq.n	8003a48 <HAL_TIM_ConfigClockSource+0xd0>
 80039ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ce:	f200 8087 	bhi.w	8003ae0 <HAL_TIM_ConfigClockSource+0x168>
 80039d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d6:	f000 8085 	beq.w	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039de:	d87f      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x168>
 80039e0:	2b70      	cmp	r3, #112	; 0x70
 80039e2:	d01a      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0xa2>
 80039e4:	2b70      	cmp	r3, #112	; 0x70
 80039e6:	d87b      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x168>
 80039e8:	2b60      	cmp	r3, #96	; 0x60
 80039ea:	d050      	beq.n	8003a8e <HAL_TIM_ConfigClockSource+0x116>
 80039ec:	2b60      	cmp	r3, #96	; 0x60
 80039ee:	d877      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x168>
 80039f0:	2b50      	cmp	r3, #80	; 0x50
 80039f2:	d03c      	beq.n	8003a6e <HAL_TIM_ConfigClockSource+0xf6>
 80039f4:	2b50      	cmp	r3, #80	; 0x50
 80039f6:	d873      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x168>
 80039f8:	2b40      	cmp	r3, #64	; 0x40
 80039fa:	d058      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x136>
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d86f      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x168>
 8003a00:	2b30      	cmp	r3, #48	; 0x30
 8003a02:	d064      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x156>
 8003a04:	2b30      	cmp	r3, #48	; 0x30
 8003a06:	d86b      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x168>
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d060      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x156>
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d867      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x168>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d05c      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x156>
 8003a14:	2b10      	cmp	r3, #16
 8003a16:	d05a      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003a18:	e062      	b.n	8003ae0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6899      	ldr	r1, [r3, #8]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f000 f966 	bl	8003cfa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	609a      	str	r2, [r3, #8]
      break;
 8003a46:	e04e      	b.n	8003ae6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	6899      	ldr	r1, [r3, #8]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f000 f94f 	bl	8003cfa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a6a:	609a      	str	r2, [r3, #8]
      break;
 8003a6c:	e03b      	b.n	8003ae6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6859      	ldr	r1, [r3, #4]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f000 f8c6 	bl	8003c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2150      	movs	r1, #80	; 0x50
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f91d 	bl	8003cc6 <TIM_ITRx_SetConfig>
      break;
 8003a8c:	e02b      	b.n	8003ae6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	6859      	ldr	r1, [r3, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f000 f8e4 	bl	8003c68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2160      	movs	r1, #96	; 0x60
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 f90d 	bl	8003cc6 <TIM_ITRx_SetConfig>
      break;
 8003aac:	e01b      	b.n	8003ae6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	461a      	mov	r2, r3
 8003abc:	f000 f8a6 	bl	8003c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2140      	movs	r1, #64	; 0x40
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f8fd 	bl	8003cc6 <TIM_ITRx_SetConfig>
      break;
 8003acc:	e00b      	b.n	8003ae6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4610      	mov	r0, r2
 8003ada:	f000 f8f4 	bl	8003cc6 <TIM_ITRx_SetConfig>
        break;
 8003ade:	e002      	b.n	8003ae6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ae0:	bf00      	nop
 8003ae2:	e000      	b.n	8003ae6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ae4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr

08003b12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a29      	ldr	r2, [pc, #164]	; (8003c00 <TIM_Base_SetConfig+0xb8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00b      	beq.n	8003b78 <TIM_Base_SetConfig+0x30>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b66:	d007      	beq.n	8003b78 <TIM_Base_SetConfig+0x30>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a26      	ldr	r2, [pc, #152]	; (8003c04 <TIM_Base_SetConfig+0xbc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <TIM_Base_SetConfig+0x30>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a25      	ldr	r2, [pc, #148]	; (8003c08 <TIM_Base_SetConfig+0xc0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d108      	bne.n	8003b8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a1c      	ldr	r2, [pc, #112]	; (8003c00 <TIM_Base_SetConfig+0xb8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00b      	beq.n	8003baa <TIM_Base_SetConfig+0x62>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b98:	d007      	beq.n	8003baa <TIM_Base_SetConfig+0x62>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a19      	ldr	r2, [pc, #100]	; (8003c04 <TIM_Base_SetConfig+0xbc>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d003      	beq.n	8003baa <TIM_Base_SetConfig+0x62>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a18      	ldr	r2, [pc, #96]	; (8003c08 <TIM_Base_SetConfig+0xc0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d108      	bne.n	8003bbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a07      	ldr	r2, [pc, #28]	; (8003c00 <TIM_Base_SetConfig+0xb8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d103      	bne.n	8003bf0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	615a      	str	r2, [r3, #20]
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr
 8003c00:	40012c00 	.word	0x40012c00
 8003c04:	40000400 	.word	0x40000400
 8003c08:	40000800 	.word	0x40000800

08003c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f023 0201 	bic.w	r2, r3, #1
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f023 030a 	bic.w	r3, r3, #10
 8003c48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	621a      	str	r2, [r3, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f023 0210 	bic.w	r2, r3, #16
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	031b      	lsls	r3, r3, #12
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ca4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	621a      	str	r2, [r3, #32]
}
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b085      	sub	sp, #20
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f043 0307 	orr.w	r3, r3, #7
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	609a      	str	r2, [r3, #8]
}
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr

08003cfa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b087      	sub	sp, #28
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	607a      	str	r2, [r7, #4]
 8003d06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	021a      	lsls	r2, r3, #8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	609a      	str	r2, [r3, #8]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e046      	b.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00e      	beq.n	8003db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9c:	d009      	beq.n	8003db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a12      	ldr	r2, [pc, #72]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a10      	ldr	r2, [pc, #64]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10c      	bne.n	8003dcc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr
 8003de8:	40012c00 	.word	0x40012c00
 8003dec:	40000400 	.word	0x40000400
 8003df0:	40000800 	.word	0x40000800

08003df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e03f      	b.n	8003eaa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fe fb3c 	bl	80024bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2224      	movs	r2, #36	; 0x24
 8003e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f9a3 	bl	80041a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b08a      	sub	sp, #40	; 0x28
 8003eb6:	af02      	add	r7, sp, #8
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	d17c      	bne.n	8003fcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_UART_Transmit+0x2c>
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e075      	b.n	8003fce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_UART_Transmit+0x3e>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e06e      	b.n	8003fce <HAL_UART_Transmit+0x11c>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2221      	movs	r2, #33	; 0x21
 8003f02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003f06:	f7fe fbdb 	bl	80026c0 <HAL_GetTick>
 8003f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	88fa      	ldrh	r2, [r7, #6]
 8003f10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	88fa      	ldrh	r2, [r7, #6]
 8003f16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f20:	d108      	bne.n	8003f34 <HAL_UART_Transmit+0x82>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d104      	bne.n	8003f34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	e003      	b.n	8003f3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003f44:	e02a      	b.n	8003f9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2180      	movs	r1, #128	; 0x80
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f8df 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e036      	b.n	8003fce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	3302      	adds	r3, #2
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	e007      	b.n	8003f8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	781a      	ldrb	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1cf      	bne.n	8003f46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2200      	movs	r2, #0
 8003fae:	2140      	movs	r1, #64	; 0x40
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f8af 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e006      	b.n	8003fce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e000      	b.n	8003fce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b08a      	sub	sp, #40	; 0x28
 8003fda:	af02      	add	r7, sp, #8
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	603b      	str	r3, [r7, #0]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	f040 8089 	bne.w	800410a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_UART_Receive+0x2e>
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e081      	b.n	800410c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_UART_Receive+0x40>
 8004012:	2302      	movs	r3, #2
 8004014:	e07a      	b.n	800410c <HAL_UART_Receive+0x136>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2222      	movs	r2, #34	; 0x22
 8004028:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800402c:	f7fe fb48 	bl	80026c0 <HAL_GetTick>
 8004030:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	88fa      	ldrh	r2, [r7, #6]
 8004036:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	88fa      	ldrh	r2, [r7, #6]
 800403c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004046:	d108      	bne.n	800405a <HAL_UART_Receive+0x84>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d104      	bne.n	800405a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8004050:	2300      	movs	r3, #0
 8004052:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	e003      	b.n	8004062 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800406a:	e043      	b.n	80040f4 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2200      	movs	r2, #0
 8004074:	2120      	movs	r1, #32
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f84c 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e042      	b.n	800410c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10c      	bne.n	80040a6 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	b29b      	uxth	r3, r3
 8004094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004098:	b29a      	uxth	r2, r3
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	3302      	adds	r3, #2
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	e01f      	b.n	80040e6 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	d007      	beq.n	80040c0 <HAL_UART_Receive+0xea>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <HAL_UART_Receive+0xf8>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e008      	b.n	80040e0 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	3301      	adds	r3, #1
 80040e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1b6      	bne.n	800406c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	e000      	b.n	800410c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3720      	adds	r7, #32
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004124:	e02c      	b.n	8004180 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d028      	beq.n	8004180 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <UART_WaitOnFlagUntilTimeout+0x30>
 8004134:	f7fe fac4 	bl	80026c0 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	429a      	cmp	r2, r3
 8004142:	d21d      	bcs.n	8004180 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004152:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e00f      	b.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4013      	ands	r3, r2
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	429a      	cmp	r2, r3
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	429a      	cmp	r2, r3
 800419c:	d0c3      	beq.n	8004126 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041e2:	f023 030c 	bic.w	r3, r3, #12
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a2c      	ldr	r2, [pc, #176]	; (80042bc <UART_SetConfig+0x114>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d103      	bne.n	8004218 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004210:	f7ff f95e 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	e002      	b.n	800421e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004218:	f7ff f946 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 800421c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009a      	lsls	r2, r3, #2
 8004228:	441a      	add	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	4a22      	ldr	r2, [pc, #136]	; (80042c0 <UART_SetConfig+0x118>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	0119      	lsls	r1, r3, #4
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009a      	lsls	r2, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	fbb2 f2f3 	udiv	r2, r2, r3
 8004254:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <UART_SetConfig+0x118>)
 8004256:	fba3 0302 	umull	r0, r3, r3, r2
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	2064      	movs	r0, #100	; 0x64
 800425e:	fb00 f303 	mul.w	r3, r0, r3
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	3332      	adds	r3, #50	; 0x32
 8004268:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <UART_SetConfig+0x118>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004274:	4419      	add	r1, r3
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	009a      	lsls	r2, r3, #2
 8004280:	441a      	add	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	fbb2 f2f3 	udiv	r2, r2, r3
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <UART_SetConfig+0x118>)
 800428e:	fba3 0302 	umull	r0, r3, r3, r2
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2064      	movs	r0, #100	; 0x64
 8004296:	fb00 f303 	mul.w	r3, r0, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	3332      	adds	r3, #50	; 0x32
 80042a0:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <UART_SetConfig+0x118>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	f003 020f 	and.w	r2, r3, #15
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	440a      	add	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40013800 	.word	0x40013800
 80042c0:	51eb851f 	.word	0x51eb851f

080042c4 <__errno>:
 80042c4:	4b01      	ldr	r3, [pc, #4]	; (80042cc <__errno+0x8>)
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	2000012c 	.word	0x2000012c

080042d0 <__libc_init_array>:
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	2600      	movs	r6, #0
 80042d4:	4d0c      	ldr	r5, [pc, #48]	; (8004308 <__libc_init_array+0x38>)
 80042d6:	4c0d      	ldr	r4, [pc, #52]	; (800430c <__libc_init_array+0x3c>)
 80042d8:	1b64      	subs	r4, r4, r5
 80042da:	10a4      	asrs	r4, r4, #2
 80042dc:	42a6      	cmp	r6, r4
 80042de:	d109      	bne.n	80042f4 <__libc_init_array+0x24>
 80042e0:	f002 febc 	bl	800705c <_init>
 80042e4:	2600      	movs	r6, #0
 80042e6:	4d0a      	ldr	r5, [pc, #40]	; (8004310 <__libc_init_array+0x40>)
 80042e8:	4c0a      	ldr	r4, [pc, #40]	; (8004314 <__libc_init_array+0x44>)
 80042ea:	1b64      	subs	r4, r4, r5
 80042ec:	10a4      	asrs	r4, r4, #2
 80042ee:	42a6      	cmp	r6, r4
 80042f0:	d105      	bne.n	80042fe <__libc_init_array+0x2e>
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
 80042f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f8:	4798      	blx	r3
 80042fa:	3601      	adds	r6, #1
 80042fc:	e7ee      	b.n	80042dc <__libc_init_array+0xc>
 80042fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004302:	4798      	blx	r3
 8004304:	3601      	adds	r6, #1
 8004306:	e7f2      	b.n	80042ee <__libc_init_array+0x1e>
 8004308:	080074a4 	.word	0x080074a4
 800430c:	080074a4 	.word	0x080074a4
 8004310:	080074a4 	.word	0x080074a4
 8004314:	080074a8 	.word	0x080074a8

08004318 <memset>:
 8004318:	4603      	mov	r3, r0
 800431a:	4402      	add	r2, r0
 800431c:	4293      	cmp	r3, r2
 800431e:	d100      	bne.n	8004322 <memset+0xa>
 8004320:	4770      	bx	lr
 8004322:	f803 1b01 	strb.w	r1, [r3], #1
 8004326:	e7f9      	b.n	800431c <memset+0x4>

08004328 <__cvt>:
 8004328:	2b00      	cmp	r3, #0
 800432a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800432e:	461f      	mov	r7, r3
 8004330:	bfbb      	ittet	lt
 8004332:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004336:	461f      	movlt	r7, r3
 8004338:	2300      	movge	r3, #0
 800433a:	232d      	movlt	r3, #45	; 0x2d
 800433c:	b088      	sub	sp, #32
 800433e:	4614      	mov	r4, r2
 8004340:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004342:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004344:	7013      	strb	r3, [r2, #0]
 8004346:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004348:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800434c:	f023 0820 	bic.w	r8, r3, #32
 8004350:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004354:	d005      	beq.n	8004362 <__cvt+0x3a>
 8004356:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800435a:	d100      	bne.n	800435e <__cvt+0x36>
 800435c:	3501      	adds	r5, #1
 800435e:	2302      	movs	r3, #2
 8004360:	e000      	b.n	8004364 <__cvt+0x3c>
 8004362:	2303      	movs	r3, #3
 8004364:	aa07      	add	r2, sp, #28
 8004366:	9204      	str	r2, [sp, #16]
 8004368:	aa06      	add	r2, sp, #24
 800436a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800436e:	e9cd 3500 	strd	r3, r5, [sp]
 8004372:	4622      	mov	r2, r4
 8004374:	463b      	mov	r3, r7
 8004376:	f000 fce7 	bl	8004d48 <_dtoa_r>
 800437a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800437e:	4606      	mov	r6, r0
 8004380:	d102      	bne.n	8004388 <__cvt+0x60>
 8004382:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004384:	07db      	lsls	r3, r3, #31
 8004386:	d522      	bpl.n	80043ce <__cvt+0xa6>
 8004388:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800438c:	eb06 0905 	add.w	r9, r6, r5
 8004390:	d110      	bne.n	80043b4 <__cvt+0x8c>
 8004392:	7833      	ldrb	r3, [r6, #0]
 8004394:	2b30      	cmp	r3, #48	; 0x30
 8004396:	d10a      	bne.n	80043ae <__cvt+0x86>
 8004398:	2200      	movs	r2, #0
 800439a:	2300      	movs	r3, #0
 800439c:	4620      	mov	r0, r4
 800439e:	4639      	mov	r1, r7
 80043a0:	f7fc fb02 	bl	80009a8 <__aeabi_dcmpeq>
 80043a4:	b918      	cbnz	r0, 80043ae <__cvt+0x86>
 80043a6:	f1c5 0501 	rsb	r5, r5, #1
 80043aa:	f8ca 5000 	str.w	r5, [sl]
 80043ae:	f8da 3000 	ldr.w	r3, [sl]
 80043b2:	4499      	add	r9, r3
 80043b4:	2200      	movs	r2, #0
 80043b6:	2300      	movs	r3, #0
 80043b8:	4620      	mov	r0, r4
 80043ba:	4639      	mov	r1, r7
 80043bc:	f7fc faf4 	bl	80009a8 <__aeabi_dcmpeq>
 80043c0:	b108      	cbz	r0, 80043c6 <__cvt+0x9e>
 80043c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80043c6:	2230      	movs	r2, #48	; 0x30
 80043c8:	9b07      	ldr	r3, [sp, #28]
 80043ca:	454b      	cmp	r3, r9
 80043cc:	d307      	bcc.n	80043de <__cvt+0xb6>
 80043ce:	4630      	mov	r0, r6
 80043d0:	9b07      	ldr	r3, [sp, #28]
 80043d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80043d4:	1b9b      	subs	r3, r3, r6
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	b008      	add	sp, #32
 80043da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043de:	1c59      	adds	r1, r3, #1
 80043e0:	9107      	str	r1, [sp, #28]
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	e7f0      	b.n	80043c8 <__cvt+0xa0>

080043e6 <__exponent>:
 80043e6:	4603      	mov	r3, r0
 80043e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043ea:	2900      	cmp	r1, #0
 80043ec:	f803 2b02 	strb.w	r2, [r3], #2
 80043f0:	bfb6      	itet	lt
 80043f2:	222d      	movlt	r2, #45	; 0x2d
 80043f4:	222b      	movge	r2, #43	; 0x2b
 80043f6:	4249      	neglt	r1, r1
 80043f8:	2909      	cmp	r1, #9
 80043fa:	7042      	strb	r2, [r0, #1]
 80043fc:	dd2b      	ble.n	8004456 <__exponent+0x70>
 80043fe:	f10d 0407 	add.w	r4, sp, #7
 8004402:	46a4      	mov	ip, r4
 8004404:	270a      	movs	r7, #10
 8004406:	fb91 f6f7 	sdiv	r6, r1, r7
 800440a:	460a      	mov	r2, r1
 800440c:	46a6      	mov	lr, r4
 800440e:	fb07 1516 	mls	r5, r7, r6, r1
 8004412:	2a63      	cmp	r2, #99	; 0x63
 8004414:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004418:	4631      	mov	r1, r6
 800441a:	f104 34ff 	add.w	r4, r4, #4294967295
 800441e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004422:	dcf0      	bgt.n	8004406 <__exponent+0x20>
 8004424:	3130      	adds	r1, #48	; 0x30
 8004426:	f1ae 0502 	sub.w	r5, lr, #2
 800442a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800442e:	4629      	mov	r1, r5
 8004430:	1c44      	adds	r4, r0, #1
 8004432:	4561      	cmp	r1, ip
 8004434:	d30a      	bcc.n	800444c <__exponent+0x66>
 8004436:	f10d 0209 	add.w	r2, sp, #9
 800443a:	eba2 020e 	sub.w	r2, r2, lr
 800443e:	4565      	cmp	r5, ip
 8004440:	bf88      	it	hi
 8004442:	2200      	movhi	r2, #0
 8004444:	4413      	add	r3, r2
 8004446:	1a18      	subs	r0, r3, r0
 8004448:	b003      	add	sp, #12
 800444a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800444c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004450:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004454:	e7ed      	b.n	8004432 <__exponent+0x4c>
 8004456:	2330      	movs	r3, #48	; 0x30
 8004458:	3130      	adds	r1, #48	; 0x30
 800445a:	7083      	strb	r3, [r0, #2]
 800445c:	70c1      	strb	r1, [r0, #3]
 800445e:	1d03      	adds	r3, r0, #4
 8004460:	e7f1      	b.n	8004446 <__exponent+0x60>
	...

08004464 <_printf_float>:
 8004464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004468:	b091      	sub	sp, #68	; 0x44
 800446a:	460c      	mov	r4, r1
 800446c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004470:	4616      	mov	r6, r2
 8004472:	461f      	mov	r7, r3
 8004474:	4605      	mov	r5, r0
 8004476:	f001 fa55 	bl	8005924 <_localeconv_r>
 800447a:	6803      	ldr	r3, [r0, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	9309      	str	r3, [sp, #36]	; 0x24
 8004480:	f7fb fe66 	bl	8000150 <strlen>
 8004484:	2300      	movs	r3, #0
 8004486:	930e      	str	r3, [sp, #56]	; 0x38
 8004488:	f8d8 3000 	ldr.w	r3, [r8]
 800448c:	900a      	str	r0, [sp, #40]	; 0x28
 800448e:	3307      	adds	r3, #7
 8004490:	f023 0307 	bic.w	r3, r3, #7
 8004494:	f103 0208 	add.w	r2, r3, #8
 8004498:	f894 9018 	ldrb.w	r9, [r4, #24]
 800449c:	f8d4 b000 	ldr.w	fp, [r4]
 80044a0:	f8c8 2000 	str.w	r2, [r8]
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80044ac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80044b0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80044b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80044b6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ba:	4640      	mov	r0, r8
 80044bc:	4b9c      	ldr	r3, [pc, #624]	; (8004730 <_printf_float+0x2cc>)
 80044be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044c0:	f7fc faa4 	bl	8000a0c <__aeabi_dcmpun>
 80044c4:	bb70      	cbnz	r0, 8004524 <_printf_float+0xc0>
 80044c6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ca:	4640      	mov	r0, r8
 80044cc:	4b98      	ldr	r3, [pc, #608]	; (8004730 <_printf_float+0x2cc>)
 80044ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044d0:	f7fc fa7e 	bl	80009d0 <__aeabi_dcmple>
 80044d4:	bb30      	cbnz	r0, 8004524 <_printf_float+0xc0>
 80044d6:	2200      	movs	r2, #0
 80044d8:	2300      	movs	r3, #0
 80044da:	4640      	mov	r0, r8
 80044dc:	4651      	mov	r1, sl
 80044de:	f7fc fa6d 	bl	80009bc <__aeabi_dcmplt>
 80044e2:	b110      	cbz	r0, 80044ea <_printf_float+0x86>
 80044e4:	232d      	movs	r3, #45	; 0x2d
 80044e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ea:	4b92      	ldr	r3, [pc, #584]	; (8004734 <_printf_float+0x2d0>)
 80044ec:	4892      	ldr	r0, [pc, #584]	; (8004738 <_printf_float+0x2d4>)
 80044ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80044f2:	bf94      	ite	ls
 80044f4:	4698      	movls	r8, r3
 80044f6:	4680      	movhi	r8, r0
 80044f8:	2303      	movs	r3, #3
 80044fa:	f04f 0a00 	mov.w	sl, #0
 80044fe:	6123      	str	r3, [r4, #16]
 8004500:	f02b 0304 	bic.w	r3, fp, #4
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	4633      	mov	r3, r6
 8004508:	4621      	mov	r1, r4
 800450a:	4628      	mov	r0, r5
 800450c:	9700      	str	r7, [sp, #0]
 800450e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004510:	f000 f9d4 	bl	80048bc <_printf_common>
 8004514:	3001      	adds	r0, #1
 8004516:	f040 8090 	bne.w	800463a <_printf_float+0x1d6>
 800451a:	f04f 30ff 	mov.w	r0, #4294967295
 800451e:	b011      	add	sp, #68	; 0x44
 8004520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004524:	4642      	mov	r2, r8
 8004526:	4653      	mov	r3, sl
 8004528:	4640      	mov	r0, r8
 800452a:	4651      	mov	r1, sl
 800452c:	f7fc fa6e 	bl	8000a0c <__aeabi_dcmpun>
 8004530:	b148      	cbz	r0, 8004546 <_printf_float+0xe2>
 8004532:	f1ba 0f00 	cmp.w	sl, #0
 8004536:	bfb8      	it	lt
 8004538:	232d      	movlt	r3, #45	; 0x2d
 800453a:	4880      	ldr	r0, [pc, #512]	; (800473c <_printf_float+0x2d8>)
 800453c:	bfb8      	it	lt
 800453e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004542:	4b7f      	ldr	r3, [pc, #508]	; (8004740 <_printf_float+0x2dc>)
 8004544:	e7d3      	b.n	80044ee <_printf_float+0x8a>
 8004546:	6863      	ldr	r3, [r4, #4]
 8004548:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	d142      	bne.n	80045d6 <_printf_float+0x172>
 8004550:	2306      	movs	r3, #6
 8004552:	6063      	str	r3, [r4, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	9206      	str	r2, [sp, #24]
 8004558:	aa0e      	add	r2, sp, #56	; 0x38
 800455a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800455e:	aa0d      	add	r2, sp, #52	; 0x34
 8004560:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004564:	9203      	str	r2, [sp, #12]
 8004566:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800456a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	6863      	ldr	r3, [r4, #4]
 8004572:	4642      	mov	r2, r8
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	4628      	mov	r0, r5
 8004578:	4653      	mov	r3, sl
 800457a:	910b      	str	r1, [sp, #44]	; 0x2c
 800457c:	f7ff fed4 	bl	8004328 <__cvt>
 8004580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004582:	4680      	mov	r8, r0
 8004584:	2947      	cmp	r1, #71	; 0x47
 8004586:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004588:	d108      	bne.n	800459c <_printf_float+0x138>
 800458a:	1cc8      	adds	r0, r1, #3
 800458c:	db02      	blt.n	8004594 <_printf_float+0x130>
 800458e:	6863      	ldr	r3, [r4, #4]
 8004590:	4299      	cmp	r1, r3
 8004592:	dd40      	ble.n	8004616 <_printf_float+0x1b2>
 8004594:	f1a9 0902 	sub.w	r9, r9, #2
 8004598:	fa5f f989 	uxtb.w	r9, r9
 800459c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80045a0:	d81f      	bhi.n	80045e2 <_printf_float+0x17e>
 80045a2:	464a      	mov	r2, r9
 80045a4:	3901      	subs	r1, #1
 80045a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045aa:	910d      	str	r1, [sp, #52]	; 0x34
 80045ac:	f7ff ff1b 	bl	80043e6 <__exponent>
 80045b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045b2:	4682      	mov	sl, r0
 80045b4:	1813      	adds	r3, r2, r0
 80045b6:	2a01      	cmp	r2, #1
 80045b8:	6123      	str	r3, [r4, #16]
 80045ba:	dc02      	bgt.n	80045c2 <_printf_float+0x15e>
 80045bc:	6822      	ldr	r2, [r4, #0]
 80045be:	07d2      	lsls	r2, r2, #31
 80045c0:	d501      	bpl.n	80045c6 <_printf_float+0x162>
 80045c2:	3301      	adds	r3, #1
 80045c4:	6123      	str	r3, [r4, #16]
 80045c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d09b      	beq.n	8004506 <_printf_float+0xa2>
 80045ce:	232d      	movs	r3, #45	; 0x2d
 80045d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045d4:	e797      	b.n	8004506 <_printf_float+0xa2>
 80045d6:	2947      	cmp	r1, #71	; 0x47
 80045d8:	d1bc      	bne.n	8004554 <_printf_float+0xf0>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1ba      	bne.n	8004554 <_printf_float+0xf0>
 80045de:	2301      	movs	r3, #1
 80045e0:	e7b7      	b.n	8004552 <_printf_float+0xee>
 80045e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80045e6:	d118      	bne.n	800461a <_printf_float+0x1b6>
 80045e8:	2900      	cmp	r1, #0
 80045ea:	6863      	ldr	r3, [r4, #4]
 80045ec:	dd0b      	ble.n	8004606 <_printf_float+0x1a2>
 80045ee:	6121      	str	r1, [r4, #16]
 80045f0:	b913      	cbnz	r3, 80045f8 <_printf_float+0x194>
 80045f2:	6822      	ldr	r2, [r4, #0]
 80045f4:	07d0      	lsls	r0, r2, #31
 80045f6:	d502      	bpl.n	80045fe <_printf_float+0x19a>
 80045f8:	3301      	adds	r3, #1
 80045fa:	440b      	add	r3, r1
 80045fc:	6123      	str	r3, [r4, #16]
 80045fe:	f04f 0a00 	mov.w	sl, #0
 8004602:	65a1      	str	r1, [r4, #88]	; 0x58
 8004604:	e7df      	b.n	80045c6 <_printf_float+0x162>
 8004606:	b913      	cbnz	r3, 800460e <_printf_float+0x1aa>
 8004608:	6822      	ldr	r2, [r4, #0]
 800460a:	07d2      	lsls	r2, r2, #31
 800460c:	d501      	bpl.n	8004612 <_printf_float+0x1ae>
 800460e:	3302      	adds	r3, #2
 8004610:	e7f4      	b.n	80045fc <_printf_float+0x198>
 8004612:	2301      	movs	r3, #1
 8004614:	e7f2      	b.n	80045fc <_printf_float+0x198>
 8004616:	f04f 0967 	mov.w	r9, #103	; 0x67
 800461a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800461c:	4299      	cmp	r1, r3
 800461e:	db05      	blt.n	800462c <_printf_float+0x1c8>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	6121      	str	r1, [r4, #16]
 8004624:	07d8      	lsls	r0, r3, #31
 8004626:	d5ea      	bpl.n	80045fe <_printf_float+0x19a>
 8004628:	1c4b      	adds	r3, r1, #1
 800462a:	e7e7      	b.n	80045fc <_printf_float+0x198>
 800462c:	2900      	cmp	r1, #0
 800462e:	bfcc      	ite	gt
 8004630:	2201      	movgt	r2, #1
 8004632:	f1c1 0202 	rsble	r2, r1, #2
 8004636:	4413      	add	r3, r2
 8004638:	e7e0      	b.n	80045fc <_printf_float+0x198>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	055a      	lsls	r2, r3, #21
 800463e:	d407      	bmi.n	8004650 <_printf_float+0x1ec>
 8004640:	6923      	ldr	r3, [r4, #16]
 8004642:	4642      	mov	r2, r8
 8004644:	4631      	mov	r1, r6
 8004646:	4628      	mov	r0, r5
 8004648:	47b8      	blx	r7
 800464a:	3001      	adds	r0, #1
 800464c:	d12b      	bne.n	80046a6 <_printf_float+0x242>
 800464e:	e764      	b.n	800451a <_printf_float+0xb6>
 8004650:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004654:	f240 80dd 	bls.w	8004812 <_printf_float+0x3ae>
 8004658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800465c:	2200      	movs	r2, #0
 800465e:	2300      	movs	r3, #0
 8004660:	f7fc f9a2 	bl	80009a8 <__aeabi_dcmpeq>
 8004664:	2800      	cmp	r0, #0
 8004666:	d033      	beq.n	80046d0 <_printf_float+0x26c>
 8004668:	2301      	movs	r3, #1
 800466a:	4631      	mov	r1, r6
 800466c:	4628      	mov	r0, r5
 800466e:	4a35      	ldr	r2, [pc, #212]	; (8004744 <_printf_float+0x2e0>)
 8004670:	47b8      	blx	r7
 8004672:	3001      	adds	r0, #1
 8004674:	f43f af51 	beq.w	800451a <_printf_float+0xb6>
 8004678:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800467c:	429a      	cmp	r2, r3
 800467e:	db02      	blt.n	8004686 <_printf_float+0x222>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	07d8      	lsls	r0, r3, #31
 8004684:	d50f      	bpl.n	80046a6 <_printf_float+0x242>
 8004686:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800468a:	4631      	mov	r1, r6
 800468c:	4628      	mov	r0, r5
 800468e:	47b8      	blx	r7
 8004690:	3001      	adds	r0, #1
 8004692:	f43f af42 	beq.w	800451a <_printf_float+0xb6>
 8004696:	f04f 0800 	mov.w	r8, #0
 800469a:	f104 091a 	add.w	r9, r4, #26
 800469e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046a0:	3b01      	subs	r3, #1
 80046a2:	4543      	cmp	r3, r8
 80046a4:	dc09      	bgt.n	80046ba <_printf_float+0x256>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	079b      	lsls	r3, r3, #30
 80046aa:	f100 8102 	bmi.w	80048b2 <_printf_float+0x44e>
 80046ae:	68e0      	ldr	r0, [r4, #12]
 80046b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046b2:	4298      	cmp	r0, r3
 80046b4:	bfb8      	it	lt
 80046b6:	4618      	movlt	r0, r3
 80046b8:	e731      	b.n	800451e <_printf_float+0xba>
 80046ba:	2301      	movs	r3, #1
 80046bc:	464a      	mov	r2, r9
 80046be:	4631      	mov	r1, r6
 80046c0:	4628      	mov	r0, r5
 80046c2:	47b8      	blx	r7
 80046c4:	3001      	adds	r0, #1
 80046c6:	f43f af28 	beq.w	800451a <_printf_float+0xb6>
 80046ca:	f108 0801 	add.w	r8, r8, #1
 80046ce:	e7e6      	b.n	800469e <_printf_float+0x23a>
 80046d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	dc38      	bgt.n	8004748 <_printf_float+0x2e4>
 80046d6:	2301      	movs	r3, #1
 80046d8:	4631      	mov	r1, r6
 80046da:	4628      	mov	r0, r5
 80046dc:	4a19      	ldr	r2, [pc, #100]	; (8004744 <_printf_float+0x2e0>)
 80046de:	47b8      	blx	r7
 80046e0:	3001      	adds	r0, #1
 80046e2:	f43f af1a 	beq.w	800451a <_printf_float+0xb6>
 80046e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046ea:	4313      	orrs	r3, r2
 80046ec:	d102      	bne.n	80046f4 <_printf_float+0x290>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	07d9      	lsls	r1, r3, #31
 80046f2:	d5d8      	bpl.n	80046a6 <_printf_float+0x242>
 80046f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046f8:	4631      	mov	r1, r6
 80046fa:	4628      	mov	r0, r5
 80046fc:	47b8      	blx	r7
 80046fe:	3001      	adds	r0, #1
 8004700:	f43f af0b 	beq.w	800451a <_printf_float+0xb6>
 8004704:	f04f 0900 	mov.w	r9, #0
 8004708:	f104 0a1a 	add.w	sl, r4, #26
 800470c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800470e:	425b      	negs	r3, r3
 8004710:	454b      	cmp	r3, r9
 8004712:	dc01      	bgt.n	8004718 <_printf_float+0x2b4>
 8004714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004716:	e794      	b.n	8004642 <_printf_float+0x1de>
 8004718:	2301      	movs	r3, #1
 800471a:	4652      	mov	r2, sl
 800471c:	4631      	mov	r1, r6
 800471e:	4628      	mov	r0, r5
 8004720:	47b8      	blx	r7
 8004722:	3001      	adds	r0, #1
 8004724:	f43f aef9 	beq.w	800451a <_printf_float+0xb6>
 8004728:	f109 0901 	add.w	r9, r9, #1
 800472c:	e7ee      	b.n	800470c <_printf_float+0x2a8>
 800472e:	bf00      	nop
 8004730:	7fefffff 	.word	0x7fefffff
 8004734:	080070c4 	.word	0x080070c4
 8004738:	080070c8 	.word	0x080070c8
 800473c:	080070d0 	.word	0x080070d0
 8004740:	080070cc 	.word	0x080070cc
 8004744:	080070d4 	.word	0x080070d4
 8004748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800474a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800474c:	429a      	cmp	r2, r3
 800474e:	bfa8      	it	ge
 8004750:	461a      	movge	r2, r3
 8004752:	2a00      	cmp	r2, #0
 8004754:	4691      	mov	r9, r2
 8004756:	dc37      	bgt.n	80047c8 <_printf_float+0x364>
 8004758:	f04f 0b00 	mov.w	fp, #0
 800475c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004760:	f104 021a 	add.w	r2, r4, #26
 8004764:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004768:	ebaa 0309 	sub.w	r3, sl, r9
 800476c:	455b      	cmp	r3, fp
 800476e:	dc33      	bgt.n	80047d8 <_printf_float+0x374>
 8004770:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004774:	429a      	cmp	r2, r3
 8004776:	db3b      	blt.n	80047f0 <_printf_float+0x38c>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	07da      	lsls	r2, r3, #31
 800477c:	d438      	bmi.n	80047f0 <_printf_float+0x38c>
 800477e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004780:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004782:	eba2 030a 	sub.w	r3, r2, sl
 8004786:	eba2 0901 	sub.w	r9, r2, r1
 800478a:	4599      	cmp	r9, r3
 800478c:	bfa8      	it	ge
 800478e:	4699      	movge	r9, r3
 8004790:	f1b9 0f00 	cmp.w	r9, #0
 8004794:	dc34      	bgt.n	8004800 <_printf_float+0x39c>
 8004796:	f04f 0800 	mov.w	r8, #0
 800479a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800479e:	f104 0a1a 	add.w	sl, r4, #26
 80047a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	eba3 0309 	sub.w	r3, r3, r9
 80047ac:	4543      	cmp	r3, r8
 80047ae:	f77f af7a 	ble.w	80046a6 <_printf_float+0x242>
 80047b2:	2301      	movs	r3, #1
 80047b4:	4652      	mov	r2, sl
 80047b6:	4631      	mov	r1, r6
 80047b8:	4628      	mov	r0, r5
 80047ba:	47b8      	blx	r7
 80047bc:	3001      	adds	r0, #1
 80047be:	f43f aeac 	beq.w	800451a <_printf_float+0xb6>
 80047c2:	f108 0801 	add.w	r8, r8, #1
 80047c6:	e7ec      	b.n	80047a2 <_printf_float+0x33e>
 80047c8:	4613      	mov	r3, r2
 80047ca:	4631      	mov	r1, r6
 80047cc:	4642      	mov	r2, r8
 80047ce:	4628      	mov	r0, r5
 80047d0:	47b8      	blx	r7
 80047d2:	3001      	adds	r0, #1
 80047d4:	d1c0      	bne.n	8004758 <_printf_float+0x2f4>
 80047d6:	e6a0      	b.n	800451a <_printf_float+0xb6>
 80047d8:	2301      	movs	r3, #1
 80047da:	4631      	mov	r1, r6
 80047dc:	4628      	mov	r0, r5
 80047de:	920b      	str	r2, [sp, #44]	; 0x2c
 80047e0:	47b8      	blx	r7
 80047e2:	3001      	adds	r0, #1
 80047e4:	f43f ae99 	beq.w	800451a <_printf_float+0xb6>
 80047e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047ea:	f10b 0b01 	add.w	fp, fp, #1
 80047ee:	e7b9      	b.n	8004764 <_printf_float+0x300>
 80047f0:	4631      	mov	r1, r6
 80047f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	d1bf      	bne.n	800477e <_printf_float+0x31a>
 80047fe:	e68c      	b.n	800451a <_printf_float+0xb6>
 8004800:	464b      	mov	r3, r9
 8004802:	4631      	mov	r1, r6
 8004804:	4628      	mov	r0, r5
 8004806:	eb08 020a 	add.w	r2, r8, sl
 800480a:	47b8      	blx	r7
 800480c:	3001      	adds	r0, #1
 800480e:	d1c2      	bne.n	8004796 <_printf_float+0x332>
 8004810:	e683      	b.n	800451a <_printf_float+0xb6>
 8004812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004814:	2a01      	cmp	r2, #1
 8004816:	dc01      	bgt.n	800481c <_printf_float+0x3b8>
 8004818:	07db      	lsls	r3, r3, #31
 800481a:	d537      	bpl.n	800488c <_printf_float+0x428>
 800481c:	2301      	movs	r3, #1
 800481e:	4642      	mov	r2, r8
 8004820:	4631      	mov	r1, r6
 8004822:	4628      	mov	r0, r5
 8004824:	47b8      	blx	r7
 8004826:	3001      	adds	r0, #1
 8004828:	f43f ae77 	beq.w	800451a <_printf_float+0xb6>
 800482c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004830:	4631      	mov	r1, r6
 8004832:	4628      	mov	r0, r5
 8004834:	47b8      	blx	r7
 8004836:	3001      	adds	r0, #1
 8004838:	f43f ae6f 	beq.w	800451a <_printf_float+0xb6>
 800483c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004840:	2200      	movs	r2, #0
 8004842:	2300      	movs	r3, #0
 8004844:	f7fc f8b0 	bl	80009a8 <__aeabi_dcmpeq>
 8004848:	b9d8      	cbnz	r0, 8004882 <_printf_float+0x41e>
 800484a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800484c:	f108 0201 	add.w	r2, r8, #1
 8004850:	3b01      	subs	r3, #1
 8004852:	4631      	mov	r1, r6
 8004854:	4628      	mov	r0, r5
 8004856:	47b8      	blx	r7
 8004858:	3001      	adds	r0, #1
 800485a:	d10e      	bne.n	800487a <_printf_float+0x416>
 800485c:	e65d      	b.n	800451a <_printf_float+0xb6>
 800485e:	2301      	movs	r3, #1
 8004860:	464a      	mov	r2, r9
 8004862:	4631      	mov	r1, r6
 8004864:	4628      	mov	r0, r5
 8004866:	47b8      	blx	r7
 8004868:	3001      	adds	r0, #1
 800486a:	f43f ae56 	beq.w	800451a <_printf_float+0xb6>
 800486e:	f108 0801 	add.w	r8, r8, #1
 8004872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004874:	3b01      	subs	r3, #1
 8004876:	4543      	cmp	r3, r8
 8004878:	dcf1      	bgt.n	800485e <_printf_float+0x3fa>
 800487a:	4653      	mov	r3, sl
 800487c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004880:	e6e0      	b.n	8004644 <_printf_float+0x1e0>
 8004882:	f04f 0800 	mov.w	r8, #0
 8004886:	f104 091a 	add.w	r9, r4, #26
 800488a:	e7f2      	b.n	8004872 <_printf_float+0x40e>
 800488c:	2301      	movs	r3, #1
 800488e:	4642      	mov	r2, r8
 8004890:	e7df      	b.n	8004852 <_printf_float+0x3ee>
 8004892:	2301      	movs	r3, #1
 8004894:	464a      	mov	r2, r9
 8004896:	4631      	mov	r1, r6
 8004898:	4628      	mov	r0, r5
 800489a:	47b8      	blx	r7
 800489c:	3001      	adds	r0, #1
 800489e:	f43f ae3c 	beq.w	800451a <_printf_float+0xb6>
 80048a2:	f108 0801 	add.w	r8, r8, #1
 80048a6:	68e3      	ldr	r3, [r4, #12]
 80048a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80048aa:	1a5b      	subs	r3, r3, r1
 80048ac:	4543      	cmp	r3, r8
 80048ae:	dcf0      	bgt.n	8004892 <_printf_float+0x42e>
 80048b0:	e6fd      	b.n	80046ae <_printf_float+0x24a>
 80048b2:	f04f 0800 	mov.w	r8, #0
 80048b6:	f104 0919 	add.w	r9, r4, #25
 80048ba:	e7f4      	b.n	80048a6 <_printf_float+0x442>

080048bc <_printf_common>:
 80048bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	4616      	mov	r6, r2
 80048c2:	4699      	mov	r9, r3
 80048c4:	688a      	ldr	r2, [r1, #8]
 80048c6:	690b      	ldr	r3, [r1, #16]
 80048c8:	4607      	mov	r7, r0
 80048ca:	4293      	cmp	r3, r2
 80048cc:	bfb8      	it	lt
 80048ce:	4613      	movlt	r3, r2
 80048d0:	6033      	str	r3, [r6, #0]
 80048d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048d6:	460c      	mov	r4, r1
 80048d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048dc:	b10a      	cbz	r2, 80048e2 <_printf_common+0x26>
 80048de:	3301      	adds	r3, #1
 80048e0:	6033      	str	r3, [r6, #0]
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	0699      	lsls	r1, r3, #26
 80048e6:	bf42      	ittt	mi
 80048e8:	6833      	ldrmi	r3, [r6, #0]
 80048ea:	3302      	addmi	r3, #2
 80048ec:	6033      	strmi	r3, [r6, #0]
 80048ee:	6825      	ldr	r5, [r4, #0]
 80048f0:	f015 0506 	ands.w	r5, r5, #6
 80048f4:	d106      	bne.n	8004904 <_printf_common+0x48>
 80048f6:	f104 0a19 	add.w	sl, r4, #25
 80048fa:	68e3      	ldr	r3, [r4, #12]
 80048fc:	6832      	ldr	r2, [r6, #0]
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	42ab      	cmp	r3, r5
 8004902:	dc28      	bgt.n	8004956 <_printf_common+0x9a>
 8004904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004908:	1e13      	subs	r3, r2, #0
 800490a:	6822      	ldr	r2, [r4, #0]
 800490c:	bf18      	it	ne
 800490e:	2301      	movne	r3, #1
 8004910:	0692      	lsls	r2, r2, #26
 8004912:	d42d      	bmi.n	8004970 <_printf_common+0xb4>
 8004914:	4649      	mov	r1, r9
 8004916:	4638      	mov	r0, r7
 8004918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800491c:	47c0      	blx	r8
 800491e:	3001      	adds	r0, #1
 8004920:	d020      	beq.n	8004964 <_printf_common+0xa8>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	68e5      	ldr	r5, [r4, #12]
 8004926:	f003 0306 	and.w	r3, r3, #6
 800492a:	2b04      	cmp	r3, #4
 800492c:	bf18      	it	ne
 800492e:	2500      	movne	r5, #0
 8004930:	6832      	ldr	r2, [r6, #0]
 8004932:	f04f 0600 	mov.w	r6, #0
 8004936:	68a3      	ldr	r3, [r4, #8]
 8004938:	bf08      	it	eq
 800493a:	1aad      	subeq	r5, r5, r2
 800493c:	6922      	ldr	r2, [r4, #16]
 800493e:	bf08      	it	eq
 8004940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004944:	4293      	cmp	r3, r2
 8004946:	bfc4      	itt	gt
 8004948:	1a9b      	subgt	r3, r3, r2
 800494a:	18ed      	addgt	r5, r5, r3
 800494c:	341a      	adds	r4, #26
 800494e:	42b5      	cmp	r5, r6
 8004950:	d11a      	bne.n	8004988 <_printf_common+0xcc>
 8004952:	2000      	movs	r0, #0
 8004954:	e008      	b.n	8004968 <_printf_common+0xac>
 8004956:	2301      	movs	r3, #1
 8004958:	4652      	mov	r2, sl
 800495a:	4649      	mov	r1, r9
 800495c:	4638      	mov	r0, r7
 800495e:	47c0      	blx	r8
 8004960:	3001      	adds	r0, #1
 8004962:	d103      	bne.n	800496c <_printf_common+0xb0>
 8004964:	f04f 30ff 	mov.w	r0, #4294967295
 8004968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800496c:	3501      	adds	r5, #1
 800496e:	e7c4      	b.n	80048fa <_printf_common+0x3e>
 8004970:	2030      	movs	r0, #48	; 0x30
 8004972:	18e1      	adds	r1, r4, r3
 8004974:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800497e:	4422      	add	r2, r4
 8004980:	3302      	adds	r3, #2
 8004982:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004986:	e7c5      	b.n	8004914 <_printf_common+0x58>
 8004988:	2301      	movs	r3, #1
 800498a:	4622      	mov	r2, r4
 800498c:	4649      	mov	r1, r9
 800498e:	4638      	mov	r0, r7
 8004990:	47c0      	blx	r8
 8004992:	3001      	adds	r0, #1
 8004994:	d0e6      	beq.n	8004964 <_printf_common+0xa8>
 8004996:	3601      	adds	r6, #1
 8004998:	e7d9      	b.n	800494e <_printf_common+0x92>
	...

0800499c <_printf_i>:
 800499c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049a0:	460c      	mov	r4, r1
 80049a2:	7e27      	ldrb	r7, [r4, #24]
 80049a4:	4691      	mov	r9, r2
 80049a6:	2f78      	cmp	r7, #120	; 0x78
 80049a8:	4680      	mov	r8, r0
 80049aa:	469a      	mov	sl, r3
 80049ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049b2:	d807      	bhi.n	80049c4 <_printf_i+0x28>
 80049b4:	2f62      	cmp	r7, #98	; 0x62
 80049b6:	d80a      	bhi.n	80049ce <_printf_i+0x32>
 80049b8:	2f00      	cmp	r7, #0
 80049ba:	f000 80d9 	beq.w	8004b70 <_printf_i+0x1d4>
 80049be:	2f58      	cmp	r7, #88	; 0x58
 80049c0:	f000 80a4 	beq.w	8004b0c <_printf_i+0x170>
 80049c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049cc:	e03a      	b.n	8004a44 <_printf_i+0xa8>
 80049ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049d2:	2b15      	cmp	r3, #21
 80049d4:	d8f6      	bhi.n	80049c4 <_printf_i+0x28>
 80049d6:	a001      	add	r0, pc, #4	; (adr r0, 80049dc <_printf_i+0x40>)
 80049d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80049dc:	08004a35 	.word	0x08004a35
 80049e0:	08004a49 	.word	0x08004a49
 80049e4:	080049c5 	.word	0x080049c5
 80049e8:	080049c5 	.word	0x080049c5
 80049ec:	080049c5 	.word	0x080049c5
 80049f0:	080049c5 	.word	0x080049c5
 80049f4:	08004a49 	.word	0x08004a49
 80049f8:	080049c5 	.word	0x080049c5
 80049fc:	080049c5 	.word	0x080049c5
 8004a00:	080049c5 	.word	0x080049c5
 8004a04:	080049c5 	.word	0x080049c5
 8004a08:	08004b57 	.word	0x08004b57
 8004a0c:	08004a79 	.word	0x08004a79
 8004a10:	08004b39 	.word	0x08004b39
 8004a14:	080049c5 	.word	0x080049c5
 8004a18:	080049c5 	.word	0x080049c5
 8004a1c:	08004b79 	.word	0x08004b79
 8004a20:	080049c5 	.word	0x080049c5
 8004a24:	08004a79 	.word	0x08004a79
 8004a28:	080049c5 	.word	0x080049c5
 8004a2c:	080049c5 	.word	0x080049c5
 8004a30:	08004b41 	.word	0x08004b41
 8004a34:	680b      	ldr	r3, [r1, #0]
 8004a36:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a3a:	1d1a      	adds	r2, r3, #4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	600a      	str	r2, [r1, #0]
 8004a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0a4      	b.n	8004b92 <_printf_i+0x1f6>
 8004a48:	6825      	ldr	r5, [r4, #0]
 8004a4a:	6808      	ldr	r0, [r1, #0]
 8004a4c:	062e      	lsls	r6, r5, #24
 8004a4e:	f100 0304 	add.w	r3, r0, #4
 8004a52:	d50a      	bpl.n	8004a6a <_printf_i+0xce>
 8004a54:	6805      	ldr	r5, [r0, #0]
 8004a56:	600b      	str	r3, [r1, #0]
 8004a58:	2d00      	cmp	r5, #0
 8004a5a:	da03      	bge.n	8004a64 <_printf_i+0xc8>
 8004a5c:	232d      	movs	r3, #45	; 0x2d
 8004a5e:	426d      	negs	r5, r5
 8004a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a64:	230a      	movs	r3, #10
 8004a66:	485e      	ldr	r0, [pc, #376]	; (8004be0 <_printf_i+0x244>)
 8004a68:	e019      	b.n	8004a9e <_printf_i+0x102>
 8004a6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a6e:	6805      	ldr	r5, [r0, #0]
 8004a70:	600b      	str	r3, [r1, #0]
 8004a72:	bf18      	it	ne
 8004a74:	b22d      	sxthne	r5, r5
 8004a76:	e7ef      	b.n	8004a58 <_printf_i+0xbc>
 8004a78:	680b      	ldr	r3, [r1, #0]
 8004a7a:	6825      	ldr	r5, [r4, #0]
 8004a7c:	1d18      	adds	r0, r3, #4
 8004a7e:	6008      	str	r0, [r1, #0]
 8004a80:	0628      	lsls	r0, r5, #24
 8004a82:	d501      	bpl.n	8004a88 <_printf_i+0xec>
 8004a84:	681d      	ldr	r5, [r3, #0]
 8004a86:	e002      	b.n	8004a8e <_printf_i+0xf2>
 8004a88:	0669      	lsls	r1, r5, #25
 8004a8a:	d5fb      	bpl.n	8004a84 <_printf_i+0xe8>
 8004a8c:	881d      	ldrh	r5, [r3, #0]
 8004a8e:	2f6f      	cmp	r7, #111	; 0x6f
 8004a90:	bf0c      	ite	eq
 8004a92:	2308      	moveq	r3, #8
 8004a94:	230a      	movne	r3, #10
 8004a96:	4852      	ldr	r0, [pc, #328]	; (8004be0 <_printf_i+0x244>)
 8004a98:	2100      	movs	r1, #0
 8004a9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a9e:	6866      	ldr	r6, [r4, #4]
 8004aa0:	2e00      	cmp	r6, #0
 8004aa2:	bfa8      	it	ge
 8004aa4:	6821      	ldrge	r1, [r4, #0]
 8004aa6:	60a6      	str	r6, [r4, #8]
 8004aa8:	bfa4      	itt	ge
 8004aaa:	f021 0104 	bicge.w	r1, r1, #4
 8004aae:	6021      	strge	r1, [r4, #0]
 8004ab0:	b90d      	cbnz	r5, 8004ab6 <_printf_i+0x11a>
 8004ab2:	2e00      	cmp	r6, #0
 8004ab4:	d04d      	beq.n	8004b52 <_printf_i+0x1b6>
 8004ab6:	4616      	mov	r6, r2
 8004ab8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004abc:	fb03 5711 	mls	r7, r3, r1, r5
 8004ac0:	5dc7      	ldrb	r7, [r0, r7]
 8004ac2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ac6:	462f      	mov	r7, r5
 8004ac8:	42bb      	cmp	r3, r7
 8004aca:	460d      	mov	r5, r1
 8004acc:	d9f4      	bls.n	8004ab8 <_printf_i+0x11c>
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d10b      	bne.n	8004aea <_printf_i+0x14e>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	07df      	lsls	r7, r3, #31
 8004ad6:	d508      	bpl.n	8004aea <_printf_i+0x14e>
 8004ad8:	6923      	ldr	r3, [r4, #16]
 8004ada:	6861      	ldr	r1, [r4, #4]
 8004adc:	4299      	cmp	r1, r3
 8004ade:	bfde      	ittt	le
 8004ae0:	2330      	movle	r3, #48	; 0x30
 8004ae2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ae6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004aea:	1b92      	subs	r2, r2, r6
 8004aec:	6122      	str	r2, [r4, #16]
 8004aee:	464b      	mov	r3, r9
 8004af0:	4621      	mov	r1, r4
 8004af2:	4640      	mov	r0, r8
 8004af4:	f8cd a000 	str.w	sl, [sp]
 8004af8:	aa03      	add	r2, sp, #12
 8004afa:	f7ff fedf 	bl	80048bc <_printf_common>
 8004afe:	3001      	adds	r0, #1
 8004b00:	d14c      	bne.n	8004b9c <_printf_i+0x200>
 8004b02:	f04f 30ff 	mov.w	r0, #4294967295
 8004b06:	b004      	add	sp, #16
 8004b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0c:	4834      	ldr	r0, [pc, #208]	; (8004be0 <_printf_i+0x244>)
 8004b0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b12:	680e      	ldr	r6, [r1, #0]
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b1a:	061f      	lsls	r7, r3, #24
 8004b1c:	600e      	str	r6, [r1, #0]
 8004b1e:	d514      	bpl.n	8004b4a <_printf_i+0x1ae>
 8004b20:	07d9      	lsls	r1, r3, #31
 8004b22:	bf44      	itt	mi
 8004b24:	f043 0320 	orrmi.w	r3, r3, #32
 8004b28:	6023      	strmi	r3, [r4, #0]
 8004b2a:	b91d      	cbnz	r5, 8004b34 <_printf_i+0x198>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	f023 0320 	bic.w	r3, r3, #32
 8004b32:	6023      	str	r3, [r4, #0]
 8004b34:	2310      	movs	r3, #16
 8004b36:	e7af      	b.n	8004a98 <_printf_i+0xfc>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	f043 0320 	orr.w	r3, r3, #32
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	2378      	movs	r3, #120	; 0x78
 8004b42:	4828      	ldr	r0, [pc, #160]	; (8004be4 <_printf_i+0x248>)
 8004b44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b48:	e7e3      	b.n	8004b12 <_printf_i+0x176>
 8004b4a:	065e      	lsls	r6, r3, #25
 8004b4c:	bf48      	it	mi
 8004b4e:	b2ad      	uxthmi	r5, r5
 8004b50:	e7e6      	b.n	8004b20 <_printf_i+0x184>
 8004b52:	4616      	mov	r6, r2
 8004b54:	e7bb      	b.n	8004ace <_printf_i+0x132>
 8004b56:	680b      	ldr	r3, [r1, #0]
 8004b58:	6826      	ldr	r6, [r4, #0]
 8004b5a:	1d1d      	adds	r5, r3, #4
 8004b5c:	6960      	ldr	r0, [r4, #20]
 8004b5e:	600d      	str	r5, [r1, #0]
 8004b60:	0635      	lsls	r5, r6, #24
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	d501      	bpl.n	8004b6a <_printf_i+0x1ce>
 8004b66:	6018      	str	r0, [r3, #0]
 8004b68:	e002      	b.n	8004b70 <_printf_i+0x1d4>
 8004b6a:	0671      	lsls	r1, r6, #25
 8004b6c:	d5fb      	bpl.n	8004b66 <_printf_i+0x1ca>
 8004b6e:	8018      	strh	r0, [r3, #0]
 8004b70:	2300      	movs	r3, #0
 8004b72:	4616      	mov	r6, r2
 8004b74:	6123      	str	r3, [r4, #16]
 8004b76:	e7ba      	b.n	8004aee <_printf_i+0x152>
 8004b78:	680b      	ldr	r3, [r1, #0]
 8004b7a:	1d1a      	adds	r2, r3, #4
 8004b7c:	600a      	str	r2, [r1, #0]
 8004b7e:	681e      	ldr	r6, [r3, #0]
 8004b80:	2100      	movs	r1, #0
 8004b82:	4630      	mov	r0, r6
 8004b84:	6862      	ldr	r2, [r4, #4]
 8004b86:	f000 fed9 	bl	800593c <memchr>
 8004b8a:	b108      	cbz	r0, 8004b90 <_printf_i+0x1f4>
 8004b8c:	1b80      	subs	r0, r0, r6
 8004b8e:	6060      	str	r0, [r4, #4]
 8004b90:	6863      	ldr	r3, [r4, #4]
 8004b92:	6123      	str	r3, [r4, #16]
 8004b94:	2300      	movs	r3, #0
 8004b96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b9a:	e7a8      	b.n	8004aee <_printf_i+0x152>
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	6923      	ldr	r3, [r4, #16]
 8004ba4:	47d0      	blx	sl
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d0ab      	beq.n	8004b02 <_printf_i+0x166>
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	079b      	lsls	r3, r3, #30
 8004bae:	d413      	bmi.n	8004bd8 <_printf_i+0x23c>
 8004bb0:	68e0      	ldr	r0, [r4, #12]
 8004bb2:	9b03      	ldr	r3, [sp, #12]
 8004bb4:	4298      	cmp	r0, r3
 8004bb6:	bfb8      	it	lt
 8004bb8:	4618      	movlt	r0, r3
 8004bba:	e7a4      	b.n	8004b06 <_printf_i+0x16a>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	4632      	mov	r2, r6
 8004bc0:	4649      	mov	r1, r9
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	47d0      	blx	sl
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	d09b      	beq.n	8004b02 <_printf_i+0x166>
 8004bca:	3501      	adds	r5, #1
 8004bcc:	68e3      	ldr	r3, [r4, #12]
 8004bce:	9903      	ldr	r1, [sp, #12]
 8004bd0:	1a5b      	subs	r3, r3, r1
 8004bd2:	42ab      	cmp	r3, r5
 8004bd4:	dcf2      	bgt.n	8004bbc <_printf_i+0x220>
 8004bd6:	e7eb      	b.n	8004bb0 <_printf_i+0x214>
 8004bd8:	2500      	movs	r5, #0
 8004bda:	f104 0619 	add.w	r6, r4, #25
 8004bde:	e7f5      	b.n	8004bcc <_printf_i+0x230>
 8004be0:	080070d6 	.word	0x080070d6
 8004be4:	080070e7 	.word	0x080070e7

08004be8 <siprintf>:
 8004be8:	b40e      	push	{r1, r2, r3}
 8004bea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bee:	b500      	push	{lr}
 8004bf0:	b09c      	sub	sp, #112	; 0x70
 8004bf2:	ab1d      	add	r3, sp, #116	; 0x74
 8004bf4:	9002      	str	r0, [sp, #8]
 8004bf6:	9006      	str	r0, [sp, #24]
 8004bf8:	9107      	str	r1, [sp, #28]
 8004bfa:	9104      	str	r1, [sp, #16]
 8004bfc:	4808      	ldr	r0, [pc, #32]	; (8004c20 <siprintf+0x38>)
 8004bfe:	4909      	ldr	r1, [pc, #36]	; (8004c24 <siprintf+0x3c>)
 8004c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c04:	9105      	str	r1, [sp, #20]
 8004c06:	6800      	ldr	r0, [r0, #0]
 8004c08:	a902      	add	r1, sp, #8
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	f001 fb44 	bl	8006298 <_svfiprintf_r>
 8004c10:	2200      	movs	r2, #0
 8004c12:	9b02      	ldr	r3, [sp, #8]
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	b01c      	add	sp, #112	; 0x70
 8004c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c1c:	b003      	add	sp, #12
 8004c1e:	4770      	bx	lr
 8004c20:	2000012c 	.word	0x2000012c
 8004c24:	ffff0208 	.word	0xffff0208

08004c28 <quorem>:
 8004c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2c:	6903      	ldr	r3, [r0, #16]
 8004c2e:	690c      	ldr	r4, [r1, #16]
 8004c30:	4607      	mov	r7, r0
 8004c32:	42a3      	cmp	r3, r4
 8004c34:	f2c0 8083 	blt.w	8004d3e <quorem+0x116>
 8004c38:	3c01      	subs	r4, #1
 8004c3a:	f100 0514 	add.w	r5, r0, #20
 8004c3e:	f101 0814 	add.w	r8, r1, #20
 8004c42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c46:	9301      	str	r3, [sp, #4]
 8004c48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c50:	3301      	adds	r3, #1
 8004c52:	429a      	cmp	r2, r3
 8004c54:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c60:	d332      	bcc.n	8004cc8 <quorem+0xa0>
 8004c62:	f04f 0e00 	mov.w	lr, #0
 8004c66:	4640      	mov	r0, r8
 8004c68:	46ac      	mov	ip, r5
 8004c6a:	46f2      	mov	sl, lr
 8004c6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c70:	b293      	uxth	r3, r2
 8004c72:	fb06 e303 	mla	r3, r6, r3, lr
 8004c76:	0c12      	lsrs	r2, r2, #16
 8004c78:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004c7c:	fb06 e202 	mla	r2, r6, r2, lr
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	ebaa 0303 	sub.w	r3, sl, r3
 8004c86:	f8dc a000 	ldr.w	sl, [ip]
 8004c8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c8e:	fa1f fa8a 	uxth.w	sl, sl
 8004c92:	4453      	add	r3, sl
 8004c94:	fa1f fa82 	uxth.w	sl, r2
 8004c98:	f8dc 2000 	ldr.w	r2, [ip]
 8004c9c:	4581      	cmp	r9, r0
 8004c9e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004ca2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004cb0:	f84c 3b04 	str.w	r3, [ip], #4
 8004cb4:	d2da      	bcs.n	8004c6c <quorem+0x44>
 8004cb6:	f855 300b 	ldr.w	r3, [r5, fp]
 8004cba:	b92b      	cbnz	r3, 8004cc8 <quorem+0xa0>
 8004cbc:	9b01      	ldr	r3, [sp, #4]
 8004cbe:	3b04      	subs	r3, #4
 8004cc0:	429d      	cmp	r5, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	d32f      	bcc.n	8004d26 <quorem+0xfe>
 8004cc6:	613c      	str	r4, [r7, #16]
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f001 f8cd 	bl	8005e68 <__mcmp>
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	db25      	blt.n	8004d1e <quorem+0xf6>
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f04f 0c00 	mov.w	ip, #0
 8004cd8:	3601      	adds	r6, #1
 8004cda:	f858 1b04 	ldr.w	r1, [r8], #4
 8004cde:	f8d0 e000 	ldr.w	lr, [r0]
 8004ce2:	b28b      	uxth	r3, r1
 8004ce4:	ebac 0303 	sub.w	r3, ip, r3
 8004ce8:	fa1f f28e 	uxth.w	r2, lr
 8004cec:	4413      	add	r3, r2
 8004cee:	0c0a      	lsrs	r2, r1, #16
 8004cf0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004cf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cfe:	45c1      	cmp	r9, r8
 8004d00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d04:	f840 3b04 	str.w	r3, [r0], #4
 8004d08:	d2e7      	bcs.n	8004cda <quorem+0xb2>
 8004d0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d12:	b922      	cbnz	r2, 8004d1e <quorem+0xf6>
 8004d14:	3b04      	subs	r3, #4
 8004d16:	429d      	cmp	r5, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	d30a      	bcc.n	8004d32 <quorem+0x10a>
 8004d1c:	613c      	str	r4, [r7, #16]
 8004d1e:	4630      	mov	r0, r6
 8004d20:	b003      	add	sp, #12
 8004d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	3b04      	subs	r3, #4
 8004d2a:	2a00      	cmp	r2, #0
 8004d2c:	d1cb      	bne.n	8004cc6 <quorem+0x9e>
 8004d2e:	3c01      	subs	r4, #1
 8004d30:	e7c6      	b.n	8004cc0 <quorem+0x98>
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	3b04      	subs	r3, #4
 8004d36:	2a00      	cmp	r2, #0
 8004d38:	d1f0      	bne.n	8004d1c <quorem+0xf4>
 8004d3a:	3c01      	subs	r4, #1
 8004d3c:	e7eb      	b.n	8004d16 <quorem+0xee>
 8004d3e:	2000      	movs	r0, #0
 8004d40:	e7ee      	b.n	8004d20 <quorem+0xf8>
 8004d42:	0000      	movs	r0, r0
 8004d44:	0000      	movs	r0, r0
	...

08004d48 <_dtoa_r>:
 8004d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4c:	4616      	mov	r6, r2
 8004d4e:	461f      	mov	r7, r3
 8004d50:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004d52:	b099      	sub	sp, #100	; 0x64
 8004d54:	4605      	mov	r5, r0
 8004d56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d5a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004d5e:	b974      	cbnz	r4, 8004d7e <_dtoa_r+0x36>
 8004d60:	2010      	movs	r0, #16
 8004d62:	f000 fde3 	bl	800592c <malloc>
 8004d66:	4602      	mov	r2, r0
 8004d68:	6268      	str	r0, [r5, #36]	; 0x24
 8004d6a:	b920      	cbnz	r0, 8004d76 <_dtoa_r+0x2e>
 8004d6c:	21ea      	movs	r1, #234	; 0xea
 8004d6e:	4bae      	ldr	r3, [pc, #696]	; (8005028 <_dtoa_r+0x2e0>)
 8004d70:	48ae      	ldr	r0, [pc, #696]	; (800502c <_dtoa_r+0x2e4>)
 8004d72:	f001 fba1 	bl	80064b8 <__assert_func>
 8004d76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d7a:	6004      	str	r4, [r0, #0]
 8004d7c:	60c4      	str	r4, [r0, #12]
 8004d7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d80:	6819      	ldr	r1, [r3, #0]
 8004d82:	b151      	cbz	r1, 8004d9a <_dtoa_r+0x52>
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	2301      	movs	r3, #1
 8004d88:	4093      	lsls	r3, r2
 8004d8a:	604a      	str	r2, [r1, #4]
 8004d8c:	608b      	str	r3, [r1, #8]
 8004d8e:	4628      	mov	r0, r5
 8004d90:	f000 fe30 	bl	80059f4 <_Bfree>
 8004d94:	2200      	movs	r2, #0
 8004d96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	1e3b      	subs	r3, r7, #0
 8004d9c:	bfaf      	iteee	ge
 8004d9e:	2300      	movge	r3, #0
 8004da0:	2201      	movlt	r2, #1
 8004da2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004da6:	9305      	strlt	r3, [sp, #20]
 8004da8:	bfa8      	it	ge
 8004daa:	f8c8 3000 	strge.w	r3, [r8]
 8004dae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004db2:	4b9f      	ldr	r3, [pc, #636]	; (8005030 <_dtoa_r+0x2e8>)
 8004db4:	bfb8      	it	lt
 8004db6:	f8c8 2000 	strlt.w	r2, [r8]
 8004dba:	ea33 0309 	bics.w	r3, r3, r9
 8004dbe:	d119      	bne.n	8004df4 <_dtoa_r+0xac>
 8004dc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004dc4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004dcc:	4333      	orrs	r3, r6
 8004dce:	f000 8580 	beq.w	80058d2 <_dtoa_r+0xb8a>
 8004dd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004dd4:	b953      	cbnz	r3, 8004dec <_dtoa_r+0xa4>
 8004dd6:	4b97      	ldr	r3, [pc, #604]	; (8005034 <_dtoa_r+0x2ec>)
 8004dd8:	e022      	b.n	8004e20 <_dtoa_r+0xd8>
 8004dda:	4b97      	ldr	r3, [pc, #604]	; (8005038 <_dtoa_r+0x2f0>)
 8004ddc:	9308      	str	r3, [sp, #32]
 8004dde:	3308      	adds	r3, #8
 8004de0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	9808      	ldr	r0, [sp, #32]
 8004de6:	b019      	add	sp, #100	; 0x64
 8004de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dec:	4b91      	ldr	r3, [pc, #580]	; (8005034 <_dtoa_r+0x2ec>)
 8004dee:	9308      	str	r3, [sp, #32]
 8004df0:	3303      	adds	r3, #3
 8004df2:	e7f5      	b.n	8004de0 <_dtoa_r+0x98>
 8004df4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004df8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004dfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e00:	2200      	movs	r2, #0
 8004e02:	2300      	movs	r3, #0
 8004e04:	f7fb fdd0 	bl	80009a8 <__aeabi_dcmpeq>
 8004e08:	4680      	mov	r8, r0
 8004e0a:	b158      	cbz	r0, 8004e24 <_dtoa_r+0xdc>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8559 	beq.w	80058cc <_dtoa_r+0xb84>
 8004e1a:	4888      	ldr	r0, [pc, #544]	; (800503c <_dtoa_r+0x2f4>)
 8004e1c:	6018      	str	r0, [r3, #0]
 8004e1e:	1e43      	subs	r3, r0, #1
 8004e20:	9308      	str	r3, [sp, #32]
 8004e22:	e7df      	b.n	8004de4 <_dtoa_r+0x9c>
 8004e24:	ab16      	add	r3, sp, #88	; 0x58
 8004e26:	9301      	str	r3, [sp, #4]
 8004e28:	ab17      	add	r3, sp, #92	; 0x5c
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e32:	f001 f8c5 	bl	8005fc0 <__d2b>
 8004e36:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e3a:	4682      	mov	sl, r0
 8004e3c:	2c00      	cmp	r4, #0
 8004e3e:	d07e      	beq.n	8004f3e <_dtoa_r+0x1f6>
 8004e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e46:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e4e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004e52:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004e56:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	4b78      	ldr	r3, [pc, #480]	; (8005040 <_dtoa_r+0x2f8>)
 8004e5e:	f7fb f983 	bl	8000168 <__aeabi_dsub>
 8004e62:	a36b      	add	r3, pc, #428	; (adr r3, 8005010 <_dtoa_r+0x2c8>)
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f7fb fb36 	bl	80004d8 <__aeabi_dmul>
 8004e6c:	a36a      	add	r3, pc, #424	; (adr r3, 8005018 <_dtoa_r+0x2d0>)
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f7fb f97b 	bl	800016c <__adddf3>
 8004e76:	4606      	mov	r6, r0
 8004e78:	4620      	mov	r0, r4
 8004e7a:	460f      	mov	r7, r1
 8004e7c:	f7fb fac2 	bl	8000404 <__aeabi_i2d>
 8004e80:	a367      	add	r3, pc, #412	; (adr r3, 8005020 <_dtoa_r+0x2d8>)
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	f7fb fb27 	bl	80004d8 <__aeabi_dmul>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4630      	mov	r0, r6
 8004e90:	4639      	mov	r1, r7
 8004e92:	f7fb f96b 	bl	800016c <__adddf3>
 8004e96:	4606      	mov	r6, r0
 8004e98:	460f      	mov	r7, r1
 8004e9a:	f7fb fdcd 	bl	8000a38 <__aeabi_d2iz>
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	4681      	mov	r9, r0
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	4639      	mov	r1, r7
 8004ea8:	f7fb fd88 	bl	80009bc <__aeabi_dcmplt>
 8004eac:	b148      	cbz	r0, 8004ec2 <_dtoa_r+0x17a>
 8004eae:	4648      	mov	r0, r9
 8004eb0:	f7fb faa8 	bl	8000404 <__aeabi_i2d>
 8004eb4:	4632      	mov	r2, r6
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	f7fb fd76 	bl	80009a8 <__aeabi_dcmpeq>
 8004ebc:	b908      	cbnz	r0, 8004ec2 <_dtoa_r+0x17a>
 8004ebe:	f109 39ff 	add.w	r9, r9, #4294967295
 8004ec2:	f1b9 0f16 	cmp.w	r9, #22
 8004ec6:	d857      	bhi.n	8004f78 <_dtoa_r+0x230>
 8004ec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ecc:	4b5d      	ldr	r3, [pc, #372]	; (8005044 <_dtoa_r+0x2fc>)
 8004ece:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	f7fb fd71 	bl	80009bc <__aeabi_dcmplt>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d04e      	beq.n	8004f7c <_dtoa_r+0x234>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f109 39ff 	add.w	r9, r9, #4294967295
 8004ee4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ee6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004ee8:	1b1c      	subs	r4, r3, r4
 8004eea:	1e63      	subs	r3, r4, #1
 8004eec:	9309      	str	r3, [sp, #36]	; 0x24
 8004eee:	bf49      	itett	mi
 8004ef0:	f1c4 0301 	rsbmi	r3, r4, #1
 8004ef4:	2300      	movpl	r3, #0
 8004ef6:	9306      	strmi	r3, [sp, #24]
 8004ef8:	2300      	movmi	r3, #0
 8004efa:	bf54      	ite	pl
 8004efc:	9306      	strpl	r3, [sp, #24]
 8004efe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004f00:	f1b9 0f00 	cmp.w	r9, #0
 8004f04:	db3c      	blt.n	8004f80 <_dtoa_r+0x238>
 8004f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f08:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004f0c:	444b      	add	r3, r9
 8004f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f10:	2300      	movs	r3, #0
 8004f12:	930a      	str	r3, [sp, #40]	; 0x28
 8004f14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f16:	2b09      	cmp	r3, #9
 8004f18:	d86c      	bhi.n	8004ff4 <_dtoa_r+0x2ac>
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	bfc4      	itt	gt
 8004f1e:	3b04      	subgt	r3, #4
 8004f20:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004f22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f24:	bfc8      	it	gt
 8004f26:	2400      	movgt	r4, #0
 8004f28:	f1a3 0302 	sub.w	r3, r3, #2
 8004f2c:	bfd8      	it	le
 8004f2e:	2401      	movle	r4, #1
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	f200 808b 	bhi.w	800504c <_dtoa_r+0x304>
 8004f36:	e8df f003 	tbb	[pc, r3]
 8004f3a:	4f2d      	.short	0x4f2d
 8004f3c:	5b4d      	.short	0x5b4d
 8004f3e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004f42:	441c      	add	r4, r3
 8004f44:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	bfc3      	ittte	gt
 8004f4c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f50:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004f54:	fa09 f303 	lslgt.w	r3, r9, r3
 8004f58:	f1c3 0320 	rsble	r3, r3, #32
 8004f5c:	bfc6      	itte	gt
 8004f5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004f62:	4318      	orrgt	r0, r3
 8004f64:	fa06 f003 	lslle.w	r0, r6, r3
 8004f68:	f7fb fa3c 	bl	80003e4 <__aeabi_ui2d>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004f72:	3c01      	subs	r4, #1
 8004f74:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f76:	e770      	b.n	8004e5a <_dtoa_r+0x112>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e7b3      	b.n	8004ee4 <_dtoa_r+0x19c>
 8004f7c:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f7e:	e7b2      	b.n	8004ee6 <_dtoa_r+0x19e>
 8004f80:	9b06      	ldr	r3, [sp, #24]
 8004f82:	eba3 0309 	sub.w	r3, r3, r9
 8004f86:	9306      	str	r3, [sp, #24]
 8004f88:	f1c9 0300 	rsb	r3, r9, #0
 8004f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8004f8e:	2300      	movs	r3, #0
 8004f90:	930e      	str	r3, [sp, #56]	; 0x38
 8004f92:	e7bf      	b.n	8004f14 <_dtoa_r+0x1cc>
 8004f94:	2300      	movs	r3, #0
 8004f96:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	dc59      	bgt.n	8005052 <_dtoa_r+0x30a>
 8004f9e:	f04f 0b01 	mov.w	fp, #1
 8004fa2:	465b      	mov	r3, fp
 8004fa4:	f8cd b008 	str.w	fp, [sp, #8]
 8004fa8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004fac:	2200      	movs	r2, #0
 8004fae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004fb0:	6042      	str	r2, [r0, #4]
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	f102 0614 	add.w	r6, r2, #20
 8004fb8:	429e      	cmp	r6, r3
 8004fba:	6841      	ldr	r1, [r0, #4]
 8004fbc:	d94f      	bls.n	800505e <_dtoa_r+0x316>
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f000 fcd8 	bl	8005974 <_Balloc>
 8004fc4:	9008      	str	r0, [sp, #32]
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d14d      	bne.n	8005066 <_dtoa_r+0x31e>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004fd0:	4b1d      	ldr	r3, [pc, #116]	; (8005048 <_dtoa_r+0x300>)
 8004fd2:	e6cd      	b.n	8004d70 <_dtoa_r+0x28>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e7de      	b.n	8004f96 <_dtoa_r+0x24e>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fde:	eb09 0b03 	add.w	fp, r9, r3
 8004fe2:	f10b 0301 	add.w	r3, fp, #1
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	9302      	str	r3, [sp, #8]
 8004fea:	bfb8      	it	lt
 8004fec:	2301      	movlt	r3, #1
 8004fee:	e7dd      	b.n	8004fac <_dtoa_r+0x264>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e7f2      	b.n	8004fda <_dtoa_r+0x292>
 8004ff4:	2401      	movs	r4, #1
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	940b      	str	r4, [sp, #44]	; 0x2c
 8004ffa:	9322      	str	r3, [sp, #136]	; 0x88
 8004ffc:	f04f 3bff 	mov.w	fp, #4294967295
 8005000:	2200      	movs	r2, #0
 8005002:	2312      	movs	r3, #18
 8005004:	f8cd b008 	str.w	fp, [sp, #8]
 8005008:	9223      	str	r2, [sp, #140]	; 0x8c
 800500a:	e7cf      	b.n	8004fac <_dtoa_r+0x264>
 800500c:	f3af 8000 	nop.w
 8005010:	636f4361 	.word	0x636f4361
 8005014:	3fd287a7 	.word	0x3fd287a7
 8005018:	8b60c8b3 	.word	0x8b60c8b3
 800501c:	3fc68a28 	.word	0x3fc68a28
 8005020:	509f79fb 	.word	0x509f79fb
 8005024:	3fd34413 	.word	0x3fd34413
 8005028:	08007105 	.word	0x08007105
 800502c:	0800711c 	.word	0x0800711c
 8005030:	7ff00000 	.word	0x7ff00000
 8005034:	08007101 	.word	0x08007101
 8005038:	080070f8 	.word	0x080070f8
 800503c:	080070d5 	.word	0x080070d5
 8005040:	3ff80000 	.word	0x3ff80000
 8005044:	08007218 	.word	0x08007218
 8005048:	0800717b 	.word	0x0800717b
 800504c:	2301      	movs	r3, #1
 800504e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005050:	e7d4      	b.n	8004ffc <_dtoa_r+0x2b4>
 8005052:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005056:	465b      	mov	r3, fp
 8005058:	f8cd b008 	str.w	fp, [sp, #8]
 800505c:	e7a6      	b.n	8004fac <_dtoa_r+0x264>
 800505e:	3101      	adds	r1, #1
 8005060:	6041      	str	r1, [r0, #4]
 8005062:	0052      	lsls	r2, r2, #1
 8005064:	e7a6      	b.n	8004fb4 <_dtoa_r+0x26c>
 8005066:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005068:	9a08      	ldr	r2, [sp, #32]
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	9b02      	ldr	r3, [sp, #8]
 800506e:	2b0e      	cmp	r3, #14
 8005070:	f200 80a8 	bhi.w	80051c4 <_dtoa_r+0x47c>
 8005074:	2c00      	cmp	r4, #0
 8005076:	f000 80a5 	beq.w	80051c4 <_dtoa_r+0x47c>
 800507a:	f1b9 0f00 	cmp.w	r9, #0
 800507e:	dd34      	ble.n	80050ea <_dtoa_r+0x3a2>
 8005080:	4a9a      	ldr	r2, [pc, #616]	; (80052ec <_dtoa_r+0x5a4>)
 8005082:	f009 030f 	and.w	r3, r9, #15
 8005086:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800508a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800508e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005092:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005096:	ea4f 1429 	mov.w	r4, r9, asr #4
 800509a:	d016      	beq.n	80050ca <_dtoa_r+0x382>
 800509c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050a0:	4b93      	ldr	r3, [pc, #588]	; (80052f0 <_dtoa_r+0x5a8>)
 80050a2:	2703      	movs	r7, #3
 80050a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050a8:	f7fb fb40 	bl	800072c <__aeabi_ddiv>
 80050ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050b0:	f004 040f 	and.w	r4, r4, #15
 80050b4:	4e8e      	ldr	r6, [pc, #568]	; (80052f0 <_dtoa_r+0x5a8>)
 80050b6:	b954      	cbnz	r4, 80050ce <_dtoa_r+0x386>
 80050b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050c0:	f7fb fb34 	bl	800072c <__aeabi_ddiv>
 80050c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050c8:	e029      	b.n	800511e <_dtoa_r+0x3d6>
 80050ca:	2702      	movs	r7, #2
 80050cc:	e7f2      	b.n	80050b4 <_dtoa_r+0x36c>
 80050ce:	07e1      	lsls	r1, r4, #31
 80050d0:	d508      	bpl.n	80050e4 <_dtoa_r+0x39c>
 80050d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050da:	f7fb f9fd 	bl	80004d8 <__aeabi_dmul>
 80050de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050e2:	3701      	adds	r7, #1
 80050e4:	1064      	asrs	r4, r4, #1
 80050e6:	3608      	adds	r6, #8
 80050e8:	e7e5      	b.n	80050b6 <_dtoa_r+0x36e>
 80050ea:	f000 80a5 	beq.w	8005238 <_dtoa_r+0x4f0>
 80050ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050f2:	f1c9 0400 	rsb	r4, r9, #0
 80050f6:	4b7d      	ldr	r3, [pc, #500]	; (80052ec <_dtoa_r+0x5a4>)
 80050f8:	f004 020f 	and.w	r2, r4, #15
 80050fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	f7fb f9e8 	bl	80004d8 <__aeabi_dmul>
 8005108:	2702      	movs	r7, #2
 800510a:	2300      	movs	r3, #0
 800510c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005110:	4e77      	ldr	r6, [pc, #476]	; (80052f0 <_dtoa_r+0x5a8>)
 8005112:	1124      	asrs	r4, r4, #4
 8005114:	2c00      	cmp	r4, #0
 8005116:	f040 8084 	bne.w	8005222 <_dtoa_r+0x4da>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1d2      	bne.n	80050c4 <_dtoa_r+0x37c>
 800511e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 808b 	beq.w	800523c <_dtoa_r+0x4f4>
 8005126:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800512a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800512e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005132:	2200      	movs	r2, #0
 8005134:	4b6f      	ldr	r3, [pc, #444]	; (80052f4 <_dtoa_r+0x5ac>)
 8005136:	f7fb fc41 	bl	80009bc <__aeabi_dcmplt>
 800513a:	2800      	cmp	r0, #0
 800513c:	d07e      	beq.n	800523c <_dtoa_r+0x4f4>
 800513e:	9b02      	ldr	r3, [sp, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d07b      	beq.n	800523c <_dtoa_r+0x4f4>
 8005144:	f1bb 0f00 	cmp.w	fp, #0
 8005148:	dd38      	ble.n	80051bc <_dtoa_r+0x474>
 800514a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800514e:	2200      	movs	r2, #0
 8005150:	4b69      	ldr	r3, [pc, #420]	; (80052f8 <_dtoa_r+0x5b0>)
 8005152:	f7fb f9c1 	bl	80004d8 <__aeabi_dmul>
 8005156:	465c      	mov	r4, fp
 8005158:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800515c:	f109 38ff 	add.w	r8, r9, #4294967295
 8005160:	3701      	adds	r7, #1
 8005162:	4638      	mov	r0, r7
 8005164:	f7fb f94e 	bl	8000404 <__aeabi_i2d>
 8005168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800516c:	f7fb f9b4 	bl	80004d8 <__aeabi_dmul>
 8005170:	2200      	movs	r2, #0
 8005172:	4b62      	ldr	r3, [pc, #392]	; (80052fc <_dtoa_r+0x5b4>)
 8005174:	f7fa fffa 	bl	800016c <__adddf3>
 8005178:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800517c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005180:	9611      	str	r6, [sp, #68]	; 0x44
 8005182:	2c00      	cmp	r4, #0
 8005184:	d15d      	bne.n	8005242 <_dtoa_r+0x4fa>
 8005186:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800518a:	2200      	movs	r2, #0
 800518c:	4b5c      	ldr	r3, [pc, #368]	; (8005300 <_dtoa_r+0x5b8>)
 800518e:	f7fa ffeb 	bl	8000168 <__aeabi_dsub>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800519a:	4633      	mov	r3, r6
 800519c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800519e:	f7fb fc2b 	bl	80009f8 <__aeabi_dcmpgt>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	f040 829e 	bne.w	80056e4 <_dtoa_r+0x99c>
 80051a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80051b2:	f7fb fc03 	bl	80009bc <__aeabi_dcmplt>
 80051b6:	2800      	cmp	r0, #0
 80051b8:	f040 8292 	bne.w	80056e0 <_dtoa_r+0x998>
 80051bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80051c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80051c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f2c0 8153 	blt.w	8005472 <_dtoa_r+0x72a>
 80051cc:	f1b9 0f0e 	cmp.w	r9, #14
 80051d0:	f300 814f 	bgt.w	8005472 <_dtoa_r+0x72a>
 80051d4:	4b45      	ldr	r3, [pc, #276]	; (80052ec <_dtoa_r+0x5a4>)
 80051d6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80051da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80051e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f280 80db 	bge.w	80053a0 <_dtoa_r+0x658>
 80051ea:	9b02      	ldr	r3, [sp, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f300 80d7 	bgt.w	80053a0 <_dtoa_r+0x658>
 80051f2:	f040 8274 	bne.w	80056de <_dtoa_r+0x996>
 80051f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051fa:	2200      	movs	r2, #0
 80051fc:	4b40      	ldr	r3, [pc, #256]	; (8005300 <_dtoa_r+0x5b8>)
 80051fe:	f7fb f96b 	bl	80004d8 <__aeabi_dmul>
 8005202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005206:	f7fb fbed 	bl	80009e4 <__aeabi_dcmpge>
 800520a:	9c02      	ldr	r4, [sp, #8]
 800520c:	4626      	mov	r6, r4
 800520e:	2800      	cmp	r0, #0
 8005210:	f040 824a 	bne.w	80056a8 <_dtoa_r+0x960>
 8005214:	2331      	movs	r3, #49	; 0x31
 8005216:	9f08      	ldr	r7, [sp, #32]
 8005218:	f109 0901 	add.w	r9, r9, #1
 800521c:	f807 3b01 	strb.w	r3, [r7], #1
 8005220:	e246      	b.n	80056b0 <_dtoa_r+0x968>
 8005222:	07e2      	lsls	r2, r4, #31
 8005224:	d505      	bpl.n	8005232 <_dtoa_r+0x4ea>
 8005226:	e9d6 2300 	ldrd	r2, r3, [r6]
 800522a:	f7fb f955 	bl	80004d8 <__aeabi_dmul>
 800522e:	2301      	movs	r3, #1
 8005230:	3701      	adds	r7, #1
 8005232:	1064      	asrs	r4, r4, #1
 8005234:	3608      	adds	r6, #8
 8005236:	e76d      	b.n	8005114 <_dtoa_r+0x3cc>
 8005238:	2702      	movs	r7, #2
 800523a:	e770      	b.n	800511e <_dtoa_r+0x3d6>
 800523c:	46c8      	mov	r8, r9
 800523e:	9c02      	ldr	r4, [sp, #8]
 8005240:	e78f      	b.n	8005162 <_dtoa_r+0x41a>
 8005242:	9908      	ldr	r1, [sp, #32]
 8005244:	4b29      	ldr	r3, [pc, #164]	; (80052ec <_dtoa_r+0x5a4>)
 8005246:	4421      	add	r1, r4
 8005248:	9112      	str	r1, [sp, #72]	; 0x48
 800524a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800524c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005250:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005254:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005258:	2900      	cmp	r1, #0
 800525a:	d055      	beq.n	8005308 <_dtoa_r+0x5c0>
 800525c:	2000      	movs	r0, #0
 800525e:	4929      	ldr	r1, [pc, #164]	; (8005304 <_dtoa_r+0x5bc>)
 8005260:	f7fb fa64 	bl	800072c <__aeabi_ddiv>
 8005264:	463b      	mov	r3, r7
 8005266:	4632      	mov	r2, r6
 8005268:	f7fa ff7e 	bl	8000168 <__aeabi_dsub>
 800526c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005270:	9f08      	ldr	r7, [sp, #32]
 8005272:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005276:	f7fb fbdf 	bl	8000a38 <__aeabi_d2iz>
 800527a:	4604      	mov	r4, r0
 800527c:	f7fb f8c2 	bl	8000404 <__aeabi_i2d>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005288:	f7fa ff6e 	bl	8000168 <__aeabi_dsub>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	3430      	adds	r4, #48	; 0x30
 8005292:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005296:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800529a:	f807 4b01 	strb.w	r4, [r7], #1
 800529e:	f7fb fb8d 	bl	80009bc <__aeabi_dcmplt>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d174      	bne.n	8005390 <_dtoa_r+0x648>
 80052a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052aa:	2000      	movs	r0, #0
 80052ac:	4911      	ldr	r1, [pc, #68]	; (80052f4 <_dtoa_r+0x5ac>)
 80052ae:	f7fa ff5b 	bl	8000168 <__aeabi_dsub>
 80052b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052b6:	f7fb fb81 	bl	80009bc <__aeabi_dcmplt>
 80052ba:	2800      	cmp	r0, #0
 80052bc:	f040 80b6 	bne.w	800542c <_dtoa_r+0x6e4>
 80052c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052c2:	429f      	cmp	r7, r3
 80052c4:	f43f af7a 	beq.w	80051bc <_dtoa_r+0x474>
 80052c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052cc:	2200      	movs	r2, #0
 80052ce:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <_dtoa_r+0x5b0>)
 80052d0:	f7fb f902 	bl	80004d8 <__aeabi_dmul>
 80052d4:	2200      	movs	r2, #0
 80052d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <_dtoa_r+0x5b0>)
 80052e0:	f7fb f8fa 	bl	80004d8 <__aeabi_dmul>
 80052e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052e8:	e7c3      	b.n	8005272 <_dtoa_r+0x52a>
 80052ea:	bf00      	nop
 80052ec:	08007218 	.word	0x08007218
 80052f0:	080071f0 	.word	0x080071f0
 80052f4:	3ff00000 	.word	0x3ff00000
 80052f8:	40240000 	.word	0x40240000
 80052fc:	401c0000 	.word	0x401c0000
 8005300:	40140000 	.word	0x40140000
 8005304:	3fe00000 	.word	0x3fe00000
 8005308:	4630      	mov	r0, r6
 800530a:	4639      	mov	r1, r7
 800530c:	f7fb f8e4 	bl	80004d8 <__aeabi_dmul>
 8005310:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005312:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005316:	9c08      	ldr	r4, [sp, #32]
 8005318:	9314      	str	r3, [sp, #80]	; 0x50
 800531a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800531e:	f7fb fb8b 	bl	8000a38 <__aeabi_d2iz>
 8005322:	9015      	str	r0, [sp, #84]	; 0x54
 8005324:	f7fb f86e 	bl	8000404 <__aeabi_i2d>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005330:	f7fa ff1a 	bl	8000168 <__aeabi_dsub>
 8005334:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005336:	4606      	mov	r6, r0
 8005338:	3330      	adds	r3, #48	; 0x30
 800533a:	f804 3b01 	strb.w	r3, [r4], #1
 800533e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005340:	460f      	mov	r7, r1
 8005342:	429c      	cmp	r4, r3
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	d124      	bne.n	8005394 <_dtoa_r+0x64c>
 800534a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800534e:	4bb3      	ldr	r3, [pc, #716]	; (800561c <_dtoa_r+0x8d4>)
 8005350:	f7fa ff0c 	bl	800016c <__adddf3>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4630      	mov	r0, r6
 800535a:	4639      	mov	r1, r7
 800535c:	f7fb fb4c 	bl	80009f8 <__aeabi_dcmpgt>
 8005360:	2800      	cmp	r0, #0
 8005362:	d162      	bne.n	800542a <_dtoa_r+0x6e2>
 8005364:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005368:	2000      	movs	r0, #0
 800536a:	49ac      	ldr	r1, [pc, #688]	; (800561c <_dtoa_r+0x8d4>)
 800536c:	f7fa fefc 	bl	8000168 <__aeabi_dsub>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4630      	mov	r0, r6
 8005376:	4639      	mov	r1, r7
 8005378:	f7fb fb20 	bl	80009bc <__aeabi_dcmplt>
 800537c:	2800      	cmp	r0, #0
 800537e:	f43f af1d 	beq.w	80051bc <_dtoa_r+0x474>
 8005382:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005384:	1e7b      	subs	r3, r7, #1
 8005386:	9314      	str	r3, [sp, #80]	; 0x50
 8005388:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800538c:	2b30      	cmp	r3, #48	; 0x30
 800538e:	d0f8      	beq.n	8005382 <_dtoa_r+0x63a>
 8005390:	46c1      	mov	r9, r8
 8005392:	e03a      	b.n	800540a <_dtoa_r+0x6c2>
 8005394:	4ba2      	ldr	r3, [pc, #648]	; (8005620 <_dtoa_r+0x8d8>)
 8005396:	f7fb f89f 	bl	80004d8 <__aeabi_dmul>
 800539a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800539e:	e7bc      	b.n	800531a <_dtoa_r+0x5d2>
 80053a0:	9f08      	ldr	r7, [sp, #32]
 80053a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053aa:	f7fb f9bf 	bl	800072c <__aeabi_ddiv>
 80053ae:	f7fb fb43 	bl	8000a38 <__aeabi_d2iz>
 80053b2:	4604      	mov	r4, r0
 80053b4:	f7fb f826 	bl	8000404 <__aeabi_i2d>
 80053b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053bc:	f7fb f88c 	bl	80004d8 <__aeabi_dmul>
 80053c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80053c4:	460b      	mov	r3, r1
 80053c6:	4602      	mov	r2, r0
 80053c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053cc:	f7fa fecc 	bl	8000168 <__aeabi_dsub>
 80053d0:	f807 6b01 	strb.w	r6, [r7], #1
 80053d4:	9e08      	ldr	r6, [sp, #32]
 80053d6:	9b02      	ldr	r3, [sp, #8]
 80053d8:	1bbe      	subs	r6, r7, r6
 80053da:	42b3      	cmp	r3, r6
 80053dc:	d13a      	bne.n	8005454 <_dtoa_r+0x70c>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	f7fa fec3 	bl	800016c <__adddf3>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053f2:	f7fb fb01 	bl	80009f8 <__aeabi_dcmpgt>
 80053f6:	bb58      	cbnz	r0, 8005450 <_dtoa_r+0x708>
 80053f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005400:	f7fb fad2 	bl	80009a8 <__aeabi_dcmpeq>
 8005404:	b108      	cbz	r0, 800540a <_dtoa_r+0x6c2>
 8005406:	07e1      	lsls	r1, r4, #31
 8005408:	d422      	bmi.n	8005450 <_dtoa_r+0x708>
 800540a:	4628      	mov	r0, r5
 800540c:	4651      	mov	r1, sl
 800540e:	f000 faf1 	bl	80059f4 <_Bfree>
 8005412:	2300      	movs	r3, #0
 8005414:	703b      	strb	r3, [r7, #0]
 8005416:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005418:	f109 0001 	add.w	r0, r9, #1
 800541c:	6018      	str	r0, [r3, #0]
 800541e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005420:	2b00      	cmp	r3, #0
 8005422:	f43f acdf 	beq.w	8004de4 <_dtoa_r+0x9c>
 8005426:	601f      	str	r7, [r3, #0]
 8005428:	e4dc      	b.n	8004de4 <_dtoa_r+0x9c>
 800542a:	4627      	mov	r7, r4
 800542c:	463b      	mov	r3, r7
 800542e:	461f      	mov	r7, r3
 8005430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005434:	2a39      	cmp	r2, #57	; 0x39
 8005436:	d107      	bne.n	8005448 <_dtoa_r+0x700>
 8005438:	9a08      	ldr	r2, [sp, #32]
 800543a:	429a      	cmp	r2, r3
 800543c:	d1f7      	bne.n	800542e <_dtoa_r+0x6e6>
 800543e:	2230      	movs	r2, #48	; 0x30
 8005440:	9908      	ldr	r1, [sp, #32]
 8005442:	f108 0801 	add.w	r8, r8, #1
 8005446:	700a      	strb	r2, [r1, #0]
 8005448:	781a      	ldrb	r2, [r3, #0]
 800544a:	3201      	adds	r2, #1
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	e79f      	b.n	8005390 <_dtoa_r+0x648>
 8005450:	46c8      	mov	r8, r9
 8005452:	e7eb      	b.n	800542c <_dtoa_r+0x6e4>
 8005454:	2200      	movs	r2, #0
 8005456:	4b72      	ldr	r3, [pc, #456]	; (8005620 <_dtoa_r+0x8d8>)
 8005458:	f7fb f83e 	bl	80004d8 <__aeabi_dmul>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005464:	2200      	movs	r2, #0
 8005466:	2300      	movs	r3, #0
 8005468:	f7fb fa9e 	bl	80009a8 <__aeabi_dcmpeq>
 800546c:	2800      	cmp	r0, #0
 800546e:	d098      	beq.n	80053a2 <_dtoa_r+0x65a>
 8005470:	e7cb      	b.n	800540a <_dtoa_r+0x6c2>
 8005472:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005474:	2a00      	cmp	r2, #0
 8005476:	f000 80cd 	beq.w	8005614 <_dtoa_r+0x8cc>
 800547a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800547c:	2a01      	cmp	r2, #1
 800547e:	f300 80af 	bgt.w	80055e0 <_dtoa_r+0x898>
 8005482:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005484:	2a00      	cmp	r2, #0
 8005486:	f000 80a7 	beq.w	80055d8 <_dtoa_r+0x890>
 800548a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800548e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005490:	9f06      	ldr	r7, [sp, #24]
 8005492:	9a06      	ldr	r2, [sp, #24]
 8005494:	2101      	movs	r1, #1
 8005496:	441a      	add	r2, r3
 8005498:	9206      	str	r2, [sp, #24]
 800549a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800549c:	4628      	mov	r0, r5
 800549e:	441a      	add	r2, r3
 80054a0:	9209      	str	r2, [sp, #36]	; 0x24
 80054a2:	f000 fb61 	bl	8005b68 <__i2b>
 80054a6:	4606      	mov	r6, r0
 80054a8:	2f00      	cmp	r7, #0
 80054aa:	dd0c      	ble.n	80054c6 <_dtoa_r+0x77e>
 80054ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	dd09      	ble.n	80054c6 <_dtoa_r+0x77e>
 80054b2:	42bb      	cmp	r3, r7
 80054b4:	bfa8      	it	ge
 80054b6:	463b      	movge	r3, r7
 80054b8:	9a06      	ldr	r2, [sp, #24]
 80054ba:	1aff      	subs	r7, r7, r3
 80054bc:	1ad2      	subs	r2, r2, r3
 80054be:	9206      	str	r2, [sp, #24]
 80054c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	9309      	str	r3, [sp, #36]	; 0x24
 80054c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c8:	b1f3      	cbz	r3, 8005508 <_dtoa_r+0x7c0>
 80054ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80a9 	beq.w	8005624 <_dtoa_r+0x8dc>
 80054d2:	2c00      	cmp	r4, #0
 80054d4:	dd10      	ble.n	80054f8 <_dtoa_r+0x7b0>
 80054d6:	4631      	mov	r1, r6
 80054d8:	4622      	mov	r2, r4
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 fbfe 	bl	8005cdc <__pow5mult>
 80054e0:	4652      	mov	r2, sl
 80054e2:	4601      	mov	r1, r0
 80054e4:	4606      	mov	r6, r0
 80054e6:	4628      	mov	r0, r5
 80054e8:	f000 fb54 	bl	8005b94 <__multiply>
 80054ec:	4680      	mov	r8, r0
 80054ee:	4651      	mov	r1, sl
 80054f0:	4628      	mov	r0, r5
 80054f2:	f000 fa7f 	bl	80059f4 <_Bfree>
 80054f6:	46c2      	mov	sl, r8
 80054f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054fa:	1b1a      	subs	r2, r3, r4
 80054fc:	d004      	beq.n	8005508 <_dtoa_r+0x7c0>
 80054fe:	4651      	mov	r1, sl
 8005500:	4628      	mov	r0, r5
 8005502:	f000 fbeb 	bl	8005cdc <__pow5mult>
 8005506:	4682      	mov	sl, r0
 8005508:	2101      	movs	r1, #1
 800550a:	4628      	mov	r0, r5
 800550c:	f000 fb2c 	bl	8005b68 <__i2b>
 8005510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005512:	4604      	mov	r4, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	f340 8087 	ble.w	8005628 <_dtoa_r+0x8e0>
 800551a:	461a      	mov	r2, r3
 800551c:	4601      	mov	r1, r0
 800551e:	4628      	mov	r0, r5
 8005520:	f000 fbdc 	bl	8005cdc <__pow5mult>
 8005524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005526:	4604      	mov	r4, r0
 8005528:	2b01      	cmp	r3, #1
 800552a:	f340 8080 	ble.w	800562e <_dtoa_r+0x8e6>
 800552e:	f04f 0800 	mov.w	r8, #0
 8005532:	6923      	ldr	r3, [r4, #16]
 8005534:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005538:	6918      	ldr	r0, [r3, #16]
 800553a:	f000 fac7 	bl	8005acc <__hi0bits>
 800553e:	f1c0 0020 	rsb	r0, r0, #32
 8005542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005544:	4418      	add	r0, r3
 8005546:	f010 001f 	ands.w	r0, r0, #31
 800554a:	f000 8092 	beq.w	8005672 <_dtoa_r+0x92a>
 800554e:	f1c0 0320 	rsb	r3, r0, #32
 8005552:	2b04      	cmp	r3, #4
 8005554:	f340 808a 	ble.w	800566c <_dtoa_r+0x924>
 8005558:	f1c0 001c 	rsb	r0, r0, #28
 800555c:	9b06      	ldr	r3, [sp, #24]
 800555e:	4407      	add	r7, r0
 8005560:	4403      	add	r3, r0
 8005562:	9306      	str	r3, [sp, #24]
 8005564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005566:	4403      	add	r3, r0
 8005568:	9309      	str	r3, [sp, #36]	; 0x24
 800556a:	9b06      	ldr	r3, [sp, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	dd05      	ble.n	800557c <_dtoa_r+0x834>
 8005570:	4651      	mov	r1, sl
 8005572:	461a      	mov	r2, r3
 8005574:	4628      	mov	r0, r5
 8005576:	f000 fc0b 	bl	8005d90 <__lshift>
 800557a:	4682      	mov	sl, r0
 800557c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800557e:	2b00      	cmp	r3, #0
 8005580:	dd05      	ble.n	800558e <_dtoa_r+0x846>
 8005582:	4621      	mov	r1, r4
 8005584:	461a      	mov	r2, r3
 8005586:	4628      	mov	r0, r5
 8005588:	f000 fc02 	bl	8005d90 <__lshift>
 800558c:	4604      	mov	r4, r0
 800558e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d070      	beq.n	8005676 <_dtoa_r+0x92e>
 8005594:	4621      	mov	r1, r4
 8005596:	4650      	mov	r0, sl
 8005598:	f000 fc66 	bl	8005e68 <__mcmp>
 800559c:	2800      	cmp	r0, #0
 800559e:	da6a      	bge.n	8005676 <_dtoa_r+0x92e>
 80055a0:	2300      	movs	r3, #0
 80055a2:	4651      	mov	r1, sl
 80055a4:	220a      	movs	r2, #10
 80055a6:	4628      	mov	r0, r5
 80055a8:	f000 fa46 	bl	8005a38 <__multadd>
 80055ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ae:	4682      	mov	sl, r0
 80055b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8193 	beq.w	80058e0 <_dtoa_r+0xb98>
 80055ba:	4631      	mov	r1, r6
 80055bc:	2300      	movs	r3, #0
 80055be:	220a      	movs	r2, #10
 80055c0:	4628      	mov	r0, r5
 80055c2:	f000 fa39 	bl	8005a38 <__multadd>
 80055c6:	f1bb 0f00 	cmp.w	fp, #0
 80055ca:	4606      	mov	r6, r0
 80055cc:	f300 8093 	bgt.w	80056f6 <_dtoa_r+0x9ae>
 80055d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	dc57      	bgt.n	8005686 <_dtoa_r+0x93e>
 80055d6:	e08e      	b.n	80056f6 <_dtoa_r+0x9ae>
 80055d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80055de:	e756      	b.n	800548e <_dtoa_r+0x746>
 80055e0:	9b02      	ldr	r3, [sp, #8]
 80055e2:	1e5c      	subs	r4, r3, #1
 80055e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e6:	42a3      	cmp	r3, r4
 80055e8:	bfb7      	itett	lt
 80055ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80055ec:	1b1c      	subge	r4, r3, r4
 80055ee:	1ae2      	sublt	r2, r4, r3
 80055f0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80055f2:	bfbe      	ittt	lt
 80055f4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80055f6:	189b      	addlt	r3, r3, r2
 80055f8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80055fa:	9b02      	ldr	r3, [sp, #8]
 80055fc:	bfb8      	it	lt
 80055fe:	2400      	movlt	r4, #0
 8005600:	2b00      	cmp	r3, #0
 8005602:	bfbb      	ittet	lt
 8005604:	9b06      	ldrlt	r3, [sp, #24]
 8005606:	9a02      	ldrlt	r2, [sp, #8]
 8005608:	9f06      	ldrge	r7, [sp, #24]
 800560a:	1a9f      	sublt	r7, r3, r2
 800560c:	bfac      	ite	ge
 800560e:	9b02      	ldrge	r3, [sp, #8]
 8005610:	2300      	movlt	r3, #0
 8005612:	e73e      	b.n	8005492 <_dtoa_r+0x74a>
 8005614:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005616:	9f06      	ldr	r7, [sp, #24]
 8005618:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800561a:	e745      	b.n	80054a8 <_dtoa_r+0x760>
 800561c:	3fe00000 	.word	0x3fe00000
 8005620:	40240000 	.word	0x40240000
 8005624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005626:	e76a      	b.n	80054fe <_dtoa_r+0x7b6>
 8005628:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800562a:	2b01      	cmp	r3, #1
 800562c:	dc19      	bgt.n	8005662 <_dtoa_r+0x91a>
 800562e:	9b04      	ldr	r3, [sp, #16]
 8005630:	b9bb      	cbnz	r3, 8005662 <_dtoa_r+0x91a>
 8005632:	9b05      	ldr	r3, [sp, #20]
 8005634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005638:	b99b      	cbnz	r3, 8005662 <_dtoa_r+0x91a>
 800563a:	9b05      	ldr	r3, [sp, #20]
 800563c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005640:	0d1b      	lsrs	r3, r3, #20
 8005642:	051b      	lsls	r3, r3, #20
 8005644:	b183      	cbz	r3, 8005668 <_dtoa_r+0x920>
 8005646:	f04f 0801 	mov.w	r8, #1
 800564a:	9b06      	ldr	r3, [sp, #24]
 800564c:	3301      	adds	r3, #1
 800564e:	9306      	str	r3, [sp, #24]
 8005650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005652:	3301      	adds	r3, #1
 8005654:	9309      	str	r3, [sp, #36]	; 0x24
 8005656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005658:	2b00      	cmp	r3, #0
 800565a:	f47f af6a 	bne.w	8005532 <_dtoa_r+0x7ea>
 800565e:	2001      	movs	r0, #1
 8005660:	e76f      	b.n	8005542 <_dtoa_r+0x7fa>
 8005662:	f04f 0800 	mov.w	r8, #0
 8005666:	e7f6      	b.n	8005656 <_dtoa_r+0x90e>
 8005668:	4698      	mov	r8, r3
 800566a:	e7f4      	b.n	8005656 <_dtoa_r+0x90e>
 800566c:	f43f af7d 	beq.w	800556a <_dtoa_r+0x822>
 8005670:	4618      	mov	r0, r3
 8005672:	301c      	adds	r0, #28
 8005674:	e772      	b.n	800555c <_dtoa_r+0x814>
 8005676:	9b02      	ldr	r3, [sp, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	dc36      	bgt.n	80056ea <_dtoa_r+0x9a2>
 800567c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800567e:	2b02      	cmp	r3, #2
 8005680:	dd33      	ble.n	80056ea <_dtoa_r+0x9a2>
 8005682:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005686:	f1bb 0f00 	cmp.w	fp, #0
 800568a:	d10d      	bne.n	80056a8 <_dtoa_r+0x960>
 800568c:	4621      	mov	r1, r4
 800568e:	465b      	mov	r3, fp
 8005690:	2205      	movs	r2, #5
 8005692:	4628      	mov	r0, r5
 8005694:	f000 f9d0 	bl	8005a38 <__multadd>
 8005698:	4601      	mov	r1, r0
 800569a:	4604      	mov	r4, r0
 800569c:	4650      	mov	r0, sl
 800569e:	f000 fbe3 	bl	8005e68 <__mcmp>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	f73f adb6 	bgt.w	8005214 <_dtoa_r+0x4cc>
 80056a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056aa:	9f08      	ldr	r7, [sp, #32]
 80056ac:	ea6f 0903 	mvn.w	r9, r3
 80056b0:	f04f 0800 	mov.w	r8, #0
 80056b4:	4621      	mov	r1, r4
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 f99c 	bl	80059f4 <_Bfree>
 80056bc:	2e00      	cmp	r6, #0
 80056be:	f43f aea4 	beq.w	800540a <_dtoa_r+0x6c2>
 80056c2:	f1b8 0f00 	cmp.w	r8, #0
 80056c6:	d005      	beq.n	80056d4 <_dtoa_r+0x98c>
 80056c8:	45b0      	cmp	r8, r6
 80056ca:	d003      	beq.n	80056d4 <_dtoa_r+0x98c>
 80056cc:	4641      	mov	r1, r8
 80056ce:	4628      	mov	r0, r5
 80056d0:	f000 f990 	bl	80059f4 <_Bfree>
 80056d4:	4631      	mov	r1, r6
 80056d6:	4628      	mov	r0, r5
 80056d8:	f000 f98c 	bl	80059f4 <_Bfree>
 80056dc:	e695      	b.n	800540a <_dtoa_r+0x6c2>
 80056de:	2400      	movs	r4, #0
 80056e0:	4626      	mov	r6, r4
 80056e2:	e7e1      	b.n	80056a8 <_dtoa_r+0x960>
 80056e4:	46c1      	mov	r9, r8
 80056e6:	4626      	mov	r6, r4
 80056e8:	e594      	b.n	8005214 <_dtoa_r+0x4cc>
 80056ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ec:	f8dd b008 	ldr.w	fp, [sp, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 80fc 	beq.w	80058ee <_dtoa_r+0xba6>
 80056f6:	2f00      	cmp	r7, #0
 80056f8:	dd05      	ble.n	8005706 <_dtoa_r+0x9be>
 80056fa:	4631      	mov	r1, r6
 80056fc:	463a      	mov	r2, r7
 80056fe:	4628      	mov	r0, r5
 8005700:	f000 fb46 	bl	8005d90 <__lshift>
 8005704:	4606      	mov	r6, r0
 8005706:	f1b8 0f00 	cmp.w	r8, #0
 800570a:	d05c      	beq.n	80057c6 <_dtoa_r+0xa7e>
 800570c:	4628      	mov	r0, r5
 800570e:	6871      	ldr	r1, [r6, #4]
 8005710:	f000 f930 	bl	8005974 <_Balloc>
 8005714:	4607      	mov	r7, r0
 8005716:	b928      	cbnz	r0, 8005724 <_dtoa_r+0x9dc>
 8005718:	4602      	mov	r2, r0
 800571a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800571e:	4b7e      	ldr	r3, [pc, #504]	; (8005918 <_dtoa_r+0xbd0>)
 8005720:	f7ff bb26 	b.w	8004d70 <_dtoa_r+0x28>
 8005724:	6932      	ldr	r2, [r6, #16]
 8005726:	f106 010c 	add.w	r1, r6, #12
 800572a:	3202      	adds	r2, #2
 800572c:	0092      	lsls	r2, r2, #2
 800572e:	300c      	adds	r0, #12
 8005730:	f000 f912 	bl	8005958 <memcpy>
 8005734:	2201      	movs	r2, #1
 8005736:	4639      	mov	r1, r7
 8005738:	4628      	mov	r0, r5
 800573a:	f000 fb29 	bl	8005d90 <__lshift>
 800573e:	46b0      	mov	r8, r6
 8005740:	4606      	mov	r6, r0
 8005742:	9b08      	ldr	r3, [sp, #32]
 8005744:	3301      	adds	r3, #1
 8005746:	9302      	str	r3, [sp, #8]
 8005748:	9b08      	ldr	r3, [sp, #32]
 800574a:	445b      	add	r3, fp
 800574c:	930a      	str	r3, [sp, #40]	; 0x28
 800574e:	9b04      	ldr	r3, [sp, #16]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	9309      	str	r3, [sp, #36]	; 0x24
 8005756:	9b02      	ldr	r3, [sp, #8]
 8005758:	4621      	mov	r1, r4
 800575a:	4650      	mov	r0, sl
 800575c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005760:	f7ff fa62 	bl	8004c28 <quorem>
 8005764:	4603      	mov	r3, r0
 8005766:	4641      	mov	r1, r8
 8005768:	3330      	adds	r3, #48	; 0x30
 800576a:	9004      	str	r0, [sp, #16]
 800576c:	4650      	mov	r0, sl
 800576e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005770:	f000 fb7a 	bl	8005e68 <__mcmp>
 8005774:	4632      	mov	r2, r6
 8005776:	9006      	str	r0, [sp, #24]
 8005778:	4621      	mov	r1, r4
 800577a:	4628      	mov	r0, r5
 800577c:	f000 fb90 	bl	8005ea0 <__mdiff>
 8005780:	68c2      	ldr	r2, [r0, #12]
 8005782:	4607      	mov	r7, r0
 8005784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005786:	bb02      	cbnz	r2, 80057ca <_dtoa_r+0xa82>
 8005788:	4601      	mov	r1, r0
 800578a:	4650      	mov	r0, sl
 800578c:	f000 fb6c 	bl	8005e68 <__mcmp>
 8005790:	4602      	mov	r2, r0
 8005792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005794:	4639      	mov	r1, r7
 8005796:	4628      	mov	r0, r5
 8005798:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800579c:	f000 f92a 	bl	80059f4 <_Bfree>
 80057a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057a4:	9f02      	ldr	r7, [sp, #8]
 80057a6:	ea43 0102 	orr.w	r1, r3, r2
 80057aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ac:	430b      	orrs	r3, r1
 80057ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057b0:	d10d      	bne.n	80057ce <_dtoa_r+0xa86>
 80057b2:	2b39      	cmp	r3, #57	; 0x39
 80057b4:	d027      	beq.n	8005806 <_dtoa_r+0xabe>
 80057b6:	9a06      	ldr	r2, [sp, #24]
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	dd01      	ble.n	80057c0 <_dtoa_r+0xa78>
 80057bc:	9b04      	ldr	r3, [sp, #16]
 80057be:	3331      	adds	r3, #49	; 0x31
 80057c0:	f88b 3000 	strb.w	r3, [fp]
 80057c4:	e776      	b.n	80056b4 <_dtoa_r+0x96c>
 80057c6:	4630      	mov	r0, r6
 80057c8:	e7b9      	b.n	800573e <_dtoa_r+0x9f6>
 80057ca:	2201      	movs	r2, #1
 80057cc:	e7e2      	b.n	8005794 <_dtoa_r+0xa4c>
 80057ce:	9906      	ldr	r1, [sp, #24]
 80057d0:	2900      	cmp	r1, #0
 80057d2:	db04      	blt.n	80057de <_dtoa_r+0xa96>
 80057d4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80057d6:	4301      	orrs	r1, r0
 80057d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057da:	4301      	orrs	r1, r0
 80057dc:	d120      	bne.n	8005820 <_dtoa_r+0xad8>
 80057de:	2a00      	cmp	r2, #0
 80057e0:	ddee      	ble.n	80057c0 <_dtoa_r+0xa78>
 80057e2:	4651      	mov	r1, sl
 80057e4:	2201      	movs	r2, #1
 80057e6:	4628      	mov	r0, r5
 80057e8:	9302      	str	r3, [sp, #8]
 80057ea:	f000 fad1 	bl	8005d90 <__lshift>
 80057ee:	4621      	mov	r1, r4
 80057f0:	4682      	mov	sl, r0
 80057f2:	f000 fb39 	bl	8005e68 <__mcmp>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	9b02      	ldr	r3, [sp, #8]
 80057fa:	dc02      	bgt.n	8005802 <_dtoa_r+0xaba>
 80057fc:	d1e0      	bne.n	80057c0 <_dtoa_r+0xa78>
 80057fe:	07da      	lsls	r2, r3, #31
 8005800:	d5de      	bpl.n	80057c0 <_dtoa_r+0xa78>
 8005802:	2b39      	cmp	r3, #57	; 0x39
 8005804:	d1da      	bne.n	80057bc <_dtoa_r+0xa74>
 8005806:	2339      	movs	r3, #57	; 0x39
 8005808:	f88b 3000 	strb.w	r3, [fp]
 800580c:	463b      	mov	r3, r7
 800580e:	461f      	mov	r7, r3
 8005810:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005814:	3b01      	subs	r3, #1
 8005816:	2a39      	cmp	r2, #57	; 0x39
 8005818:	d050      	beq.n	80058bc <_dtoa_r+0xb74>
 800581a:	3201      	adds	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	e749      	b.n	80056b4 <_dtoa_r+0x96c>
 8005820:	2a00      	cmp	r2, #0
 8005822:	dd03      	ble.n	800582c <_dtoa_r+0xae4>
 8005824:	2b39      	cmp	r3, #57	; 0x39
 8005826:	d0ee      	beq.n	8005806 <_dtoa_r+0xabe>
 8005828:	3301      	adds	r3, #1
 800582a:	e7c9      	b.n	80057c0 <_dtoa_r+0xa78>
 800582c:	9a02      	ldr	r2, [sp, #8]
 800582e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005830:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005834:	428a      	cmp	r2, r1
 8005836:	d02a      	beq.n	800588e <_dtoa_r+0xb46>
 8005838:	4651      	mov	r1, sl
 800583a:	2300      	movs	r3, #0
 800583c:	220a      	movs	r2, #10
 800583e:	4628      	mov	r0, r5
 8005840:	f000 f8fa 	bl	8005a38 <__multadd>
 8005844:	45b0      	cmp	r8, r6
 8005846:	4682      	mov	sl, r0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	f04f 020a 	mov.w	r2, #10
 8005850:	4641      	mov	r1, r8
 8005852:	4628      	mov	r0, r5
 8005854:	d107      	bne.n	8005866 <_dtoa_r+0xb1e>
 8005856:	f000 f8ef 	bl	8005a38 <__multadd>
 800585a:	4680      	mov	r8, r0
 800585c:	4606      	mov	r6, r0
 800585e:	9b02      	ldr	r3, [sp, #8]
 8005860:	3301      	adds	r3, #1
 8005862:	9302      	str	r3, [sp, #8]
 8005864:	e777      	b.n	8005756 <_dtoa_r+0xa0e>
 8005866:	f000 f8e7 	bl	8005a38 <__multadd>
 800586a:	4631      	mov	r1, r6
 800586c:	4680      	mov	r8, r0
 800586e:	2300      	movs	r3, #0
 8005870:	220a      	movs	r2, #10
 8005872:	4628      	mov	r0, r5
 8005874:	f000 f8e0 	bl	8005a38 <__multadd>
 8005878:	4606      	mov	r6, r0
 800587a:	e7f0      	b.n	800585e <_dtoa_r+0xb16>
 800587c:	f1bb 0f00 	cmp.w	fp, #0
 8005880:	bfcc      	ite	gt
 8005882:	465f      	movgt	r7, fp
 8005884:	2701      	movle	r7, #1
 8005886:	f04f 0800 	mov.w	r8, #0
 800588a:	9a08      	ldr	r2, [sp, #32]
 800588c:	4417      	add	r7, r2
 800588e:	4651      	mov	r1, sl
 8005890:	2201      	movs	r2, #1
 8005892:	4628      	mov	r0, r5
 8005894:	9302      	str	r3, [sp, #8]
 8005896:	f000 fa7b 	bl	8005d90 <__lshift>
 800589a:	4621      	mov	r1, r4
 800589c:	4682      	mov	sl, r0
 800589e:	f000 fae3 	bl	8005e68 <__mcmp>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	dcb2      	bgt.n	800580c <_dtoa_r+0xac4>
 80058a6:	d102      	bne.n	80058ae <_dtoa_r+0xb66>
 80058a8:	9b02      	ldr	r3, [sp, #8]
 80058aa:	07db      	lsls	r3, r3, #31
 80058ac:	d4ae      	bmi.n	800580c <_dtoa_r+0xac4>
 80058ae:	463b      	mov	r3, r7
 80058b0:	461f      	mov	r7, r3
 80058b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058b6:	2a30      	cmp	r2, #48	; 0x30
 80058b8:	d0fa      	beq.n	80058b0 <_dtoa_r+0xb68>
 80058ba:	e6fb      	b.n	80056b4 <_dtoa_r+0x96c>
 80058bc:	9a08      	ldr	r2, [sp, #32]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d1a5      	bne.n	800580e <_dtoa_r+0xac6>
 80058c2:	2331      	movs	r3, #49	; 0x31
 80058c4:	f109 0901 	add.w	r9, r9, #1
 80058c8:	7013      	strb	r3, [r2, #0]
 80058ca:	e6f3      	b.n	80056b4 <_dtoa_r+0x96c>
 80058cc:	4b13      	ldr	r3, [pc, #76]	; (800591c <_dtoa_r+0xbd4>)
 80058ce:	f7ff baa7 	b.w	8004e20 <_dtoa_r+0xd8>
 80058d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f47f aa80 	bne.w	8004dda <_dtoa_r+0x92>
 80058da:	4b11      	ldr	r3, [pc, #68]	; (8005920 <_dtoa_r+0xbd8>)
 80058dc:	f7ff baa0 	b.w	8004e20 <_dtoa_r+0xd8>
 80058e0:	f1bb 0f00 	cmp.w	fp, #0
 80058e4:	dc03      	bgt.n	80058ee <_dtoa_r+0xba6>
 80058e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	f73f aecc 	bgt.w	8005686 <_dtoa_r+0x93e>
 80058ee:	9f08      	ldr	r7, [sp, #32]
 80058f0:	4621      	mov	r1, r4
 80058f2:	4650      	mov	r0, sl
 80058f4:	f7ff f998 	bl	8004c28 <quorem>
 80058f8:	9a08      	ldr	r2, [sp, #32]
 80058fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80058fe:	f807 3b01 	strb.w	r3, [r7], #1
 8005902:	1aba      	subs	r2, r7, r2
 8005904:	4593      	cmp	fp, r2
 8005906:	ddb9      	ble.n	800587c <_dtoa_r+0xb34>
 8005908:	4651      	mov	r1, sl
 800590a:	2300      	movs	r3, #0
 800590c:	220a      	movs	r2, #10
 800590e:	4628      	mov	r0, r5
 8005910:	f000 f892 	bl	8005a38 <__multadd>
 8005914:	4682      	mov	sl, r0
 8005916:	e7eb      	b.n	80058f0 <_dtoa_r+0xba8>
 8005918:	0800717b 	.word	0x0800717b
 800591c:	080070d4 	.word	0x080070d4
 8005920:	080070f8 	.word	0x080070f8

08005924 <_localeconv_r>:
 8005924:	4800      	ldr	r0, [pc, #0]	; (8005928 <_localeconv_r+0x4>)
 8005926:	4770      	bx	lr
 8005928:	20000280 	.word	0x20000280

0800592c <malloc>:
 800592c:	4b02      	ldr	r3, [pc, #8]	; (8005938 <malloc+0xc>)
 800592e:	4601      	mov	r1, r0
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	f000 bbfb 	b.w	800612c <_malloc_r>
 8005936:	bf00      	nop
 8005938:	2000012c 	.word	0x2000012c

0800593c <memchr>:
 800593c:	4603      	mov	r3, r0
 800593e:	b510      	push	{r4, lr}
 8005940:	b2c9      	uxtb	r1, r1
 8005942:	4402      	add	r2, r0
 8005944:	4293      	cmp	r3, r2
 8005946:	4618      	mov	r0, r3
 8005948:	d101      	bne.n	800594e <memchr+0x12>
 800594a:	2000      	movs	r0, #0
 800594c:	e003      	b.n	8005956 <memchr+0x1a>
 800594e:	7804      	ldrb	r4, [r0, #0]
 8005950:	3301      	adds	r3, #1
 8005952:	428c      	cmp	r4, r1
 8005954:	d1f6      	bne.n	8005944 <memchr+0x8>
 8005956:	bd10      	pop	{r4, pc}

08005958 <memcpy>:
 8005958:	440a      	add	r2, r1
 800595a:	4291      	cmp	r1, r2
 800595c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005960:	d100      	bne.n	8005964 <memcpy+0xc>
 8005962:	4770      	bx	lr
 8005964:	b510      	push	{r4, lr}
 8005966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800596a:	4291      	cmp	r1, r2
 800596c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005970:	d1f9      	bne.n	8005966 <memcpy+0xe>
 8005972:	bd10      	pop	{r4, pc}

08005974 <_Balloc>:
 8005974:	b570      	push	{r4, r5, r6, lr}
 8005976:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005978:	4604      	mov	r4, r0
 800597a:	460d      	mov	r5, r1
 800597c:	b976      	cbnz	r6, 800599c <_Balloc+0x28>
 800597e:	2010      	movs	r0, #16
 8005980:	f7ff ffd4 	bl	800592c <malloc>
 8005984:	4602      	mov	r2, r0
 8005986:	6260      	str	r0, [r4, #36]	; 0x24
 8005988:	b920      	cbnz	r0, 8005994 <_Balloc+0x20>
 800598a:	2166      	movs	r1, #102	; 0x66
 800598c:	4b17      	ldr	r3, [pc, #92]	; (80059ec <_Balloc+0x78>)
 800598e:	4818      	ldr	r0, [pc, #96]	; (80059f0 <_Balloc+0x7c>)
 8005990:	f000 fd92 	bl	80064b8 <__assert_func>
 8005994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005998:	6006      	str	r6, [r0, #0]
 800599a:	60c6      	str	r6, [r0, #12]
 800599c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800599e:	68f3      	ldr	r3, [r6, #12]
 80059a0:	b183      	cbz	r3, 80059c4 <_Balloc+0x50>
 80059a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059aa:	b9b8      	cbnz	r0, 80059dc <_Balloc+0x68>
 80059ac:	2101      	movs	r1, #1
 80059ae:	fa01 f605 	lsl.w	r6, r1, r5
 80059b2:	1d72      	adds	r2, r6, #5
 80059b4:	4620      	mov	r0, r4
 80059b6:	0092      	lsls	r2, r2, #2
 80059b8:	f000 fb5e 	bl	8006078 <_calloc_r>
 80059bc:	b160      	cbz	r0, 80059d8 <_Balloc+0x64>
 80059be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059c2:	e00e      	b.n	80059e2 <_Balloc+0x6e>
 80059c4:	2221      	movs	r2, #33	; 0x21
 80059c6:	2104      	movs	r1, #4
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 fb55 	bl	8006078 <_calloc_r>
 80059ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059d0:	60f0      	str	r0, [r6, #12]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e4      	bne.n	80059a2 <_Balloc+0x2e>
 80059d8:	2000      	movs	r0, #0
 80059da:	bd70      	pop	{r4, r5, r6, pc}
 80059dc:	6802      	ldr	r2, [r0, #0]
 80059de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059e2:	2300      	movs	r3, #0
 80059e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059e8:	e7f7      	b.n	80059da <_Balloc+0x66>
 80059ea:	bf00      	nop
 80059ec:	08007105 	.word	0x08007105
 80059f0:	0800718c 	.word	0x0800718c

080059f4 <_Bfree>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059f8:	4605      	mov	r5, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	b976      	cbnz	r6, 8005a1c <_Bfree+0x28>
 80059fe:	2010      	movs	r0, #16
 8005a00:	f7ff ff94 	bl	800592c <malloc>
 8005a04:	4602      	mov	r2, r0
 8005a06:	6268      	str	r0, [r5, #36]	; 0x24
 8005a08:	b920      	cbnz	r0, 8005a14 <_Bfree+0x20>
 8005a0a:	218a      	movs	r1, #138	; 0x8a
 8005a0c:	4b08      	ldr	r3, [pc, #32]	; (8005a30 <_Bfree+0x3c>)
 8005a0e:	4809      	ldr	r0, [pc, #36]	; (8005a34 <_Bfree+0x40>)
 8005a10:	f000 fd52 	bl	80064b8 <__assert_func>
 8005a14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a18:	6006      	str	r6, [r0, #0]
 8005a1a:	60c6      	str	r6, [r0, #12]
 8005a1c:	b13c      	cbz	r4, 8005a2e <_Bfree+0x3a>
 8005a1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a20:	6862      	ldr	r2, [r4, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a28:	6021      	str	r1, [r4, #0]
 8005a2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	08007105 	.word	0x08007105
 8005a34:	0800718c 	.word	0x0800718c

08005a38 <__multadd>:
 8005a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3c:	4698      	mov	r8, r3
 8005a3e:	460c      	mov	r4, r1
 8005a40:	2300      	movs	r3, #0
 8005a42:	690e      	ldr	r6, [r1, #16]
 8005a44:	4607      	mov	r7, r0
 8005a46:	f101 0014 	add.w	r0, r1, #20
 8005a4a:	6805      	ldr	r5, [r0, #0]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	b2a9      	uxth	r1, r5
 8005a50:	fb02 8101 	mla	r1, r2, r1, r8
 8005a54:	0c2d      	lsrs	r5, r5, #16
 8005a56:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005a5a:	fb02 c505 	mla	r5, r2, r5, ip
 8005a5e:	b289      	uxth	r1, r1
 8005a60:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005a64:	429e      	cmp	r6, r3
 8005a66:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005a6a:	f840 1b04 	str.w	r1, [r0], #4
 8005a6e:	dcec      	bgt.n	8005a4a <__multadd+0x12>
 8005a70:	f1b8 0f00 	cmp.w	r8, #0
 8005a74:	d022      	beq.n	8005abc <__multadd+0x84>
 8005a76:	68a3      	ldr	r3, [r4, #8]
 8005a78:	42b3      	cmp	r3, r6
 8005a7a:	dc19      	bgt.n	8005ab0 <__multadd+0x78>
 8005a7c:	6861      	ldr	r1, [r4, #4]
 8005a7e:	4638      	mov	r0, r7
 8005a80:	3101      	adds	r1, #1
 8005a82:	f7ff ff77 	bl	8005974 <_Balloc>
 8005a86:	4605      	mov	r5, r0
 8005a88:	b928      	cbnz	r0, 8005a96 <__multadd+0x5e>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	21b5      	movs	r1, #181	; 0xb5
 8005a8e:	4b0d      	ldr	r3, [pc, #52]	; (8005ac4 <__multadd+0x8c>)
 8005a90:	480d      	ldr	r0, [pc, #52]	; (8005ac8 <__multadd+0x90>)
 8005a92:	f000 fd11 	bl	80064b8 <__assert_func>
 8005a96:	6922      	ldr	r2, [r4, #16]
 8005a98:	f104 010c 	add.w	r1, r4, #12
 8005a9c:	3202      	adds	r2, #2
 8005a9e:	0092      	lsls	r2, r2, #2
 8005aa0:	300c      	adds	r0, #12
 8005aa2:	f7ff ff59 	bl	8005958 <memcpy>
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	f7ff ffa3 	bl	80059f4 <_Bfree>
 8005aae:	462c      	mov	r4, r5
 8005ab0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005ab4:	3601      	adds	r6, #1
 8005ab6:	f8c3 8014 	str.w	r8, [r3, #20]
 8005aba:	6126      	str	r6, [r4, #16]
 8005abc:	4620      	mov	r0, r4
 8005abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac2:	bf00      	nop
 8005ac4:	0800717b 	.word	0x0800717b
 8005ac8:	0800718c 	.word	0x0800718c

08005acc <__hi0bits>:
 8005acc:	0c02      	lsrs	r2, r0, #16
 8005ace:	0412      	lsls	r2, r2, #16
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	b9ca      	cbnz	r2, 8005b08 <__hi0bits+0x3c>
 8005ad4:	0403      	lsls	r3, r0, #16
 8005ad6:	2010      	movs	r0, #16
 8005ad8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005adc:	bf04      	itt	eq
 8005ade:	021b      	lsleq	r3, r3, #8
 8005ae0:	3008      	addeq	r0, #8
 8005ae2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ae6:	bf04      	itt	eq
 8005ae8:	011b      	lsleq	r3, r3, #4
 8005aea:	3004      	addeq	r0, #4
 8005aec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005af0:	bf04      	itt	eq
 8005af2:	009b      	lsleq	r3, r3, #2
 8005af4:	3002      	addeq	r0, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	db05      	blt.n	8005b06 <__hi0bits+0x3a>
 8005afa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005afe:	f100 0001 	add.w	r0, r0, #1
 8005b02:	bf08      	it	eq
 8005b04:	2020      	moveq	r0, #32
 8005b06:	4770      	bx	lr
 8005b08:	2000      	movs	r0, #0
 8005b0a:	e7e5      	b.n	8005ad8 <__hi0bits+0xc>

08005b0c <__lo0bits>:
 8005b0c:	6803      	ldr	r3, [r0, #0]
 8005b0e:	4602      	mov	r2, r0
 8005b10:	f013 0007 	ands.w	r0, r3, #7
 8005b14:	d00b      	beq.n	8005b2e <__lo0bits+0x22>
 8005b16:	07d9      	lsls	r1, r3, #31
 8005b18:	d422      	bmi.n	8005b60 <__lo0bits+0x54>
 8005b1a:	0798      	lsls	r0, r3, #30
 8005b1c:	bf49      	itett	mi
 8005b1e:	085b      	lsrmi	r3, r3, #1
 8005b20:	089b      	lsrpl	r3, r3, #2
 8005b22:	2001      	movmi	r0, #1
 8005b24:	6013      	strmi	r3, [r2, #0]
 8005b26:	bf5c      	itt	pl
 8005b28:	2002      	movpl	r0, #2
 8005b2a:	6013      	strpl	r3, [r2, #0]
 8005b2c:	4770      	bx	lr
 8005b2e:	b299      	uxth	r1, r3
 8005b30:	b909      	cbnz	r1, 8005b36 <__lo0bits+0x2a>
 8005b32:	2010      	movs	r0, #16
 8005b34:	0c1b      	lsrs	r3, r3, #16
 8005b36:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b3a:	bf04      	itt	eq
 8005b3c:	0a1b      	lsreq	r3, r3, #8
 8005b3e:	3008      	addeq	r0, #8
 8005b40:	0719      	lsls	r1, r3, #28
 8005b42:	bf04      	itt	eq
 8005b44:	091b      	lsreq	r3, r3, #4
 8005b46:	3004      	addeq	r0, #4
 8005b48:	0799      	lsls	r1, r3, #30
 8005b4a:	bf04      	itt	eq
 8005b4c:	089b      	lsreq	r3, r3, #2
 8005b4e:	3002      	addeq	r0, #2
 8005b50:	07d9      	lsls	r1, r3, #31
 8005b52:	d403      	bmi.n	8005b5c <__lo0bits+0x50>
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	f100 0001 	add.w	r0, r0, #1
 8005b5a:	d003      	beq.n	8005b64 <__lo0bits+0x58>
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	4770      	bx	lr
 8005b60:	2000      	movs	r0, #0
 8005b62:	4770      	bx	lr
 8005b64:	2020      	movs	r0, #32
 8005b66:	4770      	bx	lr

08005b68 <__i2b>:
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	f7ff ff01 	bl	8005974 <_Balloc>
 8005b72:	4602      	mov	r2, r0
 8005b74:	b928      	cbnz	r0, 8005b82 <__i2b+0x1a>
 8005b76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b7a:	4b04      	ldr	r3, [pc, #16]	; (8005b8c <__i2b+0x24>)
 8005b7c:	4804      	ldr	r0, [pc, #16]	; (8005b90 <__i2b+0x28>)
 8005b7e:	f000 fc9b 	bl	80064b8 <__assert_func>
 8005b82:	2301      	movs	r3, #1
 8005b84:	6144      	str	r4, [r0, #20]
 8005b86:	6103      	str	r3, [r0, #16]
 8005b88:	bd10      	pop	{r4, pc}
 8005b8a:	bf00      	nop
 8005b8c:	0800717b 	.word	0x0800717b
 8005b90:	0800718c 	.word	0x0800718c

08005b94 <__multiply>:
 8005b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b98:	4614      	mov	r4, r2
 8005b9a:	690a      	ldr	r2, [r1, #16]
 8005b9c:	6923      	ldr	r3, [r4, #16]
 8005b9e:	460d      	mov	r5, r1
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	bfbe      	ittt	lt
 8005ba4:	460b      	movlt	r3, r1
 8005ba6:	4625      	movlt	r5, r4
 8005ba8:	461c      	movlt	r4, r3
 8005baa:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005bae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005bb2:	68ab      	ldr	r3, [r5, #8]
 8005bb4:	6869      	ldr	r1, [r5, #4]
 8005bb6:	eb0a 0709 	add.w	r7, sl, r9
 8005bba:	42bb      	cmp	r3, r7
 8005bbc:	b085      	sub	sp, #20
 8005bbe:	bfb8      	it	lt
 8005bc0:	3101      	addlt	r1, #1
 8005bc2:	f7ff fed7 	bl	8005974 <_Balloc>
 8005bc6:	b930      	cbnz	r0, 8005bd6 <__multiply+0x42>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	f240 115d 	movw	r1, #349	; 0x15d
 8005bce:	4b41      	ldr	r3, [pc, #260]	; (8005cd4 <__multiply+0x140>)
 8005bd0:	4841      	ldr	r0, [pc, #260]	; (8005cd8 <__multiply+0x144>)
 8005bd2:	f000 fc71 	bl	80064b8 <__assert_func>
 8005bd6:	f100 0614 	add.w	r6, r0, #20
 8005bda:	4633      	mov	r3, r6
 8005bdc:	2200      	movs	r2, #0
 8005bde:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005be2:	4543      	cmp	r3, r8
 8005be4:	d31e      	bcc.n	8005c24 <__multiply+0x90>
 8005be6:	f105 0c14 	add.w	ip, r5, #20
 8005bea:	f104 0314 	add.w	r3, r4, #20
 8005bee:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005bf2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005bf6:	9202      	str	r2, [sp, #8]
 8005bf8:	ebac 0205 	sub.w	r2, ip, r5
 8005bfc:	3a15      	subs	r2, #21
 8005bfe:	f022 0203 	bic.w	r2, r2, #3
 8005c02:	3204      	adds	r2, #4
 8005c04:	f105 0115 	add.w	r1, r5, #21
 8005c08:	458c      	cmp	ip, r1
 8005c0a:	bf38      	it	cc
 8005c0c:	2204      	movcc	r2, #4
 8005c0e:	9201      	str	r2, [sp, #4]
 8005c10:	9a02      	ldr	r2, [sp, #8]
 8005c12:	9303      	str	r3, [sp, #12]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d808      	bhi.n	8005c2a <__multiply+0x96>
 8005c18:	2f00      	cmp	r7, #0
 8005c1a:	dc55      	bgt.n	8005cc8 <__multiply+0x134>
 8005c1c:	6107      	str	r7, [r0, #16]
 8005c1e:	b005      	add	sp, #20
 8005c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c24:	f843 2b04 	str.w	r2, [r3], #4
 8005c28:	e7db      	b.n	8005be2 <__multiply+0x4e>
 8005c2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c2e:	f1ba 0f00 	cmp.w	sl, #0
 8005c32:	d020      	beq.n	8005c76 <__multiply+0xe2>
 8005c34:	46b1      	mov	r9, r6
 8005c36:	2200      	movs	r2, #0
 8005c38:	f105 0e14 	add.w	lr, r5, #20
 8005c3c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005c40:	f8d9 b000 	ldr.w	fp, [r9]
 8005c44:	b2a1      	uxth	r1, r4
 8005c46:	fa1f fb8b 	uxth.w	fp, fp
 8005c4a:	fb0a b101 	mla	r1, sl, r1, fp
 8005c4e:	4411      	add	r1, r2
 8005c50:	f8d9 2000 	ldr.w	r2, [r9]
 8005c54:	0c24      	lsrs	r4, r4, #16
 8005c56:	0c12      	lsrs	r2, r2, #16
 8005c58:	fb0a 2404 	mla	r4, sl, r4, r2
 8005c5c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005c60:	b289      	uxth	r1, r1
 8005c62:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005c66:	45f4      	cmp	ip, lr
 8005c68:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005c6c:	f849 1b04 	str.w	r1, [r9], #4
 8005c70:	d8e4      	bhi.n	8005c3c <__multiply+0xa8>
 8005c72:	9901      	ldr	r1, [sp, #4]
 8005c74:	5072      	str	r2, [r6, r1]
 8005c76:	9a03      	ldr	r2, [sp, #12]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c7e:	f1b9 0f00 	cmp.w	r9, #0
 8005c82:	d01f      	beq.n	8005cc4 <__multiply+0x130>
 8005c84:	46b6      	mov	lr, r6
 8005c86:	f04f 0a00 	mov.w	sl, #0
 8005c8a:	6834      	ldr	r4, [r6, #0]
 8005c8c:	f105 0114 	add.w	r1, r5, #20
 8005c90:	880a      	ldrh	r2, [r1, #0]
 8005c92:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005c96:	b2a4      	uxth	r4, r4
 8005c98:	fb09 b202 	mla	r2, r9, r2, fp
 8005c9c:	4492      	add	sl, r2
 8005c9e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005ca2:	f84e 4b04 	str.w	r4, [lr], #4
 8005ca6:	f851 4b04 	ldr.w	r4, [r1], #4
 8005caa:	f8be 2000 	ldrh.w	r2, [lr]
 8005cae:	0c24      	lsrs	r4, r4, #16
 8005cb0:	fb09 2404 	mla	r4, r9, r4, r2
 8005cb4:	458c      	cmp	ip, r1
 8005cb6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005cba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005cbe:	d8e7      	bhi.n	8005c90 <__multiply+0xfc>
 8005cc0:	9a01      	ldr	r2, [sp, #4]
 8005cc2:	50b4      	str	r4, [r6, r2]
 8005cc4:	3604      	adds	r6, #4
 8005cc6:	e7a3      	b.n	8005c10 <__multiply+0x7c>
 8005cc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1a5      	bne.n	8005c1c <__multiply+0x88>
 8005cd0:	3f01      	subs	r7, #1
 8005cd2:	e7a1      	b.n	8005c18 <__multiply+0x84>
 8005cd4:	0800717b 	.word	0x0800717b
 8005cd8:	0800718c 	.word	0x0800718c

08005cdc <__pow5mult>:
 8005cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce0:	4615      	mov	r5, r2
 8005ce2:	f012 0203 	ands.w	r2, r2, #3
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	460f      	mov	r7, r1
 8005cea:	d007      	beq.n	8005cfc <__pow5mult+0x20>
 8005cec:	4c25      	ldr	r4, [pc, #148]	; (8005d84 <__pow5mult+0xa8>)
 8005cee:	3a01      	subs	r2, #1
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cf6:	f7ff fe9f 	bl	8005a38 <__multadd>
 8005cfa:	4607      	mov	r7, r0
 8005cfc:	10ad      	asrs	r5, r5, #2
 8005cfe:	d03d      	beq.n	8005d7c <__pow5mult+0xa0>
 8005d00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d02:	b97c      	cbnz	r4, 8005d24 <__pow5mult+0x48>
 8005d04:	2010      	movs	r0, #16
 8005d06:	f7ff fe11 	bl	800592c <malloc>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	6270      	str	r0, [r6, #36]	; 0x24
 8005d0e:	b928      	cbnz	r0, 8005d1c <__pow5mult+0x40>
 8005d10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005d14:	4b1c      	ldr	r3, [pc, #112]	; (8005d88 <__pow5mult+0xac>)
 8005d16:	481d      	ldr	r0, [pc, #116]	; (8005d8c <__pow5mult+0xb0>)
 8005d18:	f000 fbce 	bl	80064b8 <__assert_func>
 8005d1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d20:	6004      	str	r4, [r0, #0]
 8005d22:	60c4      	str	r4, [r0, #12]
 8005d24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d2c:	b94c      	cbnz	r4, 8005d42 <__pow5mult+0x66>
 8005d2e:	f240 2171 	movw	r1, #625	; 0x271
 8005d32:	4630      	mov	r0, r6
 8005d34:	f7ff ff18 	bl	8005b68 <__i2b>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d40:	6003      	str	r3, [r0, #0]
 8005d42:	f04f 0900 	mov.w	r9, #0
 8005d46:	07eb      	lsls	r3, r5, #31
 8005d48:	d50a      	bpl.n	8005d60 <__pow5mult+0x84>
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	4622      	mov	r2, r4
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f7ff ff20 	bl	8005b94 <__multiply>
 8005d54:	4680      	mov	r8, r0
 8005d56:	4639      	mov	r1, r7
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f7ff fe4b 	bl	80059f4 <_Bfree>
 8005d5e:	4647      	mov	r7, r8
 8005d60:	106d      	asrs	r5, r5, #1
 8005d62:	d00b      	beq.n	8005d7c <__pow5mult+0xa0>
 8005d64:	6820      	ldr	r0, [r4, #0]
 8005d66:	b938      	cbnz	r0, 8005d78 <__pow5mult+0x9c>
 8005d68:	4622      	mov	r2, r4
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f7ff ff11 	bl	8005b94 <__multiply>
 8005d72:	6020      	str	r0, [r4, #0]
 8005d74:	f8c0 9000 	str.w	r9, [r0]
 8005d78:	4604      	mov	r4, r0
 8005d7a:	e7e4      	b.n	8005d46 <__pow5mult+0x6a>
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d82:	bf00      	nop
 8005d84:	080072e0 	.word	0x080072e0
 8005d88:	08007105 	.word	0x08007105
 8005d8c:	0800718c 	.word	0x0800718c

08005d90 <__lshift>:
 8005d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d94:	460c      	mov	r4, r1
 8005d96:	4607      	mov	r7, r0
 8005d98:	4691      	mov	r9, r2
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	6849      	ldr	r1, [r1, #4]
 8005d9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005da2:	68a3      	ldr	r3, [r4, #8]
 8005da4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005da8:	f108 0601 	add.w	r6, r8, #1
 8005dac:	42b3      	cmp	r3, r6
 8005dae:	db0b      	blt.n	8005dc8 <__lshift+0x38>
 8005db0:	4638      	mov	r0, r7
 8005db2:	f7ff fddf 	bl	8005974 <_Balloc>
 8005db6:	4605      	mov	r5, r0
 8005db8:	b948      	cbnz	r0, 8005dce <__lshift+0x3e>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005dc0:	4b27      	ldr	r3, [pc, #156]	; (8005e60 <__lshift+0xd0>)
 8005dc2:	4828      	ldr	r0, [pc, #160]	; (8005e64 <__lshift+0xd4>)
 8005dc4:	f000 fb78 	bl	80064b8 <__assert_func>
 8005dc8:	3101      	adds	r1, #1
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	e7ee      	b.n	8005dac <__lshift+0x1c>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f100 0114 	add.w	r1, r0, #20
 8005dd4:	f100 0210 	add.w	r2, r0, #16
 8005dd8:	4618      	mov	r0, r3
 8005dda:	4553      	cmp	r3, sl
 8005ddc:	db33      	blt.n	8005e46 <__lshift+0xb6>
 8005dde:	6920      	ldr	r0, [r4, #16]
 8005de0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005de4:	f104 0314 	add.w	r3, r4, #20
 8005de8:	f019 091f 	ands.w	r9, r9, #31
 8005dec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005df0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005df4:	d02b      	beq.n	8005e4e <__lshift+0xbe>
 8005df6:	468a      	mov	sl, r1
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f1c9 0e20 	rsb	lr, r9, #32
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	fa00 f009 	lsl.w	r0, r0, r9
 8005e04:	4302      	orrs	r2, r0
 8005e06:	f84a 2b04 	str.w	r2, [sl], #4
 8005e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e0e:	459c      	cmp	ip, r3
 8005e10:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e14:	d8f3      	bhi.n	8005dfe <__lshift+0x6e>
 8005e16:	ebac 0304 	sub.w	r3, ip, r4
 8005e1a:	3b15      	subs	r3, #21
 8005e1c:	f023 0303 	bic.w	r3, r3, #3
 8005e20:	3304      	adds	r3, #4
 8005e22:	f104 0015 	add.w	r0, r4, #21
 8005e26:	4584      	cmp	ip, r0
 8005e28:	bf38      	it	cc
 8005e2a:	2304      	movcc	r3, #4
 8005e2c:	50ca      	str	r2, [r1, r3]
 8005e2e:	b10a      	cbz	r2, 8005e34 <__lshift+0xa4>
 8005e30:	f108 0602 	add.w	r6, r8, #2
 8005e34:	3e01      	subs	r6, #1
 8005e36:	4638      	mov	r0, r7
 8005e38:	4621      	mov	r1, r4
 8005e3a:	612e      	str	r6, [r5, #16]
 8005e3c:	f7ff fdda 	bl	80059f4 <_Bfree>
 8005e40:	4628      	mov	r0, r5
 8005e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e46:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	e7c5      	b.n	8005dda <__lshift+0x4a>
 8005e4e:	3904      	subs	r1, #4
 8005e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e54:	459c      	cmp	ip, r3
 8005e56:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e5a:	d8f9      	bhi.n	8005e50 <__lshift+0xc0>
 8005e5c:	e7ea      	b.n	8005e34 <__lshift+0xa4>
 8005e5e:	bf00      	nop
 8005e60:	0800717b 	.word	0x0800717b
 8005e64:	0800718c 	.word	0x0800718c

08005e68 <__mcmp>:
 8005e68:	4603      	mov	r3, r0
 8005e6a:	690a      	ldr	r2, [r1, #16]
 8005e6c:	6900      	ldr	r0, [r0, #16]
 8005e6e:	b530      	push	{r4, r5, lr}
 8005e70:	1a80      	subs	r0, r0, r2
 8005e72:	d10d      	bne.n	8005e90 <__mcmp+0x28>
 8005e74:	3314      	adds	r3, #20
 8005e76:	3114      	adds	r1, #20
 8005e78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e88:	4295      	cmp	r5, r2
 8005e8a:	d002      	beq.n	8005e92 <__mcmp+0x2a>
 8005e8c:	d304      	bcc.n	8005e98 <__mcmp+0x30>
 8005e8e:	2001      	movs	r0, #1
 8005e90:	bd30      	pop	{r4, r5, pc}
 8005e92:	42a3      	cmp	r3, r4
 8005e94:	d3f4      	bcc.n	8005e80 <__mcmp+0x18>
 8005e96:	e7fb      	b.n	8005e90 <__mcmp+0x28>
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9c:	e7f8      	b.n	8005e90 <__mcmp+0x28>
	...

08005ea0 <__mdiff>:
 8005ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	4620      	mov	r0, r4
 8005eac:	4692      	mov	sl, r2
 8005eae:	f7ff ffdb 	bl	8005e68 <__mcmp>
 8005eb2:	1e05      	subs	r5, r0, #0
 8005eb4:	d111      	bne.n	8005eda <__mdiff+0x3a>
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f7ff fd5b 	bl	8005974 <_Balloc>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	b928      	cbnz	r0, 8005ece <__mdiff+0x2e>
 8005ec2:	f240 2132 	movw	r1, #562	; 0x232
 8005ec6:	4b3c      	ldr	r3, [pc, #240]	; (8005fb8 <__mdiff+0x118>)
 8005ec8:	483c      	ldr	r0, [pc, #240]	; (8005fbc <__mdiff+0x11c>)
 8005eca:	f000 faf5 	bl	80064b8 <__assert_func>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eda:	bfa4      	itt	ge
 8005edc:	4653      	movge	r3, sl
 8005ede:	46a2      	movge	sl, r4
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005ee6:	bfa6      	itte	ge
 8005ee8:	461c      	movge	r4, r3
 8005eea:	2500      	movge	r5, #0
 8005eec:	2501      	movlt	r5, #1
 8005eee:	f7ff fd41 	bl	8005974 <_Balloc>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	b918      	cbnz	r0, 8005efe <__mdiff+0x5e>
 8005ef6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005efa:	4b2f      	ldr	r3, [pc, #188]	; (8005fb8 <__mdiff+0x118>)
 8005efc:	e7e4      	b.n	8005ec8 <__mdiff+0x28>
 8005efe:	f100 0814 	add.w	r8, r0, #20
 8005f02:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005f06:	60c5      	str	r5, [r0, #12]
 8005f08:	f04f 0c00 	mov.w	ip, #0
 8005f0c:	f10a 0514 	add.w	r5, sl, #20
 8005f10:	f10a 0010 	add.w	r0, sl, #16
 8005f14:	46c2      	mov	sl, r8
 8005f16:	6926      	ldr	r6, [r4, #16]
 8005f18:	f104 0914 	add.w	r9, r4, #20
 8005f1c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005f20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f24:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005f28:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f2c:	fa1f f18b 	uxth.w	r1, fp
 8005f30:	4461      	add	r1, ip
 8005f32:	fa1f fc83 	uxth.w	ip, r3
 8005f36:	0c1b      	lsrs	r3, r3, #16
 8005f38:	eba1 010c 	sub.w	r1, r1, ip
 8005f3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f40:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f44:	b289      	uxth	r1, r1
 8005f46:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f4a:	454e      	cmp	r6, r9
 8005f4c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f50:	f84a 3b04 	str.w	r3, [sl], #4
 8005f54:	d8e6      	bhi.n	8005f24 <__mdiff+0x84>
 8005f56:	1b33      	subs	r3, r6, r4
 8005f58:	3b15      	subs	r3, #21
 8005f5a:	f023 0303 	bic.w	r3, r3, #3
 8005f5e:	3415      	adds	r4, #21
 8005f60:	3304      	adds	r3, #4
 8005f62:	42a6      	cmp	r6, r4
 8005f64:	bf38      	it	cc
 8005f66:	2304      	movcc	r3, #4
 8005f68:	441d      	add	r5, r3
 8005f6a:	4443      	add	r3, r8
 8005f6c:	461e      	mov	r6, r3
 8005f6e:	462c      	mov	r4, r5
 8005f70:	4574      	cmp	r4, lr
 8005f72:	d30e      	bcc.n	8005f92 <__mdiff+0xf2>
 8005f74:	f10e 0103 	add.w	r1, lr, #3
 8005f78:	1b49      	subs	r1, r1, r5
 8005f7a:	f021 0103 	bic.w	r1, r1, #3
 8005f7e:	3d03      	subs	r5, #3
 8005f80:	45ae      	cmp	lr, r5
 8005f82:	bf38      	it	cc
 8005f84:	2100      	movcc	r1, #0
 8005f86:	4419      	add	r1, r3
 8005f88:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005f8c:	b18b      	cbz	r3, 8005fb2 <__mdiff+0x112>
 8005f8e:	6117      	str	r7, [r2, #16]
 8005f90:	e7a0      	b.n	8005ed4 <__mdiff+0x34>
 8005f92:	f854 8b04 	ldr.w	r8, [r4], #4
 8005f96:	fa1f f188 	uxth.w	r1, r8
 8005f9a:	4461      	add	r1, ip
 8005f9c:	1408      	asrs	r0, r1, #16
 8005f9e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005fa2:	b289      	uxth	r1, r1
 8005fa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005fa8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005fac:	f846 1b04 	str.w	r1, [r6], #4
 8005fb0:	e7de      	b.n	8005f70 <__mdiff+0xd0>
 8005fb2:	3f01      	subs	r7, #1
 8005fb4:	e7e8      	b.n	8005f88 <__mdiff+0xe8>
 8005fb6:	bf00      	nop
 8005fb8:	0800717b 	.word	0x0800717b
 8005fbc:	0800718c 	.word	0x0800718c

08005fc0 <__d2b>:
 8005fc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005fca:	4690      	mov	r8, r2
 8005fcc:	461d      	mov	r5, r3
 8005fce:	f7ff fcd1 	bl	8005974 <_Balloc>
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	b930      	cbnz	r0, 8005fe4 <__d2b+0x24>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	f240 310a 	movw	r1, #778	; 0x30a
 8005fdc:	4b24      	ldr	r3, [pc, #144]	; (8006070 <__d2b+0xb0>)
 8005fde:	4825      	ldr	r0, [pc, #148]	; (8006074 <__d2b+0xb4>)
 8005fe0:	f000 fa6a 	bl	80064b8 <__assert_func>
 8005fe4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005fe8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005fec:	bb2d      	cbnz	r5, 800603a <__d2b+0x7a>
 8005fee:	9301      	str	r3, [sp, #4]
 8005ff0:	f1b8 0300 	subs.w	r3, r8, #0
 8005ff4:	d026      	beq.n	8006044 <__d2b+0x84>
 8005ff6:	4668      	mov	r0, sp
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	f7ff fd87 	bl	8005b0c <__lo0bits>
 8005ffe:	9900      	ldr	r1, [sp, #0]
 8006000:	b1f0      	cbz	r0, 8006040 <__d2b+0x80>
 8006002:	9a01      	ldr	r2, [sp, #4]
 8006004:	f1c0 0320 	rsb	r3, r0, #32
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	430b      	orrs	r3, r1
 800600e:	40c2      	lsrs	r2, r0
 8006010:	6163      	str	r3, [r4, #20]
 8006012:	9201      	str	r2, [sp, #4]
 8006014:	9b01      	ldr	r3, [sp, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	bf14      	ite	ne
 800601a:	2102      	movne	r1, #2
 800601c:	2101      	moveq	r1, #1
 800601e:	61a3      	str	r3, [r4, #24]
 8006020:	6121      	str	r1, [r4, #16]
 8006022:	b1c5      	cbz	r5, 8006056 <__d2b+0x96>
 8006024:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006028:	4405      	add	r5, r0
 800602a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800602e:	603d      	str	r5, [r7, #0]
 8006030:	6030      	str	r0, [r6, #0]
 8006032:	4620      	mov	r0, r4
 8006034:	b002      	add	sp, #8
 8006036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800603a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800603e:	e7d6      	b.n	8005fee <__d2b+0x2e>
 8006040:	6161      	str	r1, [r4, #20]
 8006042:	e7e7      	b.n	8006014 <__d2b+0x54>
 8006044:	a801      	add	r0, sp, #4
 8006046:	f7ff fd61 	bl	8005b0c <__lo0bits>
 800604a:	2101      	movs	r1, #1
 800604c:	9b01      	ldr	r3, [sp, #4]
 800604e:	6121      	str	r1, [r4, #16]
 8006050:	6163      	str	r3, [r4, #20]
 8006052:	3020      	adds	r0, #32
 8006054:	e7e5      	b.n	8006022 <__d2b+0x62>
 8006056:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800605a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800605e:	6038      	str	r0, [r7, #0]
 8006060:	6918      	ldr	r0, [r3, #16]
 8006062:	f7ff fd33 	bl	8005acc <__hi0bits>
 8006066:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800606a:	6031      	str	r1, [r6, #0]
 800606c:	e7e1      	b.n	8006032 <__d2b+0x72>
 800606e:	bf00      	nop
 8006070:	0800717b 	.word	0x0800717b
 8006074:	0800718c 	.word	0x0800718c

08006078 <_calloc_r>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	fb02 f501 	mul.w	r5, r2, r1
 800607e:	4629      	mov	r1, r5
 8006080:	f000 f854 	bl	800612c <_malloc_r>
 8006084:	4604      	mov	r4, r0
 8006086:	b118      	cbz	r0, 8006090 <_calloc_r+0x18>
 8006088:	462a      	mov	r2, r5
 800608a:	2100      	movs	r1, #0
 800608c:	f7fe f944 	bl	8004318 <memset>
 8006090:	4620      	mov	r0, r4
 8006092:	bd38      	pop	{r3, r4, r5, pc}

08006094 <_free_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	4605      	mov	r5, r0
 8006098:	2900      	cmp	r1, #0
 800609a:	d043      	beq.n	8006124 <_free_r+0x90>
 800609c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a0:	1f0c      	subs	r4, r1, #4
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	bfb8      	it	lt
 80060a6:	18e4      	addlt	r4, r4, r3
 80060a8:	f000 fa62 	bl	8006570 <__malloc_lock>
 80060ac:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <_free_r+0x94>)
 80060ae:	6813      	ldr	r3, [r2, #0]
 80060b0:	4610      	mov	r0, r2
 80060b2:	b933      	cbnz	r3, 80060c2 <_free_r+0x2e>
 80060b4:	6063      	str	r3, [r4, #4]
 80060b6:	6014      	str	r4, [r2, #0]
 80060b8:	4628      	mov	r0, r5
 80060ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060be:	f000 ba5d 	b.w	800657c <__malloc_unlock>
 80060c2:	42a3      	cmp	r3, r4
 80060c4:	d90a      	bls.n	80060dc <_free_r+0x48>
 80060c6:	6821      	ldr	r1, [r4, #0]
 80060c8:	1862      	adds	r2, r4, r1
 80060ca:	4293      	cmp	r3, r2
 80060cc:	bf01      	itttt	eq
 80060ce:	681a      	ldreq	r2, [r3, #0]
 80060d0:	685b      	ldreq	r3, [r3, #4]
 80060d2:	1852      	addeq	r2, r2, r1
 80060d4:	6022      	streq	r2, [r4, #0]
 80060d6:	6063      	str	r3, [r4, #4]
 80060d8:	6004      	str	r4, [r0, #0]
 80060da:	e7ed      	b.n	80060b8 <_free_r+0x24>
 80060dc:	461a      	mov	r2, r3
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	b10b      	cbz	r3, 80060e6 <_free_r+0x52>
 80060e2:	42a3      	cmp	r3, r4
 80060e4:	d9fa      	bls.n	80060dc <_free_r+0x48>
 80060e6:	6811      	ldr	r1, [r2, #0]
 80060e8:	1850      	adds	r0, r2, r1
 80060ea:	42a0      	cmp	r0, r4
 80060ec:	d10b      	bne.n	8006106 <_free_r+0x72>
 80060ee:	6820      	ldr	r0, [r4, #0]
 80060f0:	4401      	add	r1, r0
 80060f2:	1850      	adds	r0, r2, r1
 80060f4:	4283      	cmp	r3, r0
 80060f6:	6011      	str	r1, [r2, #0]
 80060f8:	d1de      	bne.n	80060b8 <_free_r+0x24>
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	4401      	add	r1, r0
 8006100:	6011      	str	r1, [r2, #0]
 8006102:	6053      	str	r3, [r2, #4]
 8006104:	e7d8      	b.n	80060b8 <_free_r+0x24>
 8006106:	d902      	bls.n	800610e <_free_r+0x7a>
 8006108:	230c      	movs	r3, #12
 800610a:	602b      	str	r3, [r5, #0]
 800610c:	e7d4      	b.n	80060b8 <_free_r+0x24>
 800610e:	6820      	ldr	r0, [r4, #0]
 8006110:	1821      	adds	r1, r4, r0
 8006112:	428b      	cmp	r3, r1
 8006114:	bf01      	itttt	eq
 8006116:	6819      	ldreq	r1, [r3, #0]
 8006118:	685b      	ldreq	r3, [r3, #4]
 800611a:	1809      	addeq	r1, r1, r0
 800611c:	6021      	streq	r1, [r4, #0]
 800611e:	6063      	str	r3, [r4, #4]
 8006120:	6054      	str	r4, [r2, #4]
 8006122:	e7c9      	b.n	80060b8 <_free_r+0x24>
 8006124:	bd38      	pop	{r3, r4, r5, pc}
 8006126:	bf00      	nop
 8006128:	20000328 	.word	0x20000328

0800612c <_malloc_r>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	1ccd      	adds	r5, r1, #3
 8006130:	f025 0503 	bic.w	r5, r5, #3
 8006134:	3508      	adds	r5, #8
 8006136:	2d0c      	cmp	r5, #12
 8006138:	bf38      	it	cc
 800613a:	250c      	movcc	r5, #12
 800613c:	2d00      	cmp	r5, #0
 800613e:	4606      	mov	r6, r0
 8006140:	db01      	blt.n	8006146 <_malloc_r+0x1a>
 8006142:	42a9      	cmp	r1, r5
 8006144:	d903      	bls.n	800614e <_malloc_r+0x22>
 8006146:	230c      	movs	r3, #12
 8006148:	6033      	str	r3, [r6, #0]
 800614a:	2000      	movs	r0, #0
 800614c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800614e:	f000 fa0f 	bl	8006570 <__malloc_lock>
 8006152:	4921      	ldr	r1, [pc, #132]	; (80061d8 <_malloc_r+0xac>)
 8006154:	680a      	ldr	r2, [r1, #0]
 8006156:	4614      	mov	r4, r2
 8006158:	b99c      	cbnz	r4, 8006182 <_malloc_r+0x56>
 800615a:	4f20      	ldr	r7, [pc, #128]	; (80061dc <_malloc_r+0xb0>)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	b923      	cbnz	r3, 800616a <_malloc_r+0x3e>
 8006160:	4621      	mov	r1, r4
 8006162:	4630      	mov	r0, r6
 8006164:	f000 f998 	bl	8006498 <_sbrk_r>
 8006168:	6038      	str	r0, [r7, #0]
 800616a:	4629      	mov	r1, r5
 800616c:	4630      	mov	r0, r6
 800616e:	f000 f993 	bl	8006498 <_sbrk_r>
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	d123      	bne.n	80061be <_malloc_r+0x92>
 8006176:	230c      	movs	r3, #12
 8006178:	4630      	mov	r0, r6
 800617a:	6033      	str	r3, [r6, #0]
 800617c:	f000 f9fe 	bl	800657c <__malloc_unlock>
 8006180:	e7e3      	b.n	800614a <_malloc_r+0x1e>
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	1b5b      	subs	r3, r3, r5
 8006186:	d417      	bmi.n	80061b8 <_malloc_r+0x8c>
 8006188:	2b0b      	cmp	r3, #11
 800618a:	d903      	bls.n	8006194 <_malloc_r+0x68>
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	441c      	add	r4, r3
 8006190:	6025      	str	r5, [r4, #0]
 8006192:	e004      	b.n	800619e <_malloc_r+0x72>
 8006194:	6863      	ldr	r3, [r4, #4]
 8006196:	42a2      	cmp	r2, r4
 8006198:	bf0c      	ite	eq
 800619a:	600b      	streq	r3, [r1, #0]
 800619c:	6053      	strne	r3, [r2, #4]
 800619e:	4630      	mov	r0, r6
 80061a0:	f000 f9ec 	bl	800657c <__malloc_unlock>
 80061a4:	f104 000b 	add.w	r0, r4, #11
 80061a8:	1d23      	adds	r3, r4, #4
 80061aa:	f020 0007 	bic.w	r0, r0, #7
 80061ae:	1ac2      	subs	r2, r0, r3
 80061b0:	d0cc      	beq.n	800614c <_malloc_r+0x20>
 80061b2:	1a1b      	subs	r3, r3, r0
 80061b4:	50a3      	str	r3, [r4, r2]
 80061b6:	e7c9      	b.n	800614c <_malloc_r+0x20>
 80061b8:	4622      	mov	r2, r4
 80061ba:	6864      	ldr	r4, [r4, #4]
 80061bc:	e7cc      	b.n	8006158 <_malloc_r+0x2c>
 80061be:	1cc4      	adds	r4, r0, #3
 80061c0:	f024 0403 	bic.w	r4, r4, #3
 80061c4:	42a0      	cmp	r0, r4
 80061c6:	d0e3      	beq.n	8006190 <_malloc_r+0x64>
 80061c8:	1a21      	subs	r1, r4, r0
 80061ca:	4630      	mov	r0, r6
 80061cc:	f000 f964 	bl	8006498 <_sbrk_r>
 80061d0:	3001      	adds	r0, #1
 80061d2:	d1dd      	bne.n	8006190 <_malloc_r+0x64>
 80061d4:	e7cf      	b.n	8006176 <_malloc_r+0x4a>
 80061d6:	bf00      	nop
 80061d8:	20000328 	.word	0x20000328
 80061dc:	2000032c 	.word	0x2000032c

080061e0 <__ssputs_r>:
 80061e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e4:	688e      	ldr	r6, [r1, #8]
 80061e6:	4682      	mov	sl, r0
 80061e8:	429e      	cmp	r6, r3
 80061ea:	460c      	mov	r4, r1
 80061ec:	4690      	mov	r8, r2
 80061ee:	461f      	mov	r7, r3
 80061f0:	d838      	bhi.n	8006264 <__ssputs_r+0x84>
 80061f2:	898a      	ldrh	r2, [r1, #12]
 80061f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061f8:	d032      	beq.n	8006260 <__ssputs_r+0x80>
 80061fa:	6825      	ldr	r5, [r4, #0]
 80061fc:	6909      	ldr	r1, [r1, #16]
 80061fe:	3301      	adds	r3, #1
 8006200:	eba5 0901 	sub.w	r9, r5, r1
 8006204:	6965      	ldr	r5, [r4, #20]
 8006206:	444b      	add	r3, r9
 8006208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800620c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006210:	106d      	asrs	r5, r5, #1
 8006212:	429d      	cmp	r5, r3
 8006214:	bf38      	it	cc
 8006216:	461d      	movcc	r5, r3
 8006218:	0553      	lsls	r3, r2, #21
 800621a:	d531      	bpl.n	8006280 <__ssputs_r+0xa0>
 800621c:	4629      	mov	r1, r5
 800621e:	f7ff ff85 	bl	800612c <_malloc_r>
 8006222:	4606      	mov	r6, r0
 8006224:	b950      	cbnz	r0, 800623c <__ssputs_r+0x5c>
 8006226:	230c      	movs	r3, #12
 8006228:	f04f 30ff 	mov.w	r0, #4294967295
 800622c:	f8ca 3000 	str.w	r3, [sl]
 8006230:	89a3      	ldrh	r3, [r4, #12]
 8006232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006236:	81a3      	strh	r3, [r4, #12]
 8006238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623c:	464a      	mov	r2, r9
 800623e:	6921      	ldr	r1, [r4, #16]
 8006240:	f7ff fb8a 	bl	8005958 <memcpy>
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800624a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800624e:	81a3      	strh	r3, [r4, #12]
 8006250:	6126      	str	r6, [r4, #16]
 8006252:	444e      	add	r6, r9
 8006254:	6026      	str	r6, [r4, #0]
 8006256:	463e      	mov	r6, r7
 8006258:	6165      	str	r5, [r4, #20]
 800625a:	eba5 0509 	sub.w	r5, r5, r9
 800625e:	60a5      	str	r5, [r4, #8]
 8006260:	42be      	cmp	r6, r7
 8006262:	d900      	bls.n	8006266 <__ssputs_r+0x86>
 8006264:	463e      	mov	r6, r7
 8006266:	4632      	mov	r2, r6
 8006268:	4641      	mov	r1, r8
 800626a:	6820      	ldr	r0, [r4, #0]
 800626c:	f000 f966 	bl	800653c <memmove>
 8006270:	68a3      	ldr	r3, [r4, #8]
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	1b9b      	subs	r3, r3, r6
 8006276:	4432      	add	r2, r6
 8006278:	2000      	movs	r0, #0
 800627a:	60a3      	str	r3, [r4, #8]
 800627c:	6022      	str	r2, [r4, #0]
 800627e:	e7db      	b.n	8006238 <__ssputs_r+0x58>
 8006280:	462a      	mov	r2, r5
 8006282:	f000 f981 	bl	8006588 <_realloc_r>
 8006286:	4606      	mov	r6, r0
 8006288:	2800      	cmp	r0, #0
 800628a:	d1e1      	bne.n	8006250 <__ssputs_r+0x70>
 800628c:	4650      	mov	r0, sl
 800628e:	6921      	ldr	r1, [r4, #16]
 8006290:	f7ff ff00 	bl	8006094 <_free_r>
 8006294:	e7c7      	b.n	8006226 <__ssputs_r+0x46>
	...

08006298 <_svfiprintf_r>:
 8006298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629c:	4698      	mov	r8, r3
 800629e:	898b      	ldrh	r3, [r1, #12]
 80062a0:	4607      	mov	r7, r0
 80062a2:	061b      	lsls	r3, r3, #24
 80062a4:	460d      	mov	r5, r1
 80062a6:	4614      	mov	r4, r2
 80062a8:	b09d      	sub	sp, #116	; 0x74
 80062aa:	d50e      	bpl.n	80062ca <_svfiprintf_r+0x32>
 80062ac:	690b      	ldr	r3, [r1, #16]
 80062ae:	b963      	cbnz	r3, 80062ca <_svfiprintf_r+0x32>
 80062b0:	2140      	movs	r1, #64	; 0x40
 80062b2:	f7ff ff3b 	bl	800612c <_malloc_r>
 80062b6:	6028      	str	r0, [r5, #0]
 80062b8:	6128      	str	r0, [r5, #16]
 80062ba:	b920      	cbnz	r0, 80062c6 <_svfiprintf_r+0x2e>
 80062bc:	230c      	movs	r3, #12
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	e0d1      	b.n	800646a <_svfiprintf_r+0x1d2>
 80062c6:	2340      	movs	r3, #64	; 0x40
 80062c8:	616b      	str	r3, [r5, #20]
 80062ca:	2300      	movs	r3, #0
 80062cc:	9309      	str	r3, [sp, #36]	; 0x24
 80062ce:	2320      	movs	r3, #32
 80062d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062d4:	2330      	movs	r3, #48	; 0x30
 80062d6:	f04f 0901 	mov.w	r9, #1
 80062da:	f8cd 800c 	str.w	r8, [sp, #12]
 80062de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006484 <_svfiprintf_r+0x1ec>
 80062e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062e6:	4623      	mov	r3, r4
 80062e8:	469a      	mov	sl, r3
 80062ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062ee:	b10a      	cbz	r2, 80062f4 <_svfiprintf_r+0x5c>
 80062f0:	2a25      	cmp	r2, #37	; 0x25
 80062f2:	d1f9      	bne.n	80062e8 <_svfiprintf_r+0x50>
 80062f4:	ebba 0b04 	subs.w	fp, sl, r4
 80062f8:	d00b      	beq.n	8006312 <_svfiprintf_r+0x7a>
 80062fa:	465b      	mov	r3, fp
 80062fc:	4622      	mov	r2, r4
 80062fe:	4629      	mov	r1, r5
 8006300:	4638      	mov	r0, r7
 8006302:	f7ff ff6d 	bl	80061e0 <__ssputs_r>
 8006306:	3001      	adds	r0, #1
 8006308:	f000 80aa 	beq.w	8006460 <_svfiprintf_r+0x1c8>
 800630c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800630e:	445a      	add	r2, fp
 8006310:	9209      	str	r2, [sp, #36]	; 0x24
 8006312:	f89a 3000 	ldrb.w	r3, [sl]
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 80a2 	beq.w	8006460 <_svfiprintf_r+0x1c8>
 800631c:	2300      	movs	r3, #0
 800631e:	f04f 32ff 	mov.w	r2, #4294967295
 8006322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006326:	f10a 0a01 	add.w	sl, sl, #1
 800632a:	9304      	str	r3, [sp, #16]
 800632c:	9307      	str	r3, [sp, #28]
 800632e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006332:	931a      	str	r3, [sp, #104]	; 0x68
 8006334:	4654      	mov	r4, sl
 8006336:	2205      	movs	r2, #5
 8006338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800633c:	4851      	ldr	r0, [pc, #324]	; (8006484 <_svfiprintf_r+0x1ec>)
 800633e:	f7ff fafd 	bl	800593c <memchr>
 8006342:	9a04      	ldr	r2, [sp, #16]
 8006344:	b9d8      	cbnz	r0, 800637e <_svfiprintf_r+0xe6>
 8006346:	06d0      	lsls	r0, r2, #27
 8006348:	bf44      	itt	mi
 800634a:	2320      	movmi	r3, #32
 800634c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006350:	0711      	lsls	r1, r2, #28
 8006352:	bf44      	itt	mi
 8006354:	232b      	movmi	r3, #43	; 0x2b
 8006356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800635a:	f89a 3000 	ldrb.w	r3, [sl]
 800635e:	2b2a      	cmp	r3, #42	; 0x2a
 8006360:	d015      	beq.n	800638e <_svfiprintf_r+0xf6>
 8006362:	4654      	mov	r4, sl
 8006364:	2000      	movs	r0, #0
 8006366:	f04f 0c0a 	mov.w	ip, #10
 800636a:	9a07      	ldr	r2, [sp, #28]
 800636c:	4621      	mov	r1, r4
 800636e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006372:	3b30      	subs	r3, #48	; 0x30
 8006374:	2b09      	cmp	r3, #9
 8006376:	d94e      	bls.n	8006416 <_svfiprintf_r+0x17e>
 8006378:	b1b0      	cbz	r0, 80063a8 <_svfiprintf_r+0x110>
 800637a:	9207      	str	r2, [sp, #28]
 800637c:	e014      	b.n	80063a8 <_svfiprintf_r+0x110>
 800637e:	eba0 0308 	sub.w	r3, r0, r8
 8006382:	fa09 f303 	lsl.w	r3, r9, r3
 8006386:	4313      	orrs	r3, r2
 8006388:	46a2      	mov	sl, r4
 800638a:	9304      	str	r3, [sp, #16]
 800638c:	e7d2      	b.n	8006334 <_svfiprintf_r+0x9c>
 800638e:	9b03      	ldr	r3, [sp, #12]
 8006390:	1d19      	adds	r1, r3, #4
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	9103      	str	r1, [sp, #12]
 8006396:	2b00      	cmp	r3, #0
 8006398:	bfbb      	ittet	lt
 800639a:	425b      	neglt	r3, r3
 800639c:	f042 0202 	orrlt.w	r2, r2, #2
 80063a0:	9307      	strge	r3, [sp, #28]
 80063a2:	9307      	strlt	r3, [sp, #28]
 80063a4:	bfb8      	it	lt
 80063a6:	9204      	strlt	r2, [sp, #16]
 80063a8:	7823      	ldrb	r3, [r4, #0]
 80063aa:	2b2e      	cmp	r3, #46	; 0x2e
 80063ac:	d10c      	bne.n	80063c8 <_svfiprintf_r+0x130>
 80063ae:	7863      	ldrb	r3, [r4, #1]
 80063b0:	2b2a      	cmp	r3, #42	; 0x2a
 80063b2:	d135      	bne.n	8006420 <_svfiprintf_r+0x188>
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	3402      	adds	r4, #2
 80063b8:	1d1a      	adds	r2, r3, #4
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	9203      	str	r2, [sp, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	bfb8      	it	lt
 80063c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80063c6:	9305      	str	r3, [sp, #20]
 80063c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006494 <_svfiprintf_r+0x1fc>
 80063cc:	2203      	movs	r2, #3
 80063ce:	4650      	mov	r0, sl
 80063d0:	7821      	ldrb	r1, [r4, #0]
 80063d2:	f7ff fab3 	bl	800593c <memchr>
 80063d6:	b140      	cbz	r0, 80063ea <_svfiprintf_r+0x152>
 80063d8:	2340      	movs	r3, #64	; 0x40
 80063da:	eba0 000a 	sub.w	r0, r0, sl
 80063de:	fa03 f000 	lsl.w	r0, r3, r0
 80063e2:	9b04      	ldr	r3, [sp, #16]
 80063e4:	3401      	adds	r4, #1
 80063e6:	4303      	orrs	r3, r0
 80063e8:	9304      	str	r3, [sp, #16]
 80063ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ee:	2206      	movs	r2, #6
 80063f0:	4825      	ldr	r0, [pc, #148]	; (8006488 <_svfiprintf_r+0x1f0>)
 80063f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063f6:	f7ff faa1 	bl	800593c <memchr>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d038      	beq.n	8006470 <_svfiprintf_r+0x1d8>
 80063fe:	4b23      	ldr	r3, [pc, #140]	; (800648c <_svfiprintf_r+0x1f4>)
 8006400:	bb1b      	cbnz	r3, 800644a <_svfiprintf_r+0x1b2>
 8006402:	9b03      	ldr	r3, [sp, #12]
 8006404:	3307      	adds	r3, #7
 8006406:	f023 0307 	bic.w	r3, r3, #7
 800640a:	3308      	adds	r3, #8
 800640c:	9303      	str	r3, [sp, #12]
 800640e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006410:	4433      	add	r3, r6
 8006412:	9309      	str	r3, [sp, #36]	; 0x24
 8006414:	e767      	b.n	80062e6 <_svfiprintf_r+0x4e>
 8006416:	460c      	mov	r4, r1
 8006418:	2001      	movs	r0, #1
 800641a:	fb0c 3202 	mla	r2, ip, r2, r3
 800641e:	e7a5      	b.n	800636c <_svfiprintf_r+0xd4>
 8006420:	2300      	movs	r3, #0
 8006422:	f04f 0c0a 	mov.w	ip, #10
 8006426:	4619      	mov	r1, r3
 8006428:	3401      	adds	r4, #1
 800642a:	9305      	str	r3, [sp, #20]
 800642c:	4620      	mov	r0, r4
 800642e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006432:	3a30      	subs	r2, #48	; 0x30
 8006434:	2a09      	cmp	r2, #9
 8006436:	d903      	bls.n	8006440 <_svfiprintf_r+0x1a8>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0c5      	beq.n	80063c8 <_svfiprintf_r+0x130>
 800643c:	9105      	str	r1, [sp, #20]
 800643e:	e7c3      	b.n	80063c8 <_svfiprintf_r+0x130>
 8006440:	4604      	mov	r4, r0
 8006442:	2301      	movs	r3, #1
 8006444:	fb0c 2101 	mla	r1, ip, r1, r2
 8006448:	e7f0      	b.n	800642c <_svfiprintf_r+0x194>
 800644a:	ab03      	add	r3, sp, #12
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	462a      	mov	r2, r5
 8006450:	4638      	mov	r0, r7
 8006452:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <_svfiprintf_r+0x1f8>)
 8006454:	a904      	add	r1, sp, #16
 8006456:	f7fe f805 	bl	8004464 <_printf_float>
 800645a:	1c42      	adds	r2, r0, #1
 800645c:	4606      	mov	r6, r0
 800645e:	d1d6      	bne.n	800640e <_svfiprintf_r+0x176>
 8006460:	89ab      	ldrh	r3, [r5, #12]
 8006462:	065b      	lsls	r3, r3, #25
 8006464:	f53f af2c 	bmi.w	80062c0 <_svfiprintf_r+0x28>
 8006468:	9809      	ldr	r0, [sp, #36]	; 0x24
 800646a:	b01d      	add	sp, #116	; 0x74
 800646c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006470:	ab03      	add	r3, sp, #12
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	462a      	mov	r2, r5
 8006476:	4638      	mov	r0, r7
 8006478:	4b05      	ldr	r3, [pc, #20]	; (8006490 <_svfiprintf_r+0x1f8>)
 800647a:	a904      	add	r1, sp, #16
 800647c:	f7fe fa8e 	bl	800499c <_printf_i>
 8006480:	e7eb      	b.n	800645a <_svfiprintf_r+0x1c2>
 8006482:	bf00      	nop
 8006484:	080072ec 	.word	0x080072ec
 8006488:	080072f6 	.word	0x080072f6
 800648c:	08004465 	.word	0x08004465
 8006490:	080061e1 	.word	0x080061e1
 8006494:	080072f2 	.word	0x080072f2

08006498 <_sbrk_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	2300      	movs	r3, #0
 800649c:	4d05      	ldr	r5, [pc, #20]	; (80064b4 <_sbrk_r+0x1c>)
 800649e:	4604      	mov	r4, r0
 80064a0:	4608      	mov	r0, r1
 80064a2:	602b      	str	r3, [r5, #0]
 80064a4:	f7fb fe3a 	bl	800211c <_sbrk>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_sbrk_r+0x1a>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_sbrk_r+0x1a>
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	200005b0 	.word	0x200005b0

080064b8 <__assert_func>:
 80064b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064ba:	4614      	mov	r4, r2
 80064bc:	461a      	mov	r2, r3
 80064be:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <__assert_func+0x2c>)
 80064c0:	4605      	mov	r5, r0
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68d8      	ldr	r0, [r3, #12]
 80064c6:	b14c      	cbz	r4, 80064dc <__assert_func+0x24>
 80064c8:	4b07      	ldr	r3, [pc, #28]	; (80064e8 <__assert_func+0x30>)
 80064ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064ce:	9100      	str	r1, [sp, #0]
 80064d0:	462b      	mov	r3, r5
 80064d2:	4906      	ldr	r1, [pc, #24]	; (80064ec <__assert_func+0x34>)
 80064d4:	f000 f80e 	bl	80064f4 <fiprintf>
 80064d8:	f000 faa2 	bl	8006a20 <abort>
 80064dc:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <__assert_func+0x38>)
 80064de:	461c      	mov	r4, r3
 80064e0:	e7f3      	b.n	80064ca <__assert_func+0x12>
 80064e2:	bf00      	nop
 80064e4:	2000012c 	.word	0x2000012c
 80064e8:	080072fd 	.word	0x080072fd
 80064ec:	0800730a 	.word	0x0800730a
 80064f0:	08007338 	.word	0x08007338

080064f4 <fiprintf>:
 80064f4:	b40e      	push	{r1, r2, r3}
 80064f6:	b503      	push	{r0, r1, lr}
 80064f8:	4601      	mov	r1, r0
 80064fa:	ab03      	add	r3, sp, #12
 80064fc:	4805      	ldr	r0, [pc, #20]	; (8006514 <fiprintf+0x20>)
 80064fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006502:	6800      	ldr	r0, [r0, #0]
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	f000 f88d 	bl	8006624 <_vfiprintf_r>
 800650a:	b002      	add	sp, #8
 800650c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006510:	b003      	add	sp, #12
 8006512:	4770      	bx	lr
 8006514:	2000012c 	.word	0x2000012c

08006518 <__ascii_mbtowc>:
 8006518:	b082      	sub	sp, #8
 800651a:	b901      	cbnz	r1, 800651e <__ascii_mbtowc+0x6>
 800651c:	a901      	add	r1, sp, #4
 800651e:	b142      	cbz	r2, 8006532 <__ascii_mbtowc+0x1a>
 8006520:	b14b      	cbz	r3, 8006536 <__ascii_mbtowc+0x1e>
 8006522:	7813      	ldrb	r3, [r2, #0]
 8006524:	600b      	str	r3, [r1, #0]
 8006526:	7812      	ldrb	r2, [r2, #0]
 8006528:	1e10      	subs	r0, r2, #0
 800652a:	bf18      	it	ne
 800652c:	2001      	movne	r0, #1
 800652e:	b002      	add	sp, #8
 8006530:	4770      	bx	lr
 8006532:	4610      	mov	r0, r2
 8006534:	e7fb      	b.n	800652e <__ascii_mbtowc+0x16>
 8006536:	f06f 0001 	mvn.w	r0, #1
 800653a:	e7f8      	b.n	800652e <__ascii_mbtowc+0x16>

0800653c <memmove>:
 800653c:	4288      	cmp	r0, r1
 800653e:	b510      	push	{r4, lr}
 8006540:	eb01 0402 	add.w	r4, r1, r2
 8006544:	d902      	bls.n	800654c <memmove+0x10>
 8006546:	4284      	cmp	r4, r0
 8006548:	4623      	mov	r3, r4
 800654a:	d807      	bhi.n	800655c <memmove+0x20>
 800654c:	1e43      	subs	r3, r0, #1
 800654e:	42a1      	cmp	r1, r4
 8006550:	d008      	beq.n	8006564 <memmove+0x28>
 8006552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800655a:	e7f8      	b.n	800654e <memmove+0x12>
 800655c:	4601      	mov	r1, r0
 800655e:	4402      	add	r2, r0
 8006560:	428a      	cmp	r2, r1
 8006562:	d100      	bne.n	8006566 <memmove+0x2a>
 8006564:	bd10      	pop	{r4, pc}
 8006566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800656a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800656e:	e7f7      	b.n	8006560 <memmove+0x24>

08006570 <__malloc_lock>:
 8006570:	4801      	ldr	r0, [pc, #4]	; (8006578 <__malloc_lock+0x8>)
 8006572:	f000 bc15 	b.w	8006da0 <__retarget_lock_acquire_recursive>
 8006576:	bf00      	nop
 8006578:	200005b8 	.word	0x200005b8

0800657c <__malloc_unlock>:
 800657c:	4801      	ldr	r0, [pc, #4]	; (8006584 <__malloc_unlock+0x8>)
 800657e:	f000 bc10 	b.w	8006da2 <__retarget_lock_release_recursive>
 8006582:	bf00      	nop
 8006584:	200005b8 	.word	0x200005b8

08006588 <_realloc_r>:
 8006588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658a:	4607      	mov	r7, r0
 800658c:	4614      	mov	r4, r2
 800658e:	460e      	mov	r6, r1
 8006590:	b921      	cbnz	r1, 800659c <_realloc_r+0x14>
 8006592:	4611      	mov	r1, r2
 8006594:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006598:	f7ff bdc8 	b.w	800612c <_malloc_r>
 800659c:	b922      	cbnz	r2, 80065a8 <_realloc_r+0x20>
 800659e:	f7ff fd79 	bl	8006094 <_free_r>
 80065a2:	4625      	mov	r5, r4
 80065a4:	4628      	mov	r0, r5
 80065a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065a8:	f000 fc60 	bl	8006e6c <_malloc_usable_size_r>
 80065ac:	42a0      	cmp	r0, r4
 80065ae:	d20f      	bcs.n	80065d0 <_realloc_r+0x48>
 80065b0:	4621      	mov	r1, r4
 80065b2:	4638      	mov	r0, r7
 80065b4:	f7ff fdba 	bl	800612c <_malloc_r>
 80065b8:	4605      	mov	r5, r0
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d0f2      	beq.n	80065a4 <_realloc_r+0x1c>
 80065be:	4631      	mov	r1, r6
 80065c0:	4622      	mov	r2, r4
 80065c2:	f7ff f9c9 	bl	8005958 <memcpy>
 80065c6:	4631      	mov	r1, r6
 80065c8:	4638      	mov	r0, r7
 80065ca:	f7ff fd63 	bl	8006094 <_free_r>
 80065ce:	e7e9      	b.n	80065a4 <_realloc_r+0x1c>
 80065d0:	4635      	mov	r5, r6
 80065d2:	e7e7      	b.n	80065a4 <_realloc_r+0x1c>

080065d4 <__sfputc_r>:
 80065d4:	6893      	ldr	r3, [r2, #8]
 80065d6:	b410      	push	{r4}
 80065d8:	3b01      	subs	r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	6093      	str	r3, [r2, #8]
 80065de:	da07      	bge.n	80065f0 <__sfputc_r+0x1c>
 80065e0:	6994      	ldr	r4, [r2, #24]
 80065e2:	42a3      	cmp	r3, r4
 80065e4:	db01      	blt.n	80065ea <__sfputc_r+0x16>
 80065e6:	290a      	cmp	r1, #10
 80065e8:	d102      	bne.n	80065f0 <__sfputc_r+0x1c>
 80065ea:	bc10      	pop	{r4}
 80065ec:	f000 b94a 	b.w	8006884 <__swbuf_r>
 80065f0:	6813      	ldr	r3, [r2, #0]
 80065f2:	1c58      	adds	r0, r3, #1
 80065f4:	6010      	str	r0, [r2, #0]
 80065f6:	7019      	strb	r1, [r3, #0]
 80065f8:	4608      	mov	r0, r1
 80065fa:	bc10      	pop	{r4}
 80065fc:	4770      	bx	lr

080065fe <__sfputs_r>:
 80065fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006600:	4606      	mov	r6, r0
 8006602:	460f      	mov	r7, r1
 8006604:	4614      	mov	r4, r2
 8006606:	18d5      	adds	r5, r2, r3
 8006608:	42ac      	cmp	r4, r5
 800660a:	d101      	bne.n	8006610 <__sfputs_r+0x12>
 800660c:	2000      	movs	r0, #0
 800660e:	e007      	b.n	8006620 <__sfputs_r+0x22>
 8006610:	463a      	mov	r2, r7
 8006612:	4630      	mov	r0, r6
 8006614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006618:	f7ff ffdc 	bl	80065d4 <__sfputc_r>
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	d1f3      	bne.n	8006608 <__sfputs_r+0xa>
 8006620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006624 <_vfiprintf_r>:
 8006624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	460d      	mov	r5, r1
 800662a:	4614      	mov	r4, r2
 800662c:	4698      	mov	r8, r3
 800662e:	4606      	mov	r6, r0
 8006630:	b09d      	sub	sp, #116	; 0x74
 8006632:	b118      	cbz	r0, 800663c <_vfiprintf_r+0x18>
 8006634:	6983      	ldr	r3, [r0, #24]
 8006636:	b90b      	cbnz	r3, 800663c <_vfiprintf_r+0x18>
 8006638:	f000 fb14 	bl	8006c64 <__sinit>
 800663c:	4b89      	ldr	r3, [pc, #548]	; (8006864 <_vfiprintf_r+0x240>)
 800663e:	429d      	cmp	r5, r3
 8006640:	d11b      	bne.n	800667a <_vfiprintf_r+0x56>
 8006642:	6875      	ldr	r5, [r6, #4]
 8006644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006646:	07d9      	lsls	r1, r3, #31
 8006648:	d405      	bmi.n	8006656 <_vfiprintf_r+0x32>
 800664a:	89ab      	ldrh	r3, [r5, #12]
 800664c:	059a      	lsls	r2, r3, #22
 800664e:	d402      	bmi.n	8006656 <_vfiprintf_r+0x32>
 8006650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006652:	f000 fba5 	bl	8006da0 <__retarget_lock_acquire_recursive>
 8006656:	89ab      	ldrh	r3, [r5, #12]
 8006658:	071b      	lsls	r3, r3, #28
 800665a:	d501      	bpl.n	8006660 <_vfiprintf_r+0x3c>
 800665c:	692b      	ldr	r3, [r5, #16]
 800665e:	b9eb      	cbnz	r3, 800669c <_vfiprintf_r+0x78>
 8006660:	4629      	mov	r1, r5
 8006662:	4630      	mov	r0, r6
 8006664:	f000 f96e 	bl	8006944 <__swsetup_r>
 8006668:	b1c0      	cbz	r0, 800669c <_vfiprintf_r+0x78>
 800666a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800666c:	07dc      	lsls	r4, r3, #31
 800666e:	d50e      	bpl.n	800668e <_vfiprintf_r+0x6a>
 8006670:	f04f 30ff 	mov.w	r0, #4294967295
 8006674:	b01d      	add	sp, #116	; 0x74
 8006676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667a:	4b7b      	ldr	r3, [pc, #492]	; (8006868 <_vfiprintf_r+0x244>)
 800667c:	429d      	cmp	r5, r3
 800667e:	d101      	bne.n	8006684 <_vfiprintf_r+0x60>
 8006680:	68b5      	ldr	r5, [r6, #8]
 8006682:	e7df      	b.n	8006644 <_vfiprintf_r+0x20>
 8006684:	4b79      	ldr	r3, [pc, #484]	; (800686c <_vfiprintf_r+0x248>)
 8006686:	429d      	cmp	r5, r3
 8006688:	bf08      	it	eq
 800668a:	68f5      	ldreq	r5, [r6, #12]
 800668c:	e7da      	b.n	8006644 <_vfiprintf_r+0x20>
 800668e:	89ab      	ldrh	r3, [r5, #12]
 8006690:	0598      	lsls	r0, r3, #22
 8006692:	d4ed      	bmi.n	8006670 <_vfiprintf_r+0x4c>
 8006694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006696:	f000 fb84 	bl	8006da2 <__retarget_lock_release_recursive>
 800669a:	e7e9      	b.n	8006670 <_vfiprintf_r+0x4c>
 800669c:	2300      	movs	r3, #0
 800669e:	9309      	str	r3, [sp, #36]	; 0x24
 80066a0:	2320      	movs	r3, #32
 80066a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066a6:	2330      	movs	r3, #48	; 0x30
 80066a8:	f04f 0901 	mov.w	r9, #1
 80066ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80066b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006870 <_vfiprintf_r+0x24c>
 80066b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066b8:	4623      	mov	r3, r4
 80066ba:	469a      	mov	sl, r3
 80066bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066c0:	b10a      	cbz	r2, 80066c6 <_vfiprintf_r+0xa2>
 80066c2:	2a25      	cmp	r2, #37	; 0x25
 80066c4:	d1f9      	bne.n	80066ba <_vfiprintf_r+0x96>
 80066c6:	ebba 0b04 	subs.w	fp, sl, r4
 80066ca:	d00b      	beq.n	80066e4 <_vfiprintf_r+0xc0>
 80066cc:	465b      	mov	r3, fp
 80066ce:	4622      	mov	r2, r4
 80066d0:	4629      	mov	r1, r5
 80066d2:	4630      	mov	r0, r6
 80066d4:	f7ff ff93 	bl	80065fe <__sfputs_r>
 80066d8:	3001      	adds	r0, #1
 80066da:	f000 80aa 	beq.w	8006832 <_vfiprintf_r+0x20e>
 80066de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e0:	445a      	add	r2, fp
 80066e2:	9209      	str	r2, [sp, #36]	; 0x24
 80066e4:	f89a 3000 	ldrb.w	r3, [sl]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80a2 	beq.w	8006832 <_vfiprintf_r+0x20e>
 80066ee:	2300      	movs	r3, #0
 80066f0:	f04f 32ff 	mov.w	r2, #4294967295
 80066f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066f8:	f10a 0a01 	add.w	sl, sl, #1
 80066fc:	9304      	str	r3, [sp, #16]
 80066fe:	9307      	str	r3, [sp, #28]
 8006700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006704:	931a      	str	r3, [sp, #104]	; 0x68
 8006706:	4654      	mov	r4, sl
 8006708:	2205      	movs	r2, #5
 800670a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800670e:	4858      	ldr	r0, [pc, #352]	; (8006870 <_vfiprintf_r+0x24c>)
 8006710:	f7ff f914 	bl	800593c <memchr>
 8006714:	9a04      	ldr	r2, [sp, #16]
 8006716:	b9d8      	cbnz	r0, 8006750 <_vfiprintf_r+0x12c>
 8006718:	06d1      	lsls	r1, r2, #27
 800671a:	bf44      	itt	mi
 800671c:	2320      	movmi	r3, #32
 800671e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006722:	0713      	lsls	r3, r2, #28
 8006724:	bf44      	itt	mi
 8006726:	232b      	movmi	r3, #43	; 0x2b
 8006728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800672c:	f89a 3000 	ldrb.w	r3, [sl]
 8006730:	2b2a      	cmp	r3, #42	; 0x2a
 8006732:	d015      	beq.n	8006760 <_vfiprintf_r+0x13c>
 8006734:	4654      	mov	r4, sl
 8006736:	2000      	movs	r0, #0
 8006738:	f04f 0c0a 	mov.w	ip, #10
 800673c:	9a07      	ldr	r2, [sp, #28]
 800673e:	4621      	mov	r1, r4
 8006740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006744:	3b30      	subs	r3, #48	; 0x30
 8006746:	2b09      	cmp	r3, #9
 8006748:	d94e      	bls.n	80067e8 <_vfiprintf_r+0x1c4>
 800674a:	b1b0      	cbz	r0, 800677a <_vfiprintf_r+0x156>
 800674c:	9207      	str	r2, [sp, #28]
 800674e:	e014      	b.n	800677a <_vfiprintf_r+0x156>
 8006750:	eba0 0308 	sub.w	r3, r0, r8
 8006754:	fa09 f303 	lsl.w	r3, r9, r3
 8006758:	4313      	orrs	r3, r2
 800675a:	46a2      	mov	sl, r4
 800675c:	9304      	str	r3, [sp, #16]
 800675e:	e7d2      	b.n	8006706 <_vfiprintf_r+0xe2>
 8006760:	9b03      	ldr	r3, [sp, #12]
 8006762:	1d19      	adds	r1, r3, #4
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	9103      	str	r1, [sp, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	bfbb      	ittet	lt
 800676c:	425b      	neglt	r3, r3
 800676e:	f042 0202 	orrlt.w	r2, r2, #2
 8006772:	9307      	strge	r3, [sp, #28]
 8006774:	9307      	strlt	r3, [sp, #28]
 8006776:	bfb8      	it	lt
 8006778:	9204      	strlt	r2, [sp, #16]
 800677a:	7823      	ldrb	r3, [r4, #0]
 800677c:	2b2e      	cmp	r3, #46	; 0x2e
 800677e:	d10c      	bne.n	800679a <_vfiprintf_r+0x176>
 8006780:	7863      	ldrb	r3, [r4, #1]
 8006782:	2b2a      	cmp	r3, #42	; 0x2a
 8006784:	d135      	bne.n	80067f2 <_vfiprintf_r+0x1ce>
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	3402      	adds	r4, #2
 800678a:	1d1a      	adds	r2, r3, #4
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	9203      	str	r2, [sp, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	bfb8      	it	lt
 8006794:	f04f 33ff 	movlt.w	r3, #4294967295
 8006798:	9305      	str	r3, [sp, #20]
 800679a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006880 <_vfiprintf_r+0x25c>
 800679e:	2203      	movs	r2, #3
 80067a0:	4650      	mov	r0, sl
 80067a2:	7821      	ldrb	r1, [r4, #0]
 80067a4:	f7ff f8ca 	bl	800593c <memchr>
 80067a8:	b140      	cbz	r0, 80067bc <_vfiprintf_r+0x198>
 80067aa:	2340      	movs	r3, #64	; 0x40
 80067ac:	eba0 000a 	sub.w	r0, r0, sl
 80067b0:	fa03 f000 	lsl.w	r0, r3, r0
 80067b4:	9b04      	ldr	r3, [sp, #16]
 80067b6:	3401      	adds	r4, #1
 80067b8:	4303      	orrs	r3, r0
 80067ba:	9304      	str	r3, [sp, #16]
 80067bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c0:	2206      	movs	r2, #6
 80067c2:	482c      	ldr	r0, [pc, #176]	; (8006874 <_vfiprintf_r+0x250>)
 80067c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067c8:	f7ff f8b8 	bl	800593c <memchr>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d03f      	beq.n	8006850 <_vfiprintf_r+0x22c>
 80067d0:	4b29      	ldr	r3, [pc, #164]	; (8006878 <_vfiprintf_r+0x254>)
 80067d2:	bb1b      	cbnz	r3, 800681c <_vfiprintf_r+0x1f8>
 80067d4:	9b03      	ldr	r3, [sp, #12]
 80067d6:	3307      	adds	r3, #7
 80067d8:	f023 0307 	bic.w	r3, r3, #7
 80067dc:	3308      	adds	r3, #8
 80067de:	9303      	str	r3, [sp, #12]
 80067e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e2:	443b      	add	r3, r7
 80067e4:	9309      	str	r3, [sp, #36]	; 0x24
 80067e6:	e767      	b.n	80066b8 <_vfiprintf_r+0x94>
 80067e8:	460c      	mov	r4, r1
 80067ea:	2001      	movs	r0, #1
 80067ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80067f0:	e7a5      	b.n	800673e <_vfiprintf_r+0x11a>
 80067f2:	2300      	movs	r3, #0
 80067f4:	f04f 0c0a 	mov.w	ip, #10
 80067f8:	4619      	mov	r1, r3
 80067fa:	3401      	adds	r4, #1
 80067fc:	9305      	str	r3, [sp, #20]
 80067fe:	4620      	mov	r0, r4
 8006800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006804:	3a30      	subs	r2, #48	; 0x30
 8006806:	2a09      	cmp	r2, #9
 8006808:	d903      	bls.n	8006812 <_vfiprintf_r+0x1ee>
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0c5      	beq.n	800679a <_vfiprintf_r+0x176>
 800680e:	9105      	str	r1, [sp, #20]
 8006810:	e7c3      	b.n	800679a <_vfiprintf_r+0x176>
 8006812:	4604      	mov	r4, r0
 8006814:	2301      	movs	r3, #1
 8006816:	fb0c 2101 	mla	r1, ip, r1, r2
 800681a:	e7f0      	b.n	80067fe <_vfiprintf_r+0x1da>
 800681c:	ab03      	add	r3, sp, #12
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	462a      	mov	r2, r5
 8006822:	4630      	mov	r0, r6
 8006824:	4b15      	ldr	r3, [pc, #84]	; (800687c <_vfiprintf_r+0x258>)
 8006826:	a904      	add	r1, sp, #16
 8006828:	f7fd fe1c 	bl	8004464 <_printf_float>
 800682c:	4607      	mov	r7, r0
 800682e:	1c78      	adds	r0, r7, #1
 8006830:	d1d6      	bne.n	80067e0 <_vfiprintf_r+0x1bc>
 8006832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006834:	07d9      	lsls	r1, r3, #31
 8006836:	d405      	bmi.n	8006844 <_vfiprintf_r+0x220>
 8006838:	89ab      	ldrh	r3, [r5, #12]
 800683a:	059a      	lsls	r2, r3, #22
 800683c:	d402      	bmi.n	8006844 <_vfiprintf_r+0x220>
 800683e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006840:	f000 faaf 	bl	8006da2 <__retarget_lock_release_recursive>
 8006844:	89ab      	ldrh	r3, [r5, #12]
 8006846:	065b      	lsls	r3, r3, #25
 8006848:	f53f af12 	bmi.w	8006670 <_vfiprintf_r+0x4c>
 800684c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800684e:	e711      	b.n	8006674 <_vfiprintf_r+0x50>
 8006850:	ab03      	add	r3, sp, #12
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	462a      	mov	r2, r5
 8006856:	4630      	mov	r0, r6
 8006858:	4b08      	ldr	r3, [pc, #32]	; (800687c <_vfiprintf_r+0x258>)
 800685a:	a904      	add	r1, sp, #16
 800685c:	f7fe f89e 	bl	800499c <_printf_i>
 8006860:	e7e4      	b.n	800682c <_vfiprintf_r+0x208>
 8006862:	bf00      	nop
 8006864:	08007464 	.word	0x08007464
 8006868:	08007484 	.word	0x08007484
 800686c:	08007444 	.word	0x08007444
 8006870:	080072ec 	.word	0x080072ec
 8006874:	080072f6 	.word	0x080072f6
 8006878:	08004465 	.word	0x08004465
 800687c:	080065ff 	.word	0x080065ff
 8006880:	080072f2 	.word	0x080072f2

08006884 <__swbuf_r>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	460e      	mov	r6, r1
 8006888:	4614      	mov	r4, r2
 800688a:	4605      	mov	r5, r0
 800688c:	b118      	cbz	r0, 8006896 <__swbuf_r+0x12>
 800688e:	6983      	ldr	r3, [r0, #24]
 8006890:	b90b      	cbnz	r3, 8006896 <__swbuf_r+0x12>
 8006892:	f000 f9e7 	bl	8006c64 <__sinit>
 8006896:	4b21      	ldr	r3, [pc, #132]	; (800691c <__swbuf_r+0x98>)
 8006898:	429c      	cmp	r4, r3
 800689a:	d12b      	bne.n	80068f4 <__swbuf_r+0x70>
 800689c:	686c      	ldr	r4, [r5, #4]
 800689e:	69a3      	ldr	r3, [r4, #24]
 80068a0:	60a3      	str	r3, [r4, #8]
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	071a      	lsls	r2, r3, #28
 80068a6:	d52f      	bpl.n	8006908 <__swbuf_r+0x84>
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	b36b      	cbz	r3, 8006908 <__swbuf_r+0x84>
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	6820      	ldr	r0, [r4, #0]
 80068b0:	b2f6      	uxtb	r6, r6
 80068b2:	1ac0      	subs	r0, r0, r3
 80068b4:	6963      	ldr	r3, [r4, #20]
 80068b6:	4637      	mov	r7, r6
 80068b8:	4283      	cmp	r3, r0
 80068ba:	dc04      	bgt.n	80068c6 <__swbuf_r+0x42>
 80068bc:	4621      	mov	r1, r4
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 f93c 	bl	8006b3c <_fflush_r>
 80068c4:	bb30      	cbnz	r0, 8006914 <__swbuf_r+0x90>
 80068c6:	68a3      	ldr	r3, [r4, #8]
 80068c8:	3001      	adds	r0, #1
 80068ca:	3b01      	subs	r3, #1
 80068cc:	60a3      	str	r3, [r4, #8]
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	6022      	str	r2, [r4, #0]
 80068d4:	701e      	strb	r6, [r3, #0]
 80068d6:	6963      	ldr	r3, [r4, #20]
 80068d8:	4283      	cmp	r3, r0
 80068da:	d004      	beq.n	80068e6 <__swbuf_r+0x62>
 80068dc:	89a3      	ldrh	r3, [r4, #12]
 80068de:	07db      	lsls	r3, r3, #31
 80068e0:	d506      	bpl.n	80068f0 <__swbuf_r+0x6c>
 80068e2:	2e0a      	cmp	r6, #10
 80068e4:	d104      	bne.n	80068f0 <__swbuf_r+0x6c>
 80068e6:	4621      	mov	r1, r4
 80068e8:	4628      	mov	r0, r5
 80068ea:	f000 f927 	bl	8006b3c <_fflush_r>
 80068ee:	b988      	cbnz	r0, 8006914 <__swbuf_r+0x90>
 80068f0:	4638      	mov	r0, r7
 80068f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068f4:	4b0a      	ldr	r3, [pc, #40]	; (8006920 <__swbuf_r+0x9c>)
 80068f6:	429c      	cmp	r4, r3
 80068f8:	d101      	bne.n	80068fe <__swbuf_r+0x7a>
 80068fa:	68ac      	ldr	r4, [r5, #8]
 80068fc:	e7cf      	b.n	800689e <__swbuf_r+0x1a>
 80068fe:	4b09      	ldr	r3, [pc, #36]	; (8006924 <__swbuf_r+0xa0>)
 8006900:	429c      	cmp	r4, r3
 8006902:	bf08      	it	eq
 8006904:	68ec      	ldreq	r4, [r5, #12]
 8006906:	e7ca      	b.n	800689e <__swbuf_r+0x1a>
 8006908:	4621      	mov	r1, r4
 800690a:	4628      	mov	r0, r5
 800690c:	f000 f81a 	bl	8006944 <__swsetup_r>
 8006910:	2800      	cmp	r0, #0
 8006912:	d0cb      	beq.n	80068ac <__swbuf_r+0x28>
 8006914:	f04f 37ff 	mov.w	r7, #4294967295
 8006918:	e7ea      	b.n	80068f0 <__swbuf_r+0x6c>
 800691a:	bf00      	nop
 800691c:	08007464 	.word	0x08007464
 8006920:	08007484 	.word	0x08007484
 8006924:	08007444 	.word	0x08007444

08006928 <__ascii_wctomb>:
 8006928:	4603      	mov	r3, r0
 800692a:	4608      	mov	r0, r1
 800692c:	b141      	cbz	r1, 8006940 <__ascii_wctomb+0x18>
 800692e:	2aff      	cmp	r2, #255	; 0xff
 8006930:	d904      	bls.n	800693c <__ascii_wctomb+0x14>
 8006932:	228a      	movs	r2, #138	; 0x8a
 8006934:	f04f 30ff 	mov.w	r0, #4294967295
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	4770      	bx	lr
 800693c:	2001      	movs	r0, #1
 800693e:	700a      	strb	r2, [r1, #0]
 8006940:	4770      	bx	lr
	...

08006944 <__swsetup_r>:
 8006944:	4b32      	ldr	r3, [pc, #200]	; (8006a10 <__swsetup_r+0xcc>)
 8006946:	b570      	push	{r4, r5, r6, lr}
 8006948:	681d      	ldr	r5, [r3, #0]
 800694a:	4606      	mov	r6, r0
 800694c:	460c      	mov	r4, r1
 800694e:	b125      	cbz	r5, 800695a <__swsetup_r+0x16>
 8006950:	69ab      	ldr	r3, [r5, #24]
 8006952:	b913      	cbnz	r3, 800695a <__swsetup_r+0x16>
 8006954:	4628      	mov	r0, r5
 8006956:	f000 f985 	bl	8006c64 <__sinit>
 800695a:	4b2e      	ldr	r3, [pc, #184]	; (8006a14 <__swsetup_r+0xd0>)
 800695c:	429c      	cmp	r4, r3
 800695e:	d10f      	bne.n	8006980 <__swsetup_r+0x3c>
 8006960:	686c      	ldr	r4, [r5, #4]
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006968:	0719      	lsls	r1, r3, #28
 800696a:	d42c      	bmi.n	80069c6 <__swsetup_r+0x82>
 800696c:	06dd      	lsls	r5, r3, #27
 800696e:	d411      	bmi.n	8006994 <__swsetup_r+0x50>
 8006970:	2309      	movs	r3, #9
 8006972:	6033      	str	r3, [r6, #0]
 8006974:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006978:	f04f 30ff 	mov.w	r0, #4294967295
 800697c:	81a3      	strh	r3, [r4, #12]
 800697e:	e03e      	b.n	80069fe <__swsetup_r+0xba>
 8006980:	4b25      	ldr	r3, [pc, #148]	; (8006a18 <__swsetup_r+0xd4>)
 8006982:	429c      	cmp	r4, r3
 8006984:	d101      	bne.n	800698a <__swsetup_r+0x46>
 8006986:	68ac      	ldr	r4, [r5, #8]
 8006988:	e7eb      	b.n	8006962 <__swsetup_r+0x1e>
 800698a:	4b24      	ldr	r3, [pc, #144]	; (8006a1c <__swsetup_r+0xd8>)
 800698c:	429c      	cmp	r4, r3
 800698e:	bf08      	it	eq
 8006990:	68ec      	ldreq	r4, [r5, #12]
 8006992:	e7e6      	b.n	8006962 <__swsetup_r+0x1e>
 8006994:	0758      	lsls	r0, r3, #29
 8006996:	d512      	bpl.n	80069be <__swsetup_r+0x7a>
 8006998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800699a:	b141      	cbz	r1, 80069ae <__swsetup_r+0x6a>
 800699c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069a0:	4299      	cmp	r1, r3
 80069a2:	d002      	beq.n	80069aa <__swsetup_r+0x66>
 80069a4:	4630      	mov	r0, r6
 80069a6:	f7ff fb75 	bl	8006094 <_free_r>
 80069aa:	2300      	movs	r3, #0
 80069ac:	6363      	str	r3, [r4, #52]	; 0x34
 80069ae:	89a3      	ldrh	r3, [r4, #12]
 80069b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	2300      	movs	r3, #0
 80069b8:	6063      	str	r3, [r4, #4]
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	f043 0308 	orr.w	r3, r3, #8
 80069c4:	81a3      	strh	r3, [r4, #12]
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	b94b      	cbnz	r3, 80069de <__swsetup_r+0x9a>
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d4:	d003      	beq.n	80069de <__swsetup_r+0x9a>
 80069d6:	4621      	mov	r1, r4
 80069d8:	4630      	mov	r0, r6
 80069da:	f000 fa07 	bl	8006dec <__smakebuf_r>
 80069de:	89a0      	ldrh	r0, [r4, #12]
 80069e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069e4:	f010 0301 	ands.w	r3, r0, #1
 80069e8:	d00a      	beq.n	8006a00 <__swsetup_r+0xbc>
 80069ea:	2300      	movs	r3, #0
 80069ec:	60a3      	str	r3, [r4, #8]
 80069ee:	6963      	ldr	r3, [r4, #20]
 80069f0:	425b      	negs	r3, r3
 80069f2:	61a3      	str	r3, [r4, #24]
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	b943      	cbnz	r3, 8006a0a <__swsetup_r+0xc6>
 80069f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069fc:	d1ba      	bne.n	8006974 <__swsetup_r+0x30>
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	0781      	lsls	r1, r0, #30
 8006a02:	bf58      	it	pl
 8006a04:	6963      	ldrpl	r3, [r4, #20]
 8006a06:	60a3      	str	r3, [r4, #8]
 8006a08:	e7f4      	b.n	80069f4 <__swsetup_r+0xb0>
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	e7f7      	b.n	80069fe <__swsetup_r+0xba>
 8006a0e:	bf00      	nop
 8006a10:	2000012c 	.word	0x2000012c
 8006a14:	08007464 	.word	0x08007464
 8006a18:	08007484 	.word	0x08007484
 8006a1c:	08007444 	.word	0x08007444

08006a20 <abort>:
 8006a20:	2006      	movs	r0, #6
 8006a22:	b508      	push	{r3, lr}
 8006a24:	f000 fa52 	bl	8006ecc <raise>
 8006a28:	2001      	movs	r0, #1
 8006a2a:	f7fb fb20 	bl	800206e <_exit>
	...

08006a30 <__sflush_r>:
 8006a30:	898a      	ldrh	r2, [r1, #12]
 8006a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a36:	4605      	mov	r5, r0
 8006a38:	0710      	lsls	r0, r2, #28
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	d458      	bmi.n	8006af0 <__sflush_r+0xc0>
 8006a3e:	684b      	ldr	r3, [r1, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	dc05      	bgt.n	8006a50 <__sflush_r+0x20>
 8006a44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	dc02      	bgt.n	8006a50 <__sflush_r+0x20>
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a52:	2e00      	cmp	r6, #0
 8006a54:	d0f9      	beq.n	8006a4a <__sflush_r+0x1a>
 8006a56:	2300      	movs	r3, #0
 8006a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a5c:	682f      	ldr	r7, [r5, #0]
 8006a5e:	602b      	str	r3, [r5, #0]
 8006a60:	d032      	beq.n	8006ac8 <__sflush_r+0x98>
 8006a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	075a      	lsls	r2, r3, #29
 8006a68:	d505      	bpl.n	8006a76 <__sflush_r+0x46>
 8006a6a:	6863      	ldr	r3, [r4, #4]
 8006a6c:	1ac0      	subs	r0, r0, r3
 8006a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a70:	b10b      	cbz	r3, 8006a76 <__sflush_r+0x46>
 8006a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a74:	1ac0      	subs	r0, r0, r3
 8006a76:	2300      	movs	r3, #0
 8006a78:	4602      	mov	r2, r0
 8006a7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	6a21      	ldr	r1, [r4, #32]
 8006a80:	47b0      	blx	r6
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	d106      	bne.n	8006a96 <__sflush_r+0x66>
 8006a88:	6829      	ldr	r1, [r5, #0]
 8006a8a:	291d      	cmp	r1, #29
 8006a8c:	d82c      	bhi.n	8006ae8 <__sflush_r+0xb8>
 8006a8e:	4a2a      	ldr	r2, [pc, #168]	; (8006b38 <__sflush_r+0x108>)
 8006a90:	40ca      	lsrs	r2, r1
 8006a92:	07d6      	lsls	r6, r2, #31
 8006a94:	d528      	bpl.n	8006ae8 <__sflush_r+0xb8>
 8006a96:	2200      	movs	r2, #0
 8006a98:	6062      	str	r2, [r4, #4]
 8006a9a:	6922      	ldr	r2, [r4, #16]
 8006a9c:	04d9      	lsls	r1, r3, #19
 8006a9e:	6022      	str	r2, [r4, #0]
 8006aa0:	d504      	bpl.n	8006aac <__sflush_r+0x7c>
 8006aa2:	1c42      	adds	r2, r0, #1
 8006aa4:	d101      	bne.n	8006aaa <__sflush_r+0x7a>
 8006aa6:	682b      	ldr	r3, [r5, #0]
 8006aa8:	b903      	cbnz	r3, 8006aac <__sflush_r+0x7c>
 8006aaa:	6560      	str	r0, [r4, #84]	; 0x54
 8006aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aae:	602f      	str	r7, [r5, #0]
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	d0ca      	beq.n	8006a4a <__sflush_r+0x1a>
 8006ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ab8:	4299      	cmp	r1, r3
 8006aba:	d002      	beq.n	8006ac2 <__sflush_r+0x92>
 8006abc:	4628      	mov	r0, r5
 8006abe:	f7ff fae9 	bl	8006094 <_free_r>
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8006ac6:	e7c1      	b.n	8006a4c <__sflush_r+0x1c>
 8006ac8:	6a21      	ldr	r1, [r4, #32]
 8006aca:	2301      	movs	r3, #1
 8006acc:	4628      	mov	r0, r5
 8006ace:	47b0      	blx	r6
 8006ad0:	1c41      	adds	r1, r0, #1
 8006ad2:	d1c7      	bne.n	8006a64 <__sflush_r+0x34>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0c4      	beq.n	8006a64 <__sflush_r+0x34>
 8006ada:	2b1d      	cmp	r3, #29
 8006adc:	d001      	beq.n	8006ae2 <__sflush_r+0xb2>
 8006ade:	2b16      	cmp	r3, #22
 8006ae0:	d101      	bne.n	8006ae6 <__sflush_r+0xb6>
 8006ae2:	602f      	str	r7, [r5, #0]
 8006ae4:	e7b1      	b.n	8006a4a <__sflush_r+0x1a>
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	e7ad      	b.n	8006a4c <__sflush_r+0x1c>
 8006af0:	690f      	ldr	r7, [r1, #16]
 8006af2:	2f00      	cmp	r7, #0
 8006af4:	d0a9      	beq.n	8006a4a <__sflush_r+0x1a>
 8006af6:	0793      	lsls	r3, r2, #30
 8006af8:	bf18      	it	ne
 8006afa:	2300      	movne	r3, #0
 8006afc:	680e      	ldr	r6, [r1, #0]
 8006afe:	bf08      	it	eq
 8006b00:	694b      	ldreq	r3, [r1, #20]
 8006b02:	eba6 0807 	sub.w	r8, r6, r7
 8006b06:	600f      	str	r7, [r1, #0]
 8006b08:	608b      	str	r3, [r1, #8]
 8006b0a:	f1b8 0f00 	cmp.w	r8, #0
 8006b0e:	dd9c      	ble.n	8006a4a <__sflush_r+0x1a>
 8006b10:	4643      	mov	r3, r8
 8006b12:	463a      	mov	r2, r7
 8006b14:	4628      	mov	r0, r5
 8006b16:	6a21      	ldr	r1, [r4, #32]
 8006b18:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b1a:	47b0      	blx	r6
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	dc06      	bgt.n	8006b2e <__sflush_r+0xfe>
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	f04f 30ff 	mov.w	r0, #4294967295
 8006b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b2a:	81a3      	strh	r3, [r4, #12]
 8006b2c:	e78e      	b.n	8006a4c <__sflush_r+0x1c>
 8006b2e:	4407      	add	r7, r0
 8006b30:	eba8 0800 	sub.w	r8, r8, r0
 8006b34:	e7e9      	b.n	8006b0a <__sflush_r+0xda>
 8006b36:	bf00      	nop
 8006b38:	20400001 	.word	0x20400001

08006b3c <_fflush_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	690b      	ldr	r3, [r1, #16]
 8006b40:	4605      	mov	r5, r0
 8006b42:	460c      	mov	r4, r1
 8006b44:	b913      	cbnz	r3, 8006b4c <_fflush_r+0x10>
 8006b46:	2500      	movs	r5, #0
 8006b48:	4628      	mov	r0, r5
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	b118      	cbz	r0, 8006b56 <_fflush_r+0x1a>
 8006b4e:	6983      	ldr	r3, [r0, #24]
 8006b50:	b90b      	cbnz	r3, 8006b56 <_fflush_r+0x1a>
 8006b52:	f000 f887 	bl	8006c64 <__sinit>
 8006b56:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <_fflush_r+0x6c>)
 8006b58:	429c      	cmp	r4, r3
 8006b5a:	d11b      	bne.n	8006b94 <_fflush_r+0x58>
 8006b5c:	686c      	ldr	r4, [r5, #4]
 8006b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0ef      	beq.n	8006b46 <_fflush_r+0xa>
 8006b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b68:	07d0      	lsls	r0, r2, #31
 8006b6a:	d404      	bmi.n	8006b76 <_fflush_r+0x3a>
 8006b6c:	0599      	lsls	r1, r3, #22
 8006b6e:	d402      	bmi.n	8006b76 <_fflush_r+0x3a>
 8006b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b72:	f000 f915 	bl	8006da0 <__retarget_lock_acquire_recursive>
 8006b76:	4628      	mov	r0, r5
 8006b78:	4621      	mov	r1, r4
 8006b7a:	f7ff ff59 	bl	8006a30 <__sflush_r>
 8006b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b80:	4605      	mov	r5, r0
 8006b82:	07da      	lsls	r2, r3, #31
 8006b84:	d4e0      	bmi.n	8006b48 <_fflush_r+0xc>
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	059b      	lsls	r3, r3, #22
 8006b8a:	d4dd      	bmi.n	8006b48 <_fflush_r+0xc>
 8006b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b8e:	f000 f908 	bl	8006da2 <__retarget_lock_release_recursive>
 8006b92:	e7d9      	b.n	8006b48 <_fflush_r+0xc>
 8006b94:	4b05      	ldr	r3, [pc, #20]	; (8006bac <_fflush_r+0x70>)
 8006b96:	429c      	cmp	r4, r3
 8006b98:	d101      	bne.n	8006b9e <_fflush_r+0x62>
 8006b9a:	68ac      	ldr	r4, [r5, #8]
 8006b9c:	e7df      	b.n	8006b5e <_fflush_r+0x22>
 8006b9e:	4b04      	ldr	r3, [pc, #16]	; (8006bb0 <_fflush_r+0x74>)
 8006ba0:	429c      	cmp	r4, r3
 8006ba2:	bf08      	it	eq
 8006ba4:	68ec      	ldreq	r4, [r5, #12]
 8006ba6:	e7da      	b.n	8006b5e <_fflush_r+0x22>
 8006ba8:	08007464 	.word	0x08007464
 8006bac:	08007484 	.word	0x08007484
 8006bb0:	08007444 	.word	0x08007444

08006bb4 <std>:
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	b510      	push	{r4, lr}
 8006bb8:	4604      	mov	r4, r0
 8006bba:	e9c0 3300 	strd	r3, r3, [r0]
 8006bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bc2:	6083      	str	r3, [r0, #8]
 8006bc4:	8181      	strh	r1, [r0, #12]
 8006bc6:	6643      	str	r3, [r0, #100]	; 0x64
 8006bc8:	81c2      	strh	r2, [r0, #14]
 8006bca:	6183      	str	r3, [r0, #24]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	2208      	movs	r2, #8
 8006bd0:	305c      	adds	r0, #92	; 0x5c
 8006bd2:	f7fd fba1 	bl	8004318 <memset>
 8006bd6:	4b05      	ldr	r3, [pc, #20]	; (8006bec <std+0x38>)
 8006bd8:	6224      	str	r4, [r4, #32]
 8006bda:	6263      	str	r3, [r4, #36]	; 0x24
 8006bdc:	4b04      	ldr	r3, [pc, #16]	; (8006bf0 <std+0x3c>)
 8006bde:	62a3      	str	r3, [r4, #40]	; 0x28
 8006be0:	4b04      	ldr	r3, [pc, #16]	; (8006bf4 <std+0x40>)
 8006be2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006be4:	4b04      	ldr	r3, [pc, #16]	; (8006bf8 <std+0x44>)
 8006be6:	6323      	str	r3, [r4, #48]	; 0x30
 8006be8:	bd10      	pop	{r4, pc}
 8006bea:	bf00      	nop
 8006bec:	08006f05 	.word	0x08006f05
 8006bf0:	08006f27 	.word	0x08006f27
 8006bf4:	08006f5f 	.word	0x08006f5f
 8006bf8:	08006f83 	.word	0x08006f83

08006bfc <_cleanup_r>:
 8006bfc:	4901      	ldr	r1, [pc, #4]	; (8006c04 <_cleanup_r+0x8>)
 8006bfe:	f000 b8af 	b.w	8006d60 <_fwalk_reent>
 8006c02:	bf00      	nop
 8006c04:	08006b3d 	.word	0x08006b3d

08006c08 <__sfmoreglue>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	2568      	movs	r5, #104	; 0x68
 8006c0c:	1e4a      	subs	r2, r1, #1
 8006c0e:	4355      	muls	r5, r2
 8006c10:	460e      	mov	r6, r1
 8006c12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c16:	f7ff fa89 	bl	800612c <_malloc_r>
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	b140      	cbz	r0, 8006c30 <__sfmoreglue+0x28>
 8006c1e:	2100      	movs	r1, #0
 8006c20:	e9c0 1600 	strd	r1, r6, [r0]
 8006c24:	300c      	adds	r0, #12
 8006c26:	60a0      	str	r0, [r4, #8]
 8006c28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c2c:	f7fd fb74 	bl	8004318 <memset>
 8006c30:	4620      	mov	r0, r4
 8006c32:	bd70      	pop	{r4, r5, r6, pc}

08006c34 <__sfp_lock_acquire>:
 8006c34:	4801      	ldr	r0, [pc, #4]	; (8006c3c <__sfp_lock_acquire+0x8>)
 8006c36:	f000 b8b3 	b.w	8006da0 <__retarget_lock_acquire_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	200005bc 	.word	0x200005bc

08006c40 <__sfp_lock_release>:
 8006c40:	4801      	ldr	r0, [pc, #4]	; (8006c48 <__sfp_lock_release+0x8>)
 8006c42:	f000 b8ae 	b.w	8006da2 <__retarget_lock_release_recursive>
 8006c46:	bf00      	nop
 8006c48:	200005bc 	.word	0x200005bc

08006c4c <__sinit_lock_acquire>:
 8006c4c:	4801      	ldr	r0, [pc, #4]	; (8006c54 <__sinit_lock_acquire+0x8>)
 8006c4e:	f000 b8a7 	b.w	8006da0 <__retarget_lock_acquire_recursive>
 8006c52:	bf00      	nop
 8006c54:	200005b7 	.word	0x200005b7

08006c58 <__sinit_lock_release>:
 8006c58:	4801      	ldr	r0, [pc, #4]	; (8006c60 <__sinit_lock_release+0x8>)
 8006c5a:	f000 b8a2 	b.w	8006da2 <__retarget_lock_release_recursive>
 8006c5e:	bf00      	nop
 8006c60:	200005b7 	.word	0x200005b7

08006c64 <__sinit>:
 8006c64:	b510      	push	{r4, lr}
 8006c66:	4604      	mov	r4, r0
 8006c68:	f7ff fff0 	bl	8006c4c <__sinit_lock_acquire>
 8006c6c:	69a3      	ldr	r3, [r4, #24]
 8006c6e:	b11b      	cbz	r3, 8006c78 <__sinit+0x14>
 8006c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c74:	f7ff bff0 	b.w	8006c58 <__sinit_lock_release>
 8006c78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c7c:	6523      	str	r3, [r4, #80]	; 0x50
 8006c7e:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <__sinit+0x68>)
 8006c80:	4a13      	ldr	r2, [pc, #76]	; (8006cd0 <__sinit+0x6c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c86:	42a3      	cmp	r3, r4
 8006c88:	bf08      	it	eq
 8006c8a:	2301      	moveq	r3, #1
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	bf08      	it	eq
 8006c90:	61a3      	streq	r3, [r4, #24]
 8006c92:	f000 f81f 	bl	8006cd4 <__sfp>
 8006c96:	6060      	str	r0, [r4, #4]
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 f81b 	bl	8006cd4 <__sfp>
 8006c9e:	60a0      	str	r0, [r4, #8]
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 f817 	bl	8006cd4 <__sfp>
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2104      	movs	r1, #4
 8006caa:	60e0      	str	r0, [r4, #12]
 8006cac:	6860      	ldr	r0, [r4, #4]
 8006cae:	f7ff ff81 	bl	8006bb4 <std>
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	2109      	movs	r1, #9
 8006cb6:	68a0      	ldr	r0, [r4, #8]
 8006cb8:	f7ff ff7c 	bl	8006bb4 <std>
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	2112      	movs	r1, #18
 8006cc0:	68e0      	ldr	r0, [r4, #12]
 8006cc2:	f7ff ff77 	bl	8006bb4 <std>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	61a3      	str	r3, [r4, #24]
 8006cca:	e7d1      	b.n	8006c70 <__sinit+0xc>
 8006ccc:	080070c0 	.word	0x080070c0
 8006cd0:	08006bfd 	.word	0x08006bfd

08006cd4 <__sfp>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	4607      	mov	r7, r0
 8006cd8:	f7ff ffac 	bl	8006c34 <__sfp_lock_acquire>
 8006cdc:	4b1e      	ldr	r3, [pc, #120]	; (8006d58 <__sfp+0x84>)
 8006cde:	681e      	ldr	r6, [r3, #0]
 8006ce0:	69b3      	ldr	r3, [r6, #24]
 8006ce2:	b913      	cbnz	r3, 8006cea <__sfp+0x16>
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f7ff ffbd 	bl	8006c64 <__sinit>
 8006cea:	3648      	adds	r6, #72	; 0x48
 8006cec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	d503      	bpl.n	8006cfc <__sfp+0x28>
 8006cf4:	6833      	ldr	r3, [r6, #0]
 8006cf6:	b30b      	cbz	r3, 8006d3c <__sfp+0x68>
 8006cf8:	6836      	ldr	r6, [r6, #0]
 8006cfa:	e7f7      	b.n	8006cec <__sfp+0x18>
 8006cfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d00:	b9d5      	cbnz	r5, 8006d38 <__sfp+0x64>
 8006d02:	4b16      	ldr	r3, [pc, #88]	; (8006d5c <__sfp+0x88>)
 8006d04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d08:	60e3      	str	r3, [r4, #12]
 8006d0a:	6665      	str	r5, [r4, #100]	; 0x64
 8006d0c:	f000 f847 	bl	8006d9e <__retarget_lock_init_recursive>
 8006d10:	f7ff ff96 	bl	8006c40 <__sfp_lock_release>
 8006d14:	2208      	movs	r2, #8
 8006d16:	4629      	mov	r1, r5
 8006d18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d20:	6025      	str	r5, [r4, #0]
 8006d22:	61a5      	str	r5, [r4, #24]
 8006d24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d28:	f7fd faf6 	bl	8004318 <memset>
 8006d2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d34:	4620      	mov	r0, r4
 8006d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d38:	3468      	adds	r4, #104	; 0x68
 8006d3a:	e7d9      	b.n	8006cf0 <__sfp+0x1c>
 8006d3c:	2104      	movs	r1, #4
 8006d3e:	4638      	mov	r0, r7
 8006d40:	f7ff ff62 	bl	8006c08 <__sfmoreglue>
 8006d44:	4604      	mov	r4, r0
 8006d46:	6030      	str	r0, [r6, #0]
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d1d5      	bne.n	8006cf8 <__sfp+0x24>
 8006d4c:	f7ff ff78 	bl	8006c40 <__sfp_lock_release>
 8006d50:	230c      	movs	r3, #12
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	e7ee      	b.n	8006d34 <__sfp+0x60>
 8006d56:	bf00      	nop
 8006d58:	080070c0 	.word	0x080070c0
 8006d5c:	ffff0001 	.word	0xffff0001

08006d60 <_fwalk_reent>:
 8006d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d64:	4606      	mov	r6, r0
 8006d66:	4688      	mov	r8, r1
 8006d68:	2700      	movs	r7, #0
 8006d6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d72:	f1b9 0901 	subs.w	r9, r9, #1
 8006d76:	d505      	bpl.n	8006d84 <_fwalk_reent+0x24>
 8006d78:	6824      	ldr	r4, [r4, #0]
 8006d7a:	2c00      	cmp	r4, #0
 8006d7c:	d1f7      	bne.n	8006d6e <_fwalk_reent+0xe>
 8006d7e:	4638      	mov	r0, r7
 8006d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d84:	89ab      	ldrh	r3, [r5, #12]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d907      	bls.n	8006d9a <_fwalk_reent+0x3a>
 8006d8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	d003      	beq.n	8006d9a <_fwalk_reent+0x3a>
 8006d92:	4629      	mov	r1, r5
 8006d94:	4630      	mov	r0, r6
 8006d96:	47c0      	blx	r8
 8006d98:	4307      	orrs	r7, r0
 8006d9a:	3568      	adds	r5, #104	; 0x68
 8006d9c:	e7e9      	b.n	8006d72 <_fwalk_reent+0x12>

08006d9e <__retarget_lock_init_recursive>:
 8006d9e:	4770      	bx	lr

08006da0 <__retarget_lock_acquire_recursive>:
 8006da0:	4770      	bx	lr

08006da2 <__retarget_lock_release_recursive>:
 8006da2:	4770      	bx	lr

08006da4 <__swhatbuf_r>:
 8006da4:	b570      	push	{r4, r5, r6, lr}
 8006da6:	460e      	mov	r6, r1
 8006da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dac:	4614      	mov	r4, r2
 8006dae:	2900      	cmp	r1, #0
 8006db0:	461d      	mov	r5, r3
 8006db2:	b096      	sub	sp, #88	; 0x58
 8006db4:	da07      	bge.n	8006dc6 <__swhatbuf_r+0x22>
 8006db6:	2300      	movs	r3, #0
 8006db8:	602b      	str	r3, [r5, #0]
 8006dba:	89b3      	ldrh	r3, [r6, #12]
 8006dbc:	061a      	lsls	r2, r3, #24
 8006dbe:	d410      	bmi.n	8006de2 <__swhatbuf_r+0x3e>
 8006dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dc4:	e00e      	b.n	8006de4 <__swhatbuf_r+0x40>
 8006dc6:	466a      	mov	r2, sp
 8006dc8:	f000 f902 	bl	8006fd0 <_fstat_r>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	dbf2      	blt.n	8006db6 <__swhatbuf_r+0x12>
 8006dd0:	9a01      	ldr	r2, [sp, #4]
 8006dd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006dd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006dda:	425a      	negs	r2, r3
 8006ddc:	415a      	adcs	r2, r3
 8006dde:	602a      	str	r2, [r5, #0]
 8006de0:	e7ee      	b.n	8006dc0 <__swhatbuf_r+0x1c>
 8006de2:	2340      	movs	r3, #64	; 0x40
 8006de4:	2000      	movs	r0, #0
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	b016      	add	sp, #88	; 0x58
 8006dea:	bd70      	pop	{r4, r5, r6, pc}

08006dec <__smakebuf_r>:
 8006dec:	898b      	ldrh	r3, [r1, #12]
 8006dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006df0:	079d      	lsls	r5, r3, #30
 8006df2:	4606      	mov	r6, r0
 8006df4:	460c      	mov	r4, r1
 8006df6:	d507      	bpl.n	8006e08 <__smakebuf_r+0x1c>
 8006df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	6123      	str	r3, [r4, #16]
 8006e00:	2301      	movs	r3, #1
 8006e02:	6163      	str	r3, [r4, #20]
 8006e04:	b002      	add	sp, #8
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
 8006e08:	466a      	mov	r2, sp
 8006e0a:	ab01      	add	r3, sp, #4
 8006e0c:	f7ff ffca 	bl	8006da4 <__swhatbuf_r>
 8006e10:	9900      	ldr	r1, [sp, #0]
 8006e12:	4605      	mov	r5, r0
 8006e14:	4630      	mov	r0, r6
 8006e16:	f7ff f989 	bl	800612c <_malloc_r>
 8006e1a:	b948      	cbnz	r0, 8006e30 <__smakebuf_r+0x44>
 8006e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e20:	059a      	lsls	r2, r3, #22
 8006e22:	d4ef      	bmi.n	8006e04 <__smakebuf_r+0x18>
 8006e24:	f023 0303 	bic.w	r3, r3, #3
 8006e28:	f043 0302 	orr.w	r3, r3, #2
 8006e2c:	81a3      	strh	r3, [r4, #12]
 8006e2e:	e7e3      	b.n	8006df8 <__smakebuf_r+0xc>
 8006e30:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <__smakebuf_r+0x7c>)
 8006e32:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	6020      	str	r0, [r4, #0]
 8006e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3c:	81a3      	strh	r3, [r4, #12]
 8006e3e:	9b00      	ldr	r3, [sp, #0]
 8006e40:	6120      	str	r0, [r4, #16]
 8006e42:	6163      	str	r3, [r4, #20]
 8006e44:	9b01      	ldr	r3, [sp, #4]
 8006e46:	b15b      	cbz	r3, 8006e60 <__smakebuf_r+0x74>
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e4e:	f000 f8d1 	bl	8006ff4 <_isatty_r>
 8006e52:	b128      	cbz	r0, 8006e60 <__smakebuf_r+0x74>
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	f023 0303 	bic.w	r3, r3, #3
 8006e5a:	f043 0301 	orr.w	r3, r3, #1
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	89a0      	ldrh	r0, [r4, #12]
 8006e62:	4305      	orrs	r5, r0
 8006e64:	81a5      	strh	r5, [r4, #12]
 8006e66:	e7cd      	b.n	8006e04 <__smakebuf_r+0x18>
 8006e68:	08006bfd 	.word	0x08006bfd

08006e6c <_malloc_usable_size_r>:
 8006e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e70:	1f18      	subs	r0, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	bfbc      	itt	lt
 8006e76:	580b      	ldrlt	r3, [r1, r0]
 8006e78:	18c0      	addlt	r0, r0, r3
 8006e7a:	4770      	bx	lr

08006e7c <_raise_r>:
 8006e7c:	291f      	cmp	r1, #31
 8006e7e:	b538      	push	{r3, r4, r5, lr}
 8006e80:	4604      	mov	r4, r0
 8006e82:	460d      	mov	r5, r1
 8006e84:	d904      	bls.n	8006e90 <_raise_r+0x14>
 8006e86:	2316      	movs	r3, #22
 8006e88:	6003      	str	r3, [r0, #0]
 8006e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e92:	b112      	cbz	r2, 8006e9a <_raise_r+0x1e>
 8006e94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e98:	b94b      	cbnz	r3, 8006eae <_raise_r+0x32>
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f000 f830 	bl	8006f00 <_getpid_r>
 8006ea0:	462a      	mov	r2, r5
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eaa:	f000 b817 	b.w	8006edc <_kill_r>
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d00a      	beq.n	8006ec8 <_raise_r+0x4c>
 8006eb2:	1c59      	adds	r1, r3, #1
 8006eb4:	d103      	bne.n	8006ebe <_raise_r+0x42>
 8006eb6:	2316      	movs	r3, #22
 8006eb8:	6003      	str	r3, [r0, #0]
 8006eba:	2001      	movs	r0, #1
 8006ebc:	e7e7      	b.n	8006e8e <_raise_r+0x12>
 8006ebe:	2400      	movs	r4, #0
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ec6:	4798      	blx	r3
 8006ec8:	2000      	movs	r0, #0
 8006eca:	e7e0      	b.n	8006e8e <_raise_r+0x12>

08006ecc <raise>:
 8006ecc:	4b02      	ldr	r3, [pc, #8]	; (8006ed8 <raise+0xc>)
 8006ece:	4601      	mov	r1, r0
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	f7ff bfd3 	b.w	8006e7c <_raise_r>
 8006ed6:	bf00      	nop
 8006ed8:	2000012c 	.word	0x2000012c

08006edc <_kill_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	2300      	movs	r3, #0
 8006ee0:	4d06      	ldr	r5, [pc, #24]	; (8006efc <_kill_r+0x20>)
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	602b      	str	r3, [r5, #0]
 8006eea:	f7fb f8b0 	bl	800204e <_kill>
 8006eee:	1c43      	adds	r3, r0, #1
 8006ef0:	d102      	bne.n	8006ef8 <_kill_r+0x1c>
 8006ef2:	682b      	ldr	r3, [r5, #0]
 8006ef4:	b103      	cbz	r3, 8006ef8 <_kill_r+0x1c>
 8006ef6:	6023      	str	r3, [r4, #0]
 8006ef8:	bd38      	pop	{r3, r4, r5, pc}
 8006efa:	bf00      	nop
 8006efc:	200005b0 	.word	0x200005b0

08006f00 <_getpid_r>:
 8006f00:	f7fb b89e 	b.w	8002040 <_getpid>

08006f04 <__sread>:
 8006f04:	b510      	push	{r4, lr}
 8006f06:	460c      	mov	r4, r1
 8006f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f0c:	f000 f894 	bl	8007038 <_read_r>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	bfab      	itete	ge
 8006f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f16:	89a3      	ldrhlt	r3, [r4, #12]
 8006f18:	181b      	addge	r3, r3, r0
 8006f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f1e:	bfac      	ite	ge
 8006f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f22:	81a3      	strhlt	r3, [r4, #12]
 8006f24:	bd10      	pop	{r4, pc}

08006f26 <__swrite>:
 8006f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2a:	461f      	mov	r7, r3
 8006f2c:	898b      	ldrh	r3, [r1, #12]
 8006f2e:	4605      	mov	r5, r0
 8006f30:	05db      	lsls	r3, r3, #23
 8006f32:	460c      	mov	r4, r1
 8006f34:	4616      	mov	r6, r2
 8006f36:	d505      	bpl.n	8006f44 <__swrite+0x1e>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f40:	f000 f868 	bl	8007014 <_lseek_r>
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	4632      	mov	r2, r6
 8006f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f4c:	81a3      	strh	r3, [r4, #12]
 8006f4e:	4628      	mov	r0, r5
 8006f50:	463b      	mov	r3, r7
 8006f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5a:	f000 b817 	b.w	8006f8c <_write_r>

08006f5e <__sseek>:
 8006f5e:	b510      	push	{r4, lr}
 8006f60:	460c      	mov	r4, r1
 8006f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f66:	f000 f855 	bl	8007014 <_lseek_r>
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	bf15      	itete	ne
 8006f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f7a:	81a3      	strheq	r3, [r4, #12]
 8006f7c:	bf18      	it	ne
 8006f7e:	81a3      	strhne	r3, [r4, #12]
 8006f80:	bd10      	pop	{r4, pc}

08006f82 <__sclose>:
 8006f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f86:	f000 b813 	b.w	8006fb0 <_close_r>
	...

08006f8c <_write_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	4604      	mov	r4, r0
 8006f90:	4608      	mov	r0, r1
 8006f92:	4611      	mov	r1, r2
 8006f94:	2200      	movs	r2, #0
 8006f96:	4d05      	ldr	r5, [pc, #20]	; (8006fac <_write_r+0x20>)
 8006f98:	602a      	str	r2, [r5, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f7fa fa86 	bl	80014ac <_write>
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d102      	bne.n	8006faa <_write_r+0x1e>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	b103      	cbz	r3, 8006faa <_write_r+0x1e>
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	bd38      	pop	{r3, r4, r5, pc}
 8006fac:	200005b0 	.word	0x200005b0

08006fb0 <_close_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	4d05      	ldr	r5, [pc, #20]	; (8006fcc <_close_r+0x1c>)
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	602b      	str	r3, [r5, #0]
 8006fbc:	f7fb f87e 	bl	80020bc <_close>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_close_r+0x1a>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_close_r+0x1a>
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	200005b0 	.word	0x200005b0

08006fd0 <_fstat_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	4d06      	ldr	r5, [pc, #24]	; (8006ff0 <_fstat_r+0x20>)
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	4608      	mov	r0, r1
 8006fda:	4611      	mov	r1, r2
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	f7fb f878 	bl	80020d2 <_fstat>
 8006fe2:	1c43      	adds	r3, r0, #1
 8006fe4:	d102      	bne.n	8006fec <_fstat_r+0x1c>
 8006fe6:	682b      	ldr	r3, [r5, #0]
 8006fe8:	b103      	cbz	r3, 8006fec <_fstat_r+0x1c>
 8006fea:	6023      	str	r3, [r4, #0]
 8006fec:	bd38      	pop	{r3, r4, r5, pc}
 8006fee:	bf00      	nop
 8006ff0:	200005b0 	.word	0x200005b0

08006ff4 <_isatty_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	4d05      	ldr	r5, [pc, #20]	; (8007010 <_isatty_r+0x1c>)
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	602b      	str	r3, [r5, #0]
 8007000:	f7fb f876 	bl	80020f0 <_isatty>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_isatty_r+0x1a>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_isatty_r+0x1a>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	200005b0 	.word	0x200005b0

08007014 <_lseek_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4604      	mov	r4, r0
 8007018:	4608      	mov	r0, r1
 800701a:	4611      	mov	r1, r2
 800701c:	2200      	movs	r2, #0
 800701e:	4d05      	ldr	r5, [pc, #20]	; (8007034 <_lseek_r+0x20>)
 8007020:	602a      	str	r2, [r5, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	f7fb f86e 	bl	8002104 <_lseek>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_lseek_r+0x1e>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_lseek_r+0x1e>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	200005b0 	.word	0x200005b0

08007038 <_read_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4604      	mov	r4, r0
 800703c:	4608      	mov	r0, r1
 800703e:	4611      	mov	r1, r2
 8007040:	2200      	movs	r2, #0
 8007042:	4d05      	ldr	r5, [pc, #20]	; (8007058 <_read_r+0x20>)
 8007044:	602a      	str	r2, [r5, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	f7fb f81b 	bl	8002082 <_read>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_read_r+0x1e>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_read_r+0x1e>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	200005b0 	.word	0x200005b0

0800705c <_init>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	bf00      	nop
 8007060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007062:	bc08      	pop	{r3}
 8007064:	469e      	mov	lr, r3
 8007066:	4770      	bx	lr

08007068 <_fini>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	bf00      	nop
 800706c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706e:	bc08      	pop	{r3}
 8007070:	469e      	mov	lr, r3
 8007072:	4770      	bx	lr
